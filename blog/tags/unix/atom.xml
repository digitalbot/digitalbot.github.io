<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: unix | About Digital]]></title>
  <link href="http://blog.digital-bot.com/blog/tags/unix/atom.xml" rel="self"/>
  <link href="http://blog.digital-bot.com/"/>
  <updated>2013-09-16T03:36:41+09:00</updated>
  <id>http://blog.digital-bot.com/</id>
  <author>
    <name><![CDATA[digital_bot]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[複数PCでsshキーを共有する]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/16/ssh-add/"/>
    <updated>2013-09-16T03:28:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/16/ssh-add</id>
    <content type="html"><![CDATA[<p>色んなPCでsshの鍵を共有している場合、単に鍵をコピーするだけでなく<code>ssh-add</code>が必要。</p>

<p>PC Aでssh-keygenしたキーをPC Bにコピーして使ってたんだけど、毎回</p>

<pre><code>enter passphrase for key
</code></pre>

<p>って聞いてきて鍵登録してる意味ないやん、って思いながらパスをポチポチ打ってた。</p>

<p>けどどう考えても鍵コピーした手間に見合った効果得られてないしなんだか損してるって気付いたので重い腰を上げて設定してみた。<br/>
調べたところ、PC Aではssh-keygenしたからssh-agentに登録されてるけど、PC Bでは鍵がssh-agentに登録されてないのが原因ぽいことがわかった。<br/>
そこで</p>

<pre><code>$ eval `ssh-agent`
$ ssh-add [keyのパス（デフォルトは~/.ssh/id_rsaだと思う）]
</code></pre>

<p>することで鍵を登録した。<br/>
これでいろいろ捗るようになった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多段sshの方法]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/15/how-ssh/"/>
    <updated>2013-09-15T19:37:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/15/how-ssh</id>
    <content type="html"><![CDATA[<p>多段sshをするのは知ってれば結構簡単で</p>

<pre><code>[digitalbot@local]$ ssh -t FOO ssh BAR
</code></pre>

<p>と<code>-t</code>オプションを使うことでssh先で後続のコマンドを実行してくれるので<code>local --&gt; FOO --&gt; BAR</code>と多段sshしてくれる。</p>

<h2>途中でsudoをはさむ</h2>

<p>途中でsudoを挟んで三段sshするときなんかは少しやっかい。</p>

<pre><code>local --&gt; FOO --&gt; BAR --&gt; BAZ
</code></pre>

<p>でFOOからBARにsshする際に<code>sudo ssh BAR</code>しなきゃいけないとき。
つまりワンライナーじゃなく順番にログインしていくと下記みたいになるやつ。</p>

<pre><code>[digitalbot@local]$ ssh FOO
[digitalbot@FOO]$ sudo ssh BAR
[root@BAR]$ ssh BAZ
</code></pre>

<p>これは</p>

<pre><code>[digitalbot@local]$ ssh -t FOO /usr/bin/sudo ssh -t BAR ssh BAZ
</code></pre>

<p>で一足飛びに途中でsudoを挟んで多段sshできる。sudoじゃなくても、途中で文字コード変換を挟んだりする場合も同じ要領でできるはず。</p>

<p>これはどの環境でもそうなのかよくわからないけど、<code>sudo</code>をフルパスで書かないと<code>ssh -t</code>で仮想ログインしたシェルでパスが通ってなくてエラーがでてしまったので注意が必要。</p>

<h2>.ssh/configでの設定</h2>

<p>当然.ssh/config内で設定しといたほうが楽なので設定したいところなんだけど、途中でsudoを挟む場合の書き方がイマイチよくわかってない。<br/>
途中でsudoがなければ</p>

<pre><code>Host FOO
    Hostname foo.com
    User digitalbot

Host BAR
    Hostname bar.com
    User digitalbot
    ProxyCommand ssh FOO -W %h:%p
</code></pre>

<p>みたいにそれぞれに単純に書くだけで良いのだけど&hellip;<br/>
だれかわかるようだったらsudoを挟む書き方を教えて。<br/>
Emacsのtrampだったら途中でsudoを挟む多段sshもできるから、できないことないと思うんだけど<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<h2>ちなみに</h2>

<p>ProxyCommand内の-Wを使った書き方はOpenSSHのver.5.4以前では使えないのでその場合は<code>nc</code>を使えば良い。</p>

<h4>参考</h4>

<p><a href="http://blog.glidenote.com/blog/2012/02/19/ssh-proxycommand/">多段sshで4段先のサーバに一発ログイン</a></p>

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://blog.digital-bot.com/blog/2013/09/05/emacs-tramp/">Emacs trampを使った多段リモートファイル操作</a>
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[percolが便利だけど、入れるにはpython2系のほうが良さそう]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/11/about-percol/"/>
    <updated>2013-09-11T01:03:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/11/about-percol</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/mooz/percol">percol</a>というコマンドラインを大変便利にしてくれるソフトウェアがあるのだけれど、これをインストールするときに少しハマった。percolはpython製のツールで、インストール方法は素直に<code>git clone</code>してきて<code>setup.py</code>を手で叩くか、<code>pip install percol</code>するなどあるんだけど、なんだか毎回どうしようか迷う。というのも、あんまりpython製のアプリとして意識したくないから<code>/usr/local/bin</code>とかに入って欲しいんだけど、管理の簡単さなどから<code>pip</code>も捨てがたいよなぁってなるから。</p>

<p>んで、先日もMBAを新調したのでpercolを入れてたんだけど、どうにもインストールが出来ない。pythonに明るくないのでなんて言えばいいかわからないし先日のことなので詳しくは忘れたけど、ヘッダというかモジュールのパスが解決出来てないっぽくてmakeが出来ない状況になってた。</p>

<p>どうしようかなぁと思ってたんだけど、これ、結論からいうと<strong>pythonのバージョンが間違ってた</strong>。</p>

<p>python使いの人にとっては常識なのかもしれないけど、python3系の環境ではダメで、python2系の環境にする必要があっただけみたい。自分は<strong>python3.3.2</strong>を<code>anyenv</code>で管理して入れてたので</p>

<pre><code>$ pyenv install 2.7.5
$ pyenv rehash
$ pyenv global 2.7.5
$ pyenv versions
#=&gt;   system
#=&gt; * 2.7.5 (set by /Users/kosuke/.anyenv/envs/pyenv/version)
#=&gt;   3.3.2
</code></pre>

<p>してもともと<strong>2.7.5</strong>を入れなおしてglobalに設定すれば良かった。そんで結局pipを使うことにしたので</p>

<pre><code>$ pip install percol
</code></pre>

<p>した。これでターミナル上でanythingライクな操作が可能になり、平和にまた一歩近づいた。めでたし。ついでに設定ファイルも載せておこう。</p>

<p><div><script src='https://gist.github.com/6511590.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<h4>参考</h4>

<ul>
<li><p><a href="http://d.hatena.ne.jp/kbkbkbkb1/20120429/1335835500">anything 的な絞りこみコマンド percol の紹介</a></p></li>
<li><p><a href="http://tomykaira.hatenablog.com/entry/2013/05/12/115152">git + percol(anything on terminal) が便利</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs trampを使った多段リモートファイル操作]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/05/emacs-tramp/"/>
    <updated>2013-09-05T00:03:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/05/emacs-tramp</id>
    <content type="html"><![CDATA[<p>Emacsでは<code>tramp</code>という、リモートのファイルやディレクトリをあたかもローカルにあるように扱うことができる拡張が標準で備えられてる。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/hideden/20090108/1231395529">emacs + trampで多段SSHで接続したサーバー上のファイルを直接編集する時のメモ</a></li>
</ul>


<p>これは少し過去の情報だが、基本的にはこの通りだし、多段ssh、なかでもsudoを途中で挟む多段sshについて言及されているのでとても良い記事だと思う。そこで、自分への忘備録も兼ねて、使い方や補足をしたいと思う。ちなみに、環境としてはCocoaEmacs v24.3を想定しているが、Emacs v23以降だったら大体変わらないと思う。</p>

<!-- more -->


<h2>HOW TO USE</h2>

<p>最初から入ってるので<code>.emacs</code>に</p>

<pre><code>(require 'tramp)
(setq tramp-default-method "ssh")
</code></pre>

<p>するだけ。あとはホントに<code>C-xC-f</code> <code>/user@hoge.com:~/fuga.txt</code>とかすると使える。<code>anything</code>や<code>helm</code>とも連携することができるし、<code>recentf</code>の設定にもよるけどパスを打つこと無く履歴から開くこともできる。ただ、<code>helm</code>越しだと現状いくつか問題があるので注意が必要(<code>helm-for-files</code>でエラーが起きたり、tramp上現在ディレクトリをソースに含めると重くなる)。</p>

<p>注意点は普通<code>find-file</code>(<code>C-xC-f</code>)したときって、プロンプトが<code>~/</code>ってなってると思うんだけど、これを<code>/</code>にした上でサーバ名を書き始めること。最初の何もわかってなかった頃これを間違えて悩んでたときあった。</p>

<p>で、しかもtrampはしっかりと<code>~/.ssh/config</code>まで読んでくれてるようなので、実は特別な設定をしないでも<code>~/.ssh/config</code>の方で設定が済んでいればホスト名などを省略して書くことができる。素晴らしい。</p>

<h2>多段ssh</h2>

<p>多段sshも<code>~/.ssh/config</code>の設定がしてあれば難なくできるはずだけど、個人的に一つ重宝している機能があって、sshの途中で<code>sudo</code>を挟めることがとても良い。以下にサンプルをのせてみる。</p>

<p><div><script src='https://gist.github.com/6438514.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p><code>tramp-default-proxies-alist</code>に<code>("host" "user" "method")</code>を設定してtrampを実行した場合、<strong>method</strong>で記述した方法で一旦接続した後に<strong>user@host</strong>に接続を行う<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。これを利用して一段目のサーバで<code>sudo</code>して<em>root</em>として二段目のサーバにログインできているのがポイント高い。</p>

<p>んでこの二段目のサーバに入るときにプロンプトからパスワードを要求されるので一段目でsudoするときのパスを入力すれば一気に三段目でも四段目でもファイルやディレクトリを開くことができる。</p>

<h2>おわりに</h2>

<p>このEmacsのtrampがあるからCocoaEmacsを使ってると行っても過言ではない。<code>perl-completion.el</code>や<code>key-combo.el</code>などの一部のelispと相性が悪いのが難点だけど、大変便利に使ってる。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://dukeiizu.blogspot.jp/2011/05/emacs-tramp-sudo.html">emacs TRAMP で、リモート・サーバを sudo で接続する</a>
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressのインストール]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/02/intro-octopress/"/>
    <updated>2013-09-02T21:00:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/02/intro-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://blog.digital-bot.com/blog/2013/09/01/start-octopress/">先のエントリ</a>の通り、Octopressを導入したので導入時に何をしたか、どこにハマったかを残しておこうと思う。</p>

<!-- more -->


<p>このOctopress + GitHub Pagesを使ってのブログ開設ってのは技術的にはもう1、2年前のトレンドっぽいし、最近ではむしろオレオレBlogの実装とかがトレンドっぽいけど<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>、まぁでもともかく<strong>ruby</strong>にも触れてみたかったし、リッチさとシンプルさのバランスから今回はOctopress + GitHub Pagesを採用することにした。</p>

<h2>INSTALL</h2>

<ul>
<li><a href="http://octopress.org/">公式サイト</a></li>
</ul>


<p>インストールは公式の<a href="http://octopress.org/doc/setup/">setupページ</a>を見れば大体問題ないと思うし、なんだったら日本語の解説記事<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>もいろいろあるのでそちらを参考にすれば良いと思う。</p>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress
</code></pre>

<p>基本的には上コマンドを打って、後にモジュールを入れていくだけ。</p>

<p>ただ、一点注意するポイントがあって、<strong>ruby</strong>のバージョンが1.9.3じゃなければいけないことと、<strong>rbenv</strong>で1.9.3を入れててもなんだか</p>

<pre><code>rbenv: version `1.9.3' is not installed
</code></pre>

<p>とか言われてセットアップをすすめることができないこと。</p>

<p>これはおそらくrbenvで管理してるrubyのバージョンが、パッチ番号まで含めたものになってるからだと思う。試しにホームディレクトリかどっかで<code>rbenv versions</code>するとこうなる</p>

<pre><code>$ rbenv versions
  system
  1.9.3-p448
* 2.0.0-p247 (set by /Users/kosuke/.anyenv/envs/rbenv/version)
</code></pre>

<p><code>global</code>は<em>2.0.0-p247</em>を使うことになってるし、<em>1.9.3</em>も<strong>1.9.3-p448</strong>がしっかり入っているので、octopressのディレクトリの<code>.ruby-version</code>がしっかりしていれば特に問題なくセットアップを進めることができるはずだ。んで、試しにその.ruby-versionを見てみるとこうなっていた。</p>

<pre><code>$ cat OCTOPRESSDIR/.ruby-version
1.9.3
</code></pre>

<p>これはもしやと思い</p>

<pre><code>$ echo "1.9.3-p448" &gt; OCTOPRESSDIR/.ruby-version
</code></pre>

<p>とすると無事先のエラーが消えセットアップを進めることができるようになった。なんだかrbenvのエラーが出てハマってるって人はパッチ番号まで含めた.ruby-versionを改めて作ると良いかもしれない。</p>

<p>まぁともかくrbenvの問題を乗り切ればあとは公式の手順通りにに<code>cd octopress</code>した後に</p>

<pre><code>$ gem install bundler #さっきはここでversionについてエラーが出てた
$ rbenv rehash
$ bundle install
$ bundle update
</code></pre>

<p>すればオーケー。</p>

<p><strong>ここで大事なのが</strong>、この時点で（<code>rake install</code>する前に）</p>

<pre><code>$ git add .
$ git commit -m "init ok"
</code></pre>

<p>とでもしてしっかり現状を記録しておくこと。何故なら、後にテーマを変えたり色々プラグインを入れたりしたときに、わけがわからなくなって初期状態に戻したくなることが絶対にあるから。以後、テーマを入れたりプラグインを入れたりするときはブランチを切って気に入ったらマージするなどの作業をすることをお勧めする。</p>

<p>コミットをしたらとりあえず</p>

<pre><code>$ rake install
</code></pre>

<p>すれば準備は万端になるし</p>

<pre><code>$ rake preview
</code></pre>

<p>すれば <a href="http://localhost:4000/">http://localhost:4000/</a> にサーバが立ち上がり初期設定のブログのプレビューが見れるはず。</p>

<h4>Directory_watcherの問題</h4>

<ul>
<li><a href="http://blog.satooshi.jp/blog/2013/04/09/octopress-preview-never-stop-auto-regeneration/">Octopressでpreviewしていたらregeneration: 1 files changedが終わらない場合の対処方法</a></li>
</ul>


<p>ここにあるとおり、Octopressは<code>rake preview</code>でプレビューが見れるのはいいんだけど、なんだかファイル監視システムの不具合でCPU使用率がとんでもないことになってしまうバグが有る。なので<code>Gemfile</code>の中でdirectory_watcherのバージョンを明示してあげよう。</p>

<pre><code>gem "directory_watcher", "~&gt; 1.4.1"
</code></pre>

<p>こうして再度<code>bundle update</code>すればこの問題は解決されるはず。</p>

<h2>おわりに</h2>

<p>あとは他のブログで色々と解説されている通り<code>rake setup_github_pages</code>したり、<code>rake new_post["hoge"]</code>するなりなんなりでブログを書いていけば良いと思う。他にも紹介すべきポイントやgistのズレの問題について書くことはあるんだけど、今回はとりあえずインストールまで書いてみた。</p>

<p>以上。</p>

<p>※ なお、参考に上げたページなどは大変有用だが一部間違った情報などもあるので注意が必要</p>

<h4>参考</h4>

<ul>
<li><p><a href="http://rcmdnk.github.io/blog/2013/03/07/setup-octopress/">GitHub pages + Octopressの導入</a></p></li>
<li><p><a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">GithubとOctopressでモダンな技術系ブログを作ってみる</a></p></li>
</ul>


<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p>例えばPerlでは<a href="http://songmu.github.io/p5-Riji/blog/">riji</a>など。
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://rcmdnk.github.io/blog/2013/03/07/setup-octopress/">http://rcmdnk.github.io/blog/2013/03/07/setup-octopress/</a>
<a href='#fnref:2' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
