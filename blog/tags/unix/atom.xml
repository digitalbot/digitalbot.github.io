<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: unix | About Digital]]></title>
  <link href="http://blog.digital-bot.com/blog/tags/unix/atom.xml" rel="self"/>
  <link href="http://blog.digital-bot.com/"/>
  <updated>2014-08-31T02:35:58+09:00</updated>
  <id>http://blog.digital-bot.com/</id>
  <author>
    <name><![CDATA[digital_bot]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vimを使いやすくする]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/10/12/improve-vim/"/>
    <updated>2013-10-12T01:50:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/10/12/improve-vim</id>
    <content type="html"><![CDATA[<p>Emacs派でEmacsは結構拡張してるけど、vimだってコマンドラインから結構手軽につかってる。なぜならEmacsは起動に時間がかかるし、CocoaEmacsに最適化した設定だからあまりターミナルから起動したくないから。もちろんそこらへんもいろいろ工夫はしてるけど、ほんとにさっくりファイルを弄りたいときなんかは結構vimで弄ったりする。</p>

<p>これまではtabの設定とか最低限の設定をした.vimrcを使ってたんだけど、せっかくだからvimももう少し便利にすることにした。まぁ何かに行き詰まったときにこういう設定をすると仕事してる気になって落ち着くっていう悪い癖なだけな気もする。</p>

<!-- more -->


<h2>.vimrc</h2>

<p><a href="http://blog.digital-bot.com/blog/2013/09/30/macvim-kaoriya/">前回</a>、最新のVim7.4のMacVim-Kaoriyaを入れたお陰<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>でどうやらいくつかのプラグインが強化されてるらしい。まぁ詳しい説明は<a href="http://qiita.com/">Qiita</a>なんかにまかせる。</p>

<p>まぁだらだら書くのもあれなので手っ取り早く<strong>.vim</strong>を晒そう</p>

<h3>リポジトリ</h3>

<ul>
<li><a href="https://github.com/digitalbot/dot-vim">dot-vim</a></li>
</ul>


<p>今回我ながらポイントだと思うのが、READMEのとおりにセットアップすれば大体どの環境(unix系)でも動く汎用的な設定ができたところ。Emacsの設定はとてもじゃないけど、現状自分のMac以外に持ち出せないのでここは少しこだわってみた。</p>

<p>そしてそのセットアップもできる限り簡単に仕上げたつもり。基本的には<code>git clone --recursive</code>して<code>./setup.sh</code>するだけ。簡単。</p>

<pre><code>$ git clone --recursive git://github.com/digitalbot/dot-vim.git
$ cd dot-vim
$ ./setup.sh
$ vim +NeoBundleInstall +q
</code></pre>

<p>READMEからの引用だけど、これで元のvimの挙動をそんなにいじらないけど細かいところで便利なvimができあがる。git cloneの<code>--recursive</code>については<a href="http://blog.digital-bot.com/blog/2013/08/31/git-clone-recursive/">以前書いたとおり</a>。</p>

<p>ともかく、詳しい設定の内容は割愛するけど、<code>NeoBundle</code>、<code>Unite</code>、<code>Lightline</code>、<code>Quickrun</code>とか<code>Neocomplete</code>を導入した。これ以上増やすとEmacsみたいになるので、ここらへんが必要最低限だと思う。ちなみに、<code>if_lua</code>が効かない、つまり古めのvimでもそんときは<code>Neocomplete</code>じゃなく<code>Neocomplcache</code>を使うように条件分岐してるから、ほんとに大体の環境でこの<strong>.vim</strong>は動くはず。</p>

<h2>おわりに</h2>

<p>エディタの拡張は「どこまでやるか」のバランスがとてもむずかしいように思う。<strong>Emacs</strong>ではやりすぎて重たくなってしまってるし(それでもこの記事も<strong>Emacs</strong>で書いてるけど)、できるだけ必要最低限でポータビリティがあるのがカッコイイと最近は思い始めた。あと、全然環境の違う赤の他人が<code>git clone</code>して試せるかどうかを考えてるってもの個人的には渋くてかっこいいと思う。</p>

<p>なお、Lightlineはコマンドラインから<code>mvim</code>してGUIで動かすと変なwarnを出すのでGUIではオフにしている。そこら辺のことはまた別のエントリにしようかと思ってる。</p>

<p>あとvimは引数に<code>+command</code>するとそのコマンドを起動時に実行してくれるらしく、これのお陰で<code>vim +NeoBundleInstall +q</code>といった風にワンライナーでプラグインをインストールできるのが良いと思った。</p>

<p>でもvim scriptはちょっとよくわかんないとも思った。<del>elispのほうが美しい</del></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><code>if_lua</code>が大事らしい
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[複数PCでsshキーを共有する]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/16/ssh-add/"/>
    <updated>2013-09-16T03:28:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/16/ssh-add</id>
    <content type="html"><![CDATA[<p>色んなPCでsshの鍵を共有している場合、単に鍵をコピーするだけでなく<code>ssh-add</code>が必要。</p>

<p>PC Aでssh-keygenしたキーをPC Bにコピーして使ってたんだけど、毎回</p>

<pre><code>enter passphrase for key
</code></pre>

<p>って聞いてきて鍵登録してる意味ないやん、って思いながらパスをポチポチ打ってた。</p>

<p>けどどう考えても鍵コピーした手間に見合った効果得られてないしなんだか損してるって気付いたので重い腰を上げて設定してみた。<br/>
調べたところ、PC Aではssh-keygenしたからssh-agentに登録されてるけど、PC Bでは鍵がssh-agentに登録されてないのが原因ぽいことがわかった。<br/>
そこで</p>

<pre><code>$ eval `ssh-agent`
$ ssh-add [keyのパス（デフォルトは~/.ssh/id_rsaだと思う）]
</code></pre>

<p>することで鍵を登録した。<br/>
これでいろいろ捗るようになった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多段sshの方法]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/15/how-ssh/"/>
    <updated>2013-09-15T19:37:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/15/how-ssh</id>
    <content type="html"><![CDATA[<p>多段sshをするのは知ってれば結構簡単で</p>

<pre><code>[digitalbot@local]$ ssh -t FOO ssh BAR
</code></pre>

<p>と<code>-t</code>オプションを使うことでssh先で後続のコマンドを実行してくれるので<code>local --&gt; FOO --&gt; BAR</code>と多段sshしてくれる。</p>

<!-- more -->


<h2>途中でsudoをはさむ</h2>

<p>途中でsudoを挟んで三段sshするときなんかは少しやっかい。</p>

<pre><code>local --&gt; FOO --&gt; BAR --&gt; BAZ
</code></pre>

<p>でFOOからBARにsshする際に<code>sudo ssh BAR</code>しなきゃいけないとき。
つまりワンライナーじゃなく順番にログインしていくと下記みたいになるやつ。</p>

<pre><code>[digitalbot@local]$ ssh FOO
[digitalbot@FOO]$ sudo ssh BAR
[root@BAR]$ ssh BAZ
</code></pre>

<p>これは</p>

<pre><code>[digitalbot@local]$ ssh -t FOO /usr/bin/sudo ssh -t BAR ssh BAZ
</code></pre>

<p>で一足飛びに途中でsudoを挟んで多段sshできる。sudoじゃなくても、途中で文字コード変換を挟んだりする場合も同じ要領でできるはず。</p>

<p>これはどの環境でもそうなのかよくわからないけど、<code>sudo</code>をフルパスで書かないと<code>ssh -t</code>で仮想ログインしたシェルでパスが通ってなくてエラーがでてしまったので注意が必要。</p>

<h2>.ssh/configでの設定</h2>

<p>当然.ssh/config内で設定しといたほうが楽なので設定したいところなんだけど、途中でsudoを挟む場合の書き方がイマイチよくわかってない。<br/>
途中でsudoがなければ</p>

<pre><code>Host FOO
    Hostname foo.com
    User digitalbot

Host BAR
    Hostname bar.com
    User digitalbot
    ProxyCommand ssh FOO -W %h:%p
</code></pre>

<p>みたいにそれぞれに単純に書くだけで良いのだけど&hellip;<br/>
だれかわかるようだったらsudoを挟む書き方を教えて。<br/>
Emacsのtrampだったら途中でsudoを挟む多段sshもできるから、できないことないと思うんだけど<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<h2>ちなみに</h2>

<p>ProxyCommand内の-Wを使った書き方はOpenSSHのver.5.4以前では使えないのでその場合は<code>nc</code>を使えば良い。</p>

<h4>参考</h4>

<p><a href="http://blog.glidenote.com/blog/2012/02/19/ssh-proxycommand/">多段sshで4段先のサーバに一発ログイン</a></p>

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://blog.digital-bot.com/blog/2013/09/05/emacs-tramp/">Emacs trampを使った多段リモートファイル操作</a>
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[percolが便利だけど、入れるにはpython2系のほうが良さそう]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/11/about-percol/"/>
    <updated>2013-09-11T01:03:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/11/about-percol</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/mooz/percol">percol</a>というコマンドラインを大変便利にしてくれるソフトウェアがあるのだけれど、これをインストールするときに少しハマった。percolはpython製のツールで、インストール方法は素直に<code>git clone</code>してきて<code>setup.py</code>を手で叩くか、<code>pip install percol</code>するなどあるんだけど、なんだか毎回どうしようか迷う。というのも、あんまりpython製のアプリとして意識したくないから<code>/usr/local/bin</code>とかに入って欲しいんだけど、管理の簡単さなどから<code>pip</code>も捨てがたいよなぁってなるから。</p>

<p>んで、先日もMBAを新調したのでpercolを入れてたんだけど、どうにもインストールが出来ない。pythonに明るくないのでなんて言えばいいかわからないし先日のことなので詳しくは忘れたけど、ヘッダというかモジュールのパスが解決出来てないっぽくてmakeが出来ない状況になってた。</p>

<p>どうしようかなぁと思ってたんだけど、これ、結論からいうと<strong>pythonのバージョンが間違ってた</strong>。</p>

<p>python使いの人にとっては常識なのかもしれないけど、python3系の環境ではダメで、python2系の環境にする必要があっただけみたい。自分は<strong>python3.3.2</strong>を<code>anyenv</code>で管理して入れてたので</p>

<pre><code>$ pyenv install 2.7.5
$ pyenv rehash
$ pyenv global 2.7.5
$ pyenv versions
#=&gt;   system
#=&gt; * 2.7.5 (set by /Users/kosuke/.anyenv/envs/pyenv/version)
#=&gt;   3.3.2
</code></pre>

<p>してもともと<strong>2.7.5</strong>を入れなおしてglobalに設定すれば良かった。そんで結局pipを使うことにしたので</p>

<pre><code>$ pip install percol
</code></pre>

<p>した。これでターミナル上でanythingライクな操作が可能になり、平和にまた一歩近づいた。めでたし。ついでに設定ファイルも載せておこう。</p>

<p><div><script src='https://gist.github.com/6511590.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<h4>参考</h4>

<ul>
<li><p><a href="http://d.hatena.ne.jp/kbkbkbkb1/20120429/1335835500">anything 的な絞りこみコマンド percol の紹介</a></p></li>
<li><p><a href="http://tomykaira.hatenablog.com/entry/2013/05/12/115152">git + percol(anything on terminal) が便利</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs trampを使った多段リモートファイル操作]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/05/emacs-tramp/"/>
    <updated>2013-09-05T00:03:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/05/emacs-tramp</id>
    <content type="html"><![CDATA[<p>Emacsでは<code>tramp</code>という、リモートのファイルやディレクトリをあたかもローカルにあるように扱うことができる拡張が標準で備えられてる。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/hideden/20090108/1231395529">emacs + trampで多段SSHで接続したサーバー上のファイルを直接編集する時のメモ</a></li>
</ul>


<p>これは少し過去の情報だが、基本的にはこの通りだし、多段ssh、なかでもsudoを途中で挟む多段sshについて言及されているのでとても良い記事だと思う。そこで、自分への忘備録も兼ねて、使い方や補足をしたいと思う。ちなみに、環境としてはCocoaEmacs v24.3を想定しているが、Emacs v23以降だったら大体変わらないと思う。</p>

<!-- more -->


<h2>HOW TO USE</h2>

<p>最初から入ってるので<code>.emacs</code>に</p>

<pre><code>(require 'tramp)
(setq tramp-default-method "ssh")
</code></pre>

<p>するだけ。あとはホントに<code>C-xC-f</code> <code>/user@hoge.com:~/fuga.txt</code>とかすると使える。<code>anything</code>や<code>helm</code>とも連携することができるし、<code>recentf</code>の設定にもよるけどパスを打つこと無く履歴から開くこともできる。ただ、<code>helm</code>越しだと現状いくつか問題があるので注意が必要(<code>helm-for-files</code>でエラーが起きたり、tramp上現在ディレクトリをソースに含めると重くなる)。</p>

<p>注意点は普通<code>find-file</code>(<code>C-xC-f</code>)したときって、プロンプトが<code>~/</code>ってなってると思うんだけど、これを<code>/</code>にした上でサーバ名を書き始めること。最初の何もわかってなかった頃これを間違えて悩んでたときあった。</p>

<p>で、しかもtrampはしっかりと<code>~/.ssh/config</code>まで読んでくれてるようなので、実は特別な設定をしないでも<code>~/.ssh/config</code>の方で設定が済んでいればホスト名などを省略して書くことができる。素晴らしい。</p>

<h2>多段ssh</h2>

<p>多段sshも<code>~/.ssh/config</code>の設定がしてあれば難なくできるはずだけど、個人的に一つ重宝している機能があって、sshの途中で<code>sudo</code>を挟めることがとても良い。以下にサンプルをのせてみる。</p>

<p><div><script src='https://gist.github.com/6438514.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p><code>tramp-default-proxies-alist</code>に<code>("host" "user" "method")</code>を設定してtrampを実行した場合、<strong>method</strong>で記述した方法で一旦接続した後に<strong>user@host</strong>に接続を行う<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。これを利用して一段目のサーバで<code>sudo</code>して<em>root</em>として二段目のサーバにログインできているのがポイント高い。</p>

<p>んでこの二段目のサーバに入るときにプロンプトからパスワードを要求されるので一段目でsudoするときのパスを入力すれば一気に三段目でも四段目でもファイルやディレクトリを開くことができる。</p>

<h2>おわりに</h2>

<p>このEmacsのtrampがあるからCocoaEmacsを使ってると行っても過言ではない。<code>perl-completion.el</code>や<code>key-combo.el</code>などの一部のelispと相性が悪いのが難点だけど、大変便利に使ってる。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://dukeiizu.blogspot.jp/2011/05/emacs-tramp-sudo.html">emacs TRAMP で、リモート・サーバを sudo で接続する</a>
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
