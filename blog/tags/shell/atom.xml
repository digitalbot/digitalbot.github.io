<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: shell | About Digital]]></title>
  <link href="http://blog.digital-bot.com/blog/tags/shell/atom.xml" rel="self"/>
  <link href="http://blog.digital-bot.com/"/>
  <updated>2014-02-06T23:03:14+09:00</updated>
  <id>http://blog.digital-bot.com/</id>
  <author>
    <name><![CDATA[digital_bot]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vimを使いやすくする]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/10/12/improve-vim/"/>
    <updated>2013-10-12T01:50:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/10/12/improve-vim</id>
    <content type="html"><![CDATA[<p>Emacs派でEmacsは結構拡張してるけど、vimだってコマンドラインから結構手軽につかってる。なぜならEmacsは起動に時間がかかるし、CocoaEmacsに最適化した設定だからあまりターミナルから起動したくないから。もちろんそこらへんもいろいろ工夫はしてるけど、ほんとにさっくりファイルを弄りたいときなんかは結構vimで弄ったりする。</p>

<p>これまではtabの設定とか最低限の設定をした.vimrcを使ってたんだけど、せっかくだからvimももう少し便利にすることにした。まぁ何かに行き詰まったときにこういう設定をすると仕事してる気になって落ち着くっていう悪い癖なだけな気もする。</p>

<!-- more -->


<h2>.vimrc</h2>

<p><a href="http://blog.digital-bot.com/blog/2013/09/30/macvim-kaoriya/">前回</a>、最新のVim7.4のMacVim-Kaoriyaを入れたお陰<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>でどうやらいくつかのプラグインが強化されてるらしい。まぁ詳しい説明は<a href="http://qiita.com/">Qiita</a>なんかにまかせる。</p>

<p>まぁだらだら書くのもあれなので手っ取り早く<strong>.vim</strong>を晒そう</p>

<h3>リポジトリ</h3>

<ul>
<li><a href="https://github.com/digitalbot/dot-vim">dot-vim</a></li>
</ul>


<p>今回我ながらポイントだと思うのが、READMEのとおりにセットアップすれば大体どの環境(unix系)でも動く汎用的な設定ができたところ。Emacsの設定はとてもじゃないけど、現状自分のMac以外に持ち出せないのでここは少しこだわってみた。</p>

<p>そしてそのセットアップもできる限り簡単に仕上げたつもり。基本的には<code>git clone --recursive</code>して<code>./setup.sh</code>するだけ。簡単。</p>

<pre><code>$ git clone --recursive git://github.com/digitalbot/dot-vim.git
$ cd dot-vim
$ ./setup.sh
$ vim +NeoBundleInstall +q
</code></pre>

<p>READMEからの引用だけど、これで元のvimの挙動をそんなにいじらないけど細かいところで便利なvimができあがる。git cloneの<code>--recursive</code>については<a href="http://blog.digital-bot.com/blog/2013/08/31/git-clone-recursive/">以前書いたとおり</a>。</p>

<p>ともかく、詳しい設定の内容は割愛するけど、<code>NeoBundle</code>、<code>Unite</code>、<code>Lightline</code>、<code>Quickrun</code>とか<code>Neocomplete</code>を導入した。これ以上増やすとEmacsみたいになるので、ここらへんが必要最低限だと思う。ちなみに、<code>if_lua</code>が効かない、つまり古めのvimでもそんときは<code>Neocomplete</code>じゃなく<code>Neocomplcache</code>を使うように条件分岐してるから、ほんとに大体の環境でこの<strong>.vim</strong>は動くはず。</p>

<h2>おわりに</h2>

<p>エディタの拡張は「どこまでやるか」のバランスがとてもむずかしいように思う。<strong>Emacs</strong>ではやりすぎて重たくなってしまってるし(それでもこの記事も<strong>Emacs</strong>で書いてるけど)、できるだけ必要最低限でポータビリティがあるのがカッコイイと最近は思い始めた。あと、全然環境の違う赤の他人が<code>git clone</code>して試せるかどうかを考えてるってもの個人的には渋くてかっこいいと思う。</p>

<p>なお、Lightlineはコマンドラインから<code>mvim</code>してGUIで動かすと変なwarnを出すのでGUIではオフにしている。そこら辺のことはまた別のエントリにしようかと思ってる。</p>

<p>あとvimは引数に<code>+command</code>するとそのコマンドを起動時に実行してくれるらしく、これのお陰で<code>vim +NeoBundleInstall +q</code>といった風にワンライナーでプラグインをインストールできるのが良いと思った。</p>

<p>でもvim scriptはちょっとよくわかんないとも思った。<del>elispのほうが美しい</del></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><code>if_lua</code>が大事らしい
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[percolが便利だけど、入れるにはpython2系のほうが良さそう]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/11/about-percol/"/>
    <updated>2013-09-11T01:03:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/11/about-percol</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/mooz/percol">percol</a>というコマンドラインを大変便利にしてくれるソフトウェアがあるのだけれど、これをインストールするときに少しハマった。percolはpython製のツールで、インストール方法は素直に<code>git clone</code>してきて<code>setup.py</code>を手で叩くか、<code>pip install percol</code>するなどあるんだけど、なんだか毎回どうしようか迷う。というのも、あんまりpython製のアプリとして意識したくないから<code>/usr/local/bin</code>とかに入って欲しいんだけど、管理の簡単さなどから<code>pip</code>も捨てがたいよなぁってなるから。</p>

<p>んで、先日もMBAを新調したのでpercolを入れてたんだけど、どうにもインストールが出来ない。pythonに明るくないのでなんて言えばいいかわからないし先日のことなので詳しくは忘れたけど、ヘッダというかモジュールのパスが解決出来てないっぽくてmakeが出来ない状況になってた。</p>

<p>どうしようかなぁと思ってたんだけど、これ、結論からいうと<strong>pythonのバージョンが間違ってた</strong>。</p>

<p>python使いの人にとっては常識なのかもしれないけど、python3系の環境ではダメで、python2系の環境にする必要があっただけみたい。自分は<strong>python3.3.2</strong>を<code>anyenv</code>で管理して入れてたので</p>

<pre><code>$ pyenv install 2.7.5
$ pyenv rehash
$ pyenv global 2.7.5
$ pyenv versions
#=&gt;   system
#=&gt; * 2.7.5 (set by /Users/kosuke/.anyenv/envs/pyenv/version)
#=&gt;   3.3.2
</code></pre>

<p>してもともと<strong>2.7.5</strong>を入れなおしてglobalに設定すれば良かった。そんで結局pipを使うことにしたので</p>

<pre><code>$ pip install percol
</code></pre>

<p>した。これでターミナル上でanythingライクな操作が可能になり、平和にまた一歩近づいた。めでたし。ついでに設定ファイルも載せておこう。</p>

<p><div><script src='https://gist.github.com/6511590.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<h4>参考</h4>

<ul>
<li><p><a href="http://d.hatena.ne.jp/kbkbkbkb1/20120429/1335835500">anything 的な絞りこみコマンド percol の紹介</a></p></li>
<li><p><a href="http://tomykaira.hatenablog.com/entry/2013/05/12/115152">git + percol(anything on terminal) が便利</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitPrep導入してみた]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/08/31/gitprep-intro/"/>
    <updated>2013-08-31T18:01:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/08/31/gitprep-intro</id>
    <content type="html"><![CDATA[<p>最近、研究室用にgitリポジトリとgitブラウザが欲しいと思って<a href="http://gitprep.org/">GitPrep</a>を導入した。</p>

<p>正直総合力で見てはGithubには劣るけど、逆にあそこまで大掛かりじゃなくシンプルなものが欲しい人にとっては向いてると思う。
けどまぁ最近出来たてのプロダクトってこともあっていくつかはまったことがあるのでここに書いておく。</p>

<p>ちなみに、GitPrepはPerl製GitHubクローンで、この記事は<strong>Perl</strong>や<strong>local::lib</strong><sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>、<strong>Carton</strong><sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>、<strong>Plenv</strong><sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>などが大体わかってる前提で書いてる。でもわからなくても雰囲気でなんとかなる。</p>

<p>あ、ちなみに作業環境としては<strong>CentOS6.3</strong>になる。perlはplenvで個別に入れた<strong>perl5.18</strong>。</p>

<!-- more -->


<h2>install</h2>

<p>基本的には<a href="https://github.com/yuki-kimoto/gitprep/blob/master/README.md">README</a>通りにやれば良いんだけど、<code>git clone</code>してきて、<code>plackup</code>すれば良いと思ったらそうでも無いらしくて困った。
なんていうか、初心者も手軽に使えるようにしてる分、煩雑になってる部分もあると思う。</p>

<p>んじゃまぁとりあえず、と思って<code>carton install</code>すると、確かに<code>local/lib/perl5</code>にモジュールが入るんだけど、それが<code>@INC</code>に入ってないし、<code>carton exec</code>しても実行スクリプトがなんかラップされてるからうまく効かない。</p>

<p>仕方ないから素直に<code>./setup.sh</code>を叩くわけだけど、最初はうまくいったけど、後述するアップデート後になんかうまく動かなくなった。</p>

<p>から、結局</p>

<pre><code>$ rm -rf GITPREPDIR/extlib/lib/perl5
$ mv GITPREPDIR/local/lib/perl5 GITPREPDIR/extlib/lib/
</code></pre>

<p>して、cartonで入れたモジュールを強引に使うようにした。</p>

<p>ひとまずこれで</p>

<pre><code>$ gitprep
</code></pre>

<p>すれば動くようになった。</p>

<h2>daemontools</h2>

<p><code>supervisor</code>も使ってみたかったけど、ここは<code>daemontools</code>にした。</p>

<p>daemontools自体のインストールは<a href="http://upsnap.jp/archives/show/96">ココ</a>とかが参考になる。
で、ともかくデーモン化して運用したいわけだけど、daemontools久しぶりに設定したせいですごいハマってた。
具体的には、daemontoolsでデーモン化するにはフォアグラウンドのプロセスじゃなきゃだめなこと忘れてた。</p>

<p>幸いにも、実行スクリプトである<code>gitprep</code>(これは実際には<code>hypnotoad</code>のラップ)にもフォアグラウンドオプションがありそれをつけることで解決。</p>

<p>ついでに書いたrunスクリプトを貼っておく。</p>

<p><div><script src='https://gist.github.com/670631b4bd8e6751ffdc.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<h2>update</h2>

<p><code>revision:a80b1a7209</code>あたりからREADMEがマークダウンに対応したのでgitprepをアップデートした。ドキュメントを見る限り、そのまま置き換えたりアップデートしても大丈夫そうなのでそうした。</p>

<pre><code>$ git pull
</code></pre>

<p>するとやはり特に不自由なくgitprepが最新になった。</p>

<p>しかし、これでさらに捗るぞと思って改めてブラウザからリポジトリにアクセスしたらエラーが出てしまった。こういうときはログを見るに限る。</p>

<pre><code>$ less GITPREPDIR/log/production.log
</code></pre>

<p>もちろん<code>tail -f</code>でもいいけど、ともかくログをみると<code>Text::Markdown</code>モジュールが無くて死んでるっぽいので再度<code>./setup.sh</code>を動かすことに。
しかしなんだか謎のエラーを吐いてモジュールがインストールできない。もちろんインストール先は必ずしも<code>extlib</code>以下じゃなくてもいいんだけど、ここまで来たらうまいことまとめたい。
そこで#installの項にも書いたけど<code>carton install</code>してそれを<code>mv</code>することで解決した。</p>

<h2>Basic Auth</h2>

<p>GitPrepを導入した理由に、プライベートで決められた人だけに公開できるgitリポジトリが欲しいっていうのがあったので認証をかけたかったんだけど、このGitPrep、サインインなどのシステムはあるもののリポジトリそのものを見えなくしたり、cloneを防いだりする機構は現在無いみたい。</p>

<p>そこで<code>nginx</code><sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>側でベーシック認証をかけることにした。</p>

<p><div><script src='https://gist.github.com/d4fd11c829066925bfb9.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>基本的には</p>

<pre><code>auth_basic "hoge";
auth_basic_user_file "/path/to/file";
</code></pre>

<p>を書くだけでnginxではベーシック認証がかかるみたい。だもんで</p>

<pre><code>$ mkdir -p /usr/local/nginx/htpasswd
$ htpasswd -nb user pass &gt; /usr/local/nginx/htpasswd/gitprep
</code></pre>

<p>とでもして、上gistの中のでのファイルパスに指定するだけ。</p>

<p>nginxのconfの書き方自体は適当にググって欲しい。とりあえず自分はprefixを<code>/usr/local/nginx</code>にしてたり、<code>general.conf</code>に共通設定をまとめたりしてる。
あと当然gitprepはリバースプロキシで動いてるからその設定が最下部のブロックになる。</p>

<h2>以上</h2>

<p>つらつらとGitPrep導入にあたって何をしたか書いてみたけど思ったより長くなってしまった。
あまり調べずに結構適当に書いてしまったので、もしかしたらもっとうまい方法やそもそもやり方がおかしい部分もあるかもしれない。</p>

<p>実際他にもよくわかってないところや不具合なんかもあるんだけど、それはまた別にまとめるとする。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p>perlでモジュールを任意の場所にインストール・使用するモジュール。<a href="http://gihyo.jp/dev/serial/01/modern-perl/0018">参考URL</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p>perlでwebアプリごとにモジュールをインストール・管理するモジュール。<a href="http://blog.64p.org/entry/2013/08/06/112350">参考URL</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p>perl自体を簡単にインストール・管理するツール。<a href="http://blog.papix.net/entry/2013/01/21/210327">参考URL</a>
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p>webサーバ。なんかモダンだってことで最近はApacheより使うかも。<a href="http://nginx.org/ja/">参考URL</a>
<a href='#fnref:4' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git clone --recursive]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/08/31/git-clone-recursive/"/>
    <updated>2013-08-31T13:06:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/08/31/git-clone-recursive</id>
    <content type="html"><![CDATA[<p>この前サブモジュールを含んだリポジトリを<code>git clone</code>してきてなんかうまく動かなくて困った。<br/>
んで調べたらサブモジュールはデフォルトでは一緒にクローンしてきてくれないらしい。<br/>
そういうときは</p>

<pre><code>$ git clone git://hoge/fuga.git
$ git submodule init
$ git submodule update
</code></pre>

<p>すれば良いらしいことがわかった。</p>

<p>まぁこれで済むならそれでいいやと思ってしばらく運用してたんだけど、どうやら<code>git clone</code>には<code>--recursive</code>なんていうオプションがあるらしいことを知った。つまり</p>

<pre><code>$ git clone --recursive git://hoge/fuga.git
</code></pre>

<p>だけでさっきと同じことが一行ですませられるらしい。これは便利だ。</p>

<h2>ちなみに</h2>

<p>gitのサブモジュールは<code>git submodule add</code>した時点でのcommit情報しかもってないから、サブモジュール自体を最新にしたい場合また別の操作が必要みたい</p>

<h4>参考</h4>

<ul>
<li><p><a href="http://rochefort.hatenablog.com/entry/20110410/p1">git submoduleの更新</a></p></li>
<li><p><a href="http://hitode909.hatenablog.com/entry/20110526/1306364973">git clone &mdash;recursive便利</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.inputrcの便利設定]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/08/30/more-useful-inputrc/"/>
    <updated>2013-08-30T13:21:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/08/30/more-useful-inputrc</id>
    <content type="html"><![CDATA[<p>readlineの設定ファイルである<code>$HOME/.inputrc</code>をうまく設定するとコマンドラインでの生活が豊かになる。<br/>
けど何故かあまり情報が多くなく、バインドの設定を変更するとき少し困った。<br/>
少しの設定だけど少し便利になったので公開してみる。</p>

<p><div><script src='https://gist.github.com/6386407.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>ポイントは<code>$if Bash</code>など、分岐が可能なところ。他にも<code>$if Mysql</code>とかできるみたい。</p>

<h2>おすすめ</h2>

<p>zshだとキーバインドも簡単に設定できるみたいだけど、bashだとそうもいかない。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&amp;ldquo;<span class="se">\C</span>-^&amp;rdquo;: &amp;ldquo;~/&amp;rdquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>なんかは便利だと思う。</p>

<p>それにしたって、BashやZshのモダンな設定とかはあるのに、2013現在のモダンなinputrcの設定や拡張が現れないのはなんでだろう。みんなZshいじってるからそれで満足なのかな。</p>

<h4>参考</h4>

<p><a href="http://x68000.q-e-d.net/~68user/unix/pickup?~%2F.inputrc">http://x68000.q-e-d.net/~68user/unix/pickup?~%2F.inputrc</a></p>
]]></content>
  </entry>
  
</feed>
