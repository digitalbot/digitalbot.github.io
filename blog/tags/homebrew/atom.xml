<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: homebrew | About Digital]]></title>
  <link href="http://blog.digital-bot.com/blog/tags/homebrew/atom.xml" rel="self"/>
  <link href="http://blog.digital-bot.com/"/>
  <updated>2013-10-23T23:19:49+09:00</updated>
  <id>http://blog.digital-bot.com/</id>
  <author>
    <name><![CDATA[digital_bot]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OS X MavericksにSnow Leopardからアップデートした]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/10/23/install-mavericks/"/>
    <updated>2013-10-23T22:44:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/10/23/install-mavericks</id>
    <content type="html"><![CDATA[<p>手元のMacBookAir Mid 2013はまだMountainLionだけど、職場で使ってるSnowLeopard機をMavericksにアップデートしてみた。</p>

<blockquote><p><a href="http://news.livedoor.com/article/detail/8183029/">アップル、「OS X Mavericks」を無料公開！</a></p>

<blockquote><p>アップルは22日（現地時間）、OS Xの最新バージョン「Mavericks」の公開を開始した。互換性があるMacユーザーであれば無料でアップロード可能となっている。</p></blockquote></blockquote>

<p>これまでのOS X(例えばLion)は安いとはいえ無料じゃなかったので、アップデートをするには会社のシステム管理者的な人に申請をして話を通す必要があったのでこれまでアップデートを面倒臭がってしていなかった。が、しかしいい加減MacBookAirと環境が大きく違うのが地味にストレスになっていたのでこの<strong>無料アップデート</strong>に飛びついてみた。</p>

<h2>環境</h2>

<ul>
<li><p>Mac OS X Snow Leopard</p></li>
<li><p>1GB HDD</p></li>
<li><p>4GB RAM</p></li>
</ul>


<p>ちょっと今自宅だし詳細なデータはないけど、一応環境はこんなもんだと思う。</p>

<h2>前準備</h2>

<p>会社のだし、とくにタイムマシーンとかでバックアップとかもとってないので、いきなりアップデートするのは怖い。そこで大事なファイルのバックアップをとったり、<strong>homebrew</strong>で入れたもののリストを作ったりした。</p>

<pre><code>$ mkdir -p ~/.brew
$ T=`date +%Y%m%d`
$ brew list &gt; ~/.brew/list$T.txt
$ brew list | xargs brew info &gt; ~/.brew/info$T.txt
</code></pre>

<p>入れたものリスト(<code>brew list</code>)だけではコンパイルオプションとか残らないから、念のためそれぞれの情報(<code>brew info</code>)も残しておいた。</p>

<h2>インストール</h2>

<p>インストール自体はApp Storeからすんなり行く。最初に<strong>残り44分</strong>て出るけど、まぁ実際は一時間くらいかかったかな。特に躓くことはないはず。SnowLeopardでも。今回、SnowLeopard &ndash;> Lion &ndash;> MountainLion &ndash;> Mavericksとか段階を踏まずに一発でMavericksを入れられるのが地味にうれしいところ。</p>

<h2>セットアップ</h2>

<p>インストールが終わると後は普通にログインして使いはじめるだけなんだけど、<strong>TotalFinder</strong>が対応してないので<strong>互換性のないフォルダ</strong>みたいなところに移動されたとかでた。これは少し残念だけど、今回のMavericksからデフォルトでFinderにタブが付いたのでとりあえずは問題ないかな。</p>

<p>あとは<strong>Xcode</strong>を改めて入れたり、<strong>Java</strong>を入れたりで、割と時間がかかってしまった。SnowLeopardからのアップデートだったので色々とシステム環境設定から細かい挙動をいじるのも少し大変だった(スクロールはナチュラルじゃダメ派)。</p>

<p>実際のところ、ターミナルと<strong>Emacs</strong>さえ動けば良いのでそこら辺の挙動しかまだ確かめてないけど、特に問題なく使えてると思う。ただ、<code>brew upgrade</code>したら、一部のhomebrewで入れたツールが<strong>libc++で入れなおしてくれ</strong>見たいなこと言うので、次の出社時にはそれの対応をしなきゃいけないっぽい(まだ入れなおしてない)。</p>

<p>libc++といえば、</p>

<ul>
<li>(Mac OS X環境でclangを使ってC++11をboostとともに使う環境を構築するの巻)[<a href="http://beatsync.net/main/log20131021.html">http://beatsync.net/main/log20131021.html</a>]</li>
</ul>


<p>ちょうど今日この記事を見たので貼っておく。なんか関係有るのかな。</p>

<h2>おわりに</h2>

<p>手元のMacBookAir(MountainLion)はもうちょっと人柱が出て、色々アプリやらなんやらが対応してからアップデートしようと思ってる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacVim Kaoriyaをhomebrewから入れた]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/30/macvim-kaoriya/"/>
    <updated>2013-09-30T19:56:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/30/macvim-kaoriya</id>
    <content type="html"><![CDATA[<p>Emacsを愛用していて、システムデフォルトのではなくhomebrewで自前のEmacsを入れてるわけなんだけど、不公平な気もしたのでVimも自前のを入れることにした。</p>

<h2>MacVim KaoriYa</h2>

<p>やはりvimもGUI版があれば使いたいと思ったので<a href="http://code.google.com/p/macvim-kaoriya/">MacVim KaoriYa</a>を導入することにした。MacVim Kaoriyaのメリットは上記リンクに詳しく書いてあるし、なんだったらいろいろな設定方法も書いてある。</p>

<p>環境としては</p>

<ul>
<li>MacOSX Mountain Lion, Intel Core i7, 8 GB RAM</li>
</ul>


<p>と、後述するSnowLeopardで導入した。</p>

<!-- more -->


<p>ここで、後に入れるプラグインのためにも、<strong>v7.4</strong>, <strong>if_lua</strong> に対応していることが求められる。デフォルトではhomebrewのレシピが無いんだけど、世の中奇特な人はいるもんで、レシピを用意してくれてる人がいる<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<pre><code>$ brew tap supermomonga/homebrew-splhack
$ brew install --HEAD cmigemo-mk
$ brew install --HEAD ctags-objc-ja
$ brew install --HEAD gettext-mk
$ brew install --HEAD macvim-kaoriya
$ brew linkapps
</code></pre>

<p>これだけでなんとかなるはず。<br/>
emacsでも使うから<code>ctags</code>や<code>cmigemo</code>は標準フォーミュラの方でいれちゃったから</p>

<pre><code>$ brew unlink cmigemo &amp;&amp; brew link -f cmigemo-mk
</code></pre>

<p>とかする必要があった。</p>

<h2>SnowLeopardでの問題</h2>

<p>ちなみに、もう一台のデスクトップはSnowLeopardなんだけど、SnowLeopard環境ではgccでのコンパイルにしくじるので<code>brew install --HEAD macvim-kaoriya</code>の前にフォーミュラを少し編集する必要がある。それについては <a href="http://kronus9.sblo.jp/article/71512104.html">MacVim KaoriYaをSnow Leopard + Homebrewでビルドした</a> にて詳しい方法が載っている。<br/>
自分もエラーログ追っててclangを使うのはすぐわかったんだけど、<code>--use-clang</code>してもダメだから参ってた。</p>

<h2>.vimrc</h2>

<p>vimrcもいろいろ弄ったんだけど、まぁそこら辺は違うエントリにまとめるとする。</p>

<h2>ちなみに</h2>

<p>アイコンからGUIのMacVim KaoriYaを起動する分には問題ないけど、そのままじゃターミナルでパスが通ってないのでなんとかする必要がある。そこら辺についても他のエントリにまとめると思う。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://supermomonga.com/2013/06/15/macvim_kaoriya_homebrew/">homebrewを使ってちょっと新しめのMacVim KaoriYaを使おう</a>
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[homebrew-caskが良さそうなので導入してみた]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/08/homebrew-cask/"/>
    <updated>2013-09-08T03:11:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/08/homebrew-cask</id>
    <content type="html"><![CDATA[<p>どうやらMacのGUIアプリケーションまでも<code>homebrew</code>で管理をしようとしている人がいるらしい。確かに考えなくもなかったけど、本当に作った人がいるとは思わなかったし、うまいことhomebrewを拡張した感じで作ってると感じた。マックのアプリのパッケージ管理がこれで楽になればよいなぁと思う。バージョンの管理も。</p>

<!-- more -->


<h2>Git repo</h2>

<ul>
<li><a href="https://github.com/phinze/homebrew-cask">https://github.com/phinze/homebrew-cask</a></li>
</ul>


<h2>導入方法</h2>

<pre><code>$ brew tap phinze/homebrew-cask
$ brew install brew-cask
</code></pre>

<p>READMEを読む感じ、これだけ。そしておもむろに</p>

<pre><code>$ brew cask install google-chrome
</code></pre>

<p>とかすると<code>~/Applications/"Google Chrome.app"</code>が生まれるという寸法らしい。すごいお手軽。一々ダウンロードリンクを探すこともなければ、ドラッグアンドドロップも必要ない。しかも、<code>brew cask install</code>に複数のアプリ名を渡せば一括でインストールが可能。これは便利だと思う。良い。ここでちょっと関心したのが<code>brew cask list</code>でちゃんとhomebrew-caskで入れたアプリが一覧できること。これをなんかに書き出しとけば他の環境でもパイプで渡して再現が簡単。</p>

<h2>雑感</h2>

<p>homebrew本体とは微妙に違ってるところがあって、homebrewでは<code>/usr/local/Cellar</code>以下に実体をインストールしていくのに対し、homebrew-caskでインストールされたアプリケーションは、<code>Caskroom</code>というところに入る。これはデフォルトだと<code>/opt/homebrew-cask/Caskroom</code>で、最初のアプリをインストール時に<em>「ここにCaskroom作りたいんだけどパーミッションの関係で作れないからsudoパスワードを入力してくれ」</em>的なことを言われた。そして、このCaskroomから<code>~/Applications</code>にシンボリックリンクが貼られるみたい。もちろんこれもデフォルトの話で、</p>

<pre><code>$ export HOMEBREW_CASK_OPTS="--appdir=/Applications"
</code></pre>

<p>とか環境変数で変えられるみたい。<strong>update</strong>もどうやら<code>brew upgrade</code>で出来るみたいでココらへんは空気のような振る舞いをしてくれる。</p>

<h5>気になる点としては</h5>

<ul>
<li><p><code>~/Applications</code>に入るのはシンボリックリンクなので、ランチャー(少なくとも<code>QuickSilver</code>)で認識できない</p></li>
<li><p><code>brew cask uninstall</code>時には<code>*.plst</code>なども一緒に掃除してくれるのか(多分してくれない)</p>

<ul>
<li>そして確かにアンインストールはされるけど、<code>/opt/homebrew-cask/Caskroom</code>以下に空のそのアプリのディレクトリが残る</li>
</ul>
</li>
</ul>


<p>くらいかなぁ。今もともと入れてるアプリを置き換えるかどうかは少し迷うかな。ちょっといろいろ試してみようかと思う。いずれにせよ、これをうまく使いこなせばマックブックを買い換えた時なんかに絶大な威力を発揮する気がする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountain Lionにjuliusをhomebrewで入れる]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/04/install-julius/"/>
    <updated>2013-09-04T00:24:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/04/install-julius</id>
    <content type="html"><![CDATA[<p>音声認識ソフトである<a href="http://julius.sourceforge.jp/index.php">julius</a>をMBAにインストールした。バージョンとしては2013年9月4日現在最新のjulius4.2.3になる。</p>

<!-- more -->


<p>環境によってたまにハマる場合もあるみたいだけど、基本的にはMacOS 10.8でMountain Lionの場合は</p>

<ul>
<li><p>PortAudio入れる</p></li>
<li><p>Julius入れる(<code>--with-mictype=portaudio</code>する)</p></li>
<li><p>DictationKit入れる</p></li>
</ul>


<p>だけで動くはず。もちろん詳しく使うには自分で辞書データ用意したり色々いじったりする必要あるけど。なんでPortAudioなのかというと、OS X標準のCoreAudioが使えないから(これはもしかしたら解決されてるかもしれない)。そこらへんの話は前のブログ<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>で書いた。まぁともかく入れば良いし、この分野では(恐らく)枯れてるPortAudio使えばそんなに困らないからそうしてる。</p>

<h2>INSTALL</h2>

<p>んで、さっそくインストールしていくわけなんだけど、なんだか手順説明するのもおっくうだし、自分でも毎回同じ手順踏むの面倒なので<strong>Homebrew</strong>の<a href="https://github.com/digitalbot/homebrew-acoust/blob/master/julius.rb">Formula</a>にした。</p>

<pre><code>$ brew tap digitalbot/homebrew-acoust
$ brew install julius
</code></pre>

<p>で<code>--univarsal</code>な<code>portaudio</code>も先に入れてくれるし、肝心の<code>julius</code>コマンドがインストールされない問題も解決してくれるパッチも書いて入れた。</p>

<h2>juliusコマンドがインストールされない件</h2>

<pre><code>- if (j_adin_init(recog) == FALSE) return;
+ if (j_adin_init(recog) == FALSE) return 0;
</code></pre>

<p>パッチを見てもらえればわかると思うけど、おそらくmountain lionのデフォルトコンパイラ(llvm-gccだっけ？)が<code>return;</code>で返す値をうまく解釈してくれてないんじゃないかと思う。詳しくはこれから追うけど、ともかくこのパッチを当てると<code>/usr/local/Cellar/julius/4.2.3/bin</code>以下に<code>julius</code>コマンドが入るし、homebrewがうまく<code>/usr/local/bin</code>にシンボリックリンク貼ってくれる。多分このパッチ当てなくても<code>gcc</code>を<code>homebrew-versions</code>で別途入れて使うように指定したらうまくいく気もする。</p>

<h2>終わりに</h2>

<p>今回はじめて<code>homebrew tap</code>を作ったし、<code>Formula</code>も書いた。簡単だったけど良い勉強になった。</p>

<p>juliusは色々と情報が回っててそれぞれがそれぞれのコンパイルオプションやらパッチ当ててる感じあるけど、最低限動く感じだったら今回紹介したもので必要十分だと思う。ちなみに今回迷ったんだけど、DictationKitはhomebrewでのインストールを見送ったので自分で<a href="http://sourceforge.jp/projects/julius/downloads/59050/dictation-kit-v4.2.3.tar.gz/">ダウンロード</a>してきて使って欲しい。使用法はDictationKitのディレクトリで(というかfast.jconfを引数で指定して)juliusを実行するだけ。</p>

<pre><code>$ cd dictation-kit-v4.2.3
$ julius -C fast.jconf -charconv EUC-JP UTF-8
</code></pre>

<p>何かあったら絶賛プルリクエスト受付中なのでどうぞ。homebrew-acoustでは今後も音響関係のformulaを作っていければなぁと思っている。</p>

<h2>追記</h2>

<ul>
<li>SnowLeopard

<ul>
<li>i686-apple-darwin10-gcc-4.2.1 (GCC) 4.2.1 (Apple Inc. build 5666) (dot 3)</li>
</ul>
</li>
</ul>


<p>でも今回作成したFormulaでビルド出来た。</p>

<p>しかし、juliusってこれ、一応動いてるし精度悪いながらも音声認識できてるけど、完璧にインストールできてるかわかりづらいな。testが欲しい。</p>

<ul>
<li><a href="http://mac-os-forge.2317878.n4.nabble.com/MacPorts-32069-julius-4-2-1-kit-Julius-Compile-Failes-on-Lion-td61466.html">http://mac-os-forge.2317878.n4.nabble.com/MacPorts-32069-julius-4-2-1-kit-Julius-Compile-Failes-on-Lion-td61466.html</a></li>
</ul>


<p>↑こういう記事もあったけど、結局llmv-gccの問題っぽい。パッチもそれ系。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://about-digital.ldblog.jp/archives/458338.html">音声認識エンジンjuliusをLionで試してみた</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://qiita.com/ikesato/items/ffe1eff8440a995065fe">音声認識 Julius 4.2.3 + Mac OSX Mountain Lion 10.8.4 でビルドする方法</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p><a href="http://qiita.com/o_ame/items/1236b91b15d077e03525">HomebrewでOSXに音声解析エンジンJuliusを入れる</a>
<a href='#fnref:3' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
