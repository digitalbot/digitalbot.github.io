<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: homebrew | About Digital]]></title>
  <link href="http://blog.digital-bot.com/blog/tags/homebrew/atom.xml" rel="self"/>
  <link href="http://blog.digital-bot.com/"/>
  <updated>2013-09-20T00:16:23+09:00</updated>
  <id>http://blog.digital-bot.com/</id>
  <author>
    <name><![CDATA[digital_bot]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[homebrew-caskが良さそうなので導入してみた]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/08/homebrew-cask/"/>
    <updated>2013-09-08T03:11:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/08/homebrew-cask</id>
    <content type="html"><![CDATA[<p>どうやらMacのGUIアプリケーションまでも<code>homebrew</code>で管理をしようとしている人がいるらしい。確かに考えなくもなかったけど、本当に作った人がいるとは思わなかったし、うまいことhomebrewを拡張した感じで作ってると感じた。マックのアプリのパッケージ管理がこれで楽になればよいなぁと思う。バージョンの管理も。</p>

<!-- more -->


<h2>Git repo</h2>

<ul>
<li><a href="https://github.com/phinze/homebrew-cask">https://github.com/phinze/homebrew-cask</a></li>
</ul>


<h2>導入方法</h2>

<pre><code>$ brew tap phinze/homebrew-cask
$ brew install brew-cask
</code></pre>

<p>READMEを読む感じ、これだけ。そしておもむろに</p>

<pre><code>$ brew cask install google-chrome
</code></pre>

<p>とかすると<code>~/Applications/"Google Chrome.app"</code>が生まれるという寸法らしい。すごいお手軽。一々ダウンロードリンクを探すこともなければ、ドラッグアンドドロップも必要ない。しかも、<code>brew cask install</code>に複数のアプリ名を渡せば一括でインストールが可能。これは便利だと思う。良い。ここでちょっと関心したのが<code>brew cask list</code>でちゃんとhomebrew-caskで入れたアプリが一覧できること。これをなんかに書き出しとけば他の環境でもパイプで渡して再現が簡単。</p>

<h2>雑感</h2>

<p>homebrew本体とは微妙に違ってるところがあって、homebrewでは<code>/usr/local/Cellar</code>以下に実体をインストールしていくのに対し、homebrew-caskでインストールされたアプリケーションは、<code>Caskroom</code>というところに入る。これはデフォルトだと<code>/opt/homebrew-cask/Caskroom</code>で、最初のアプリをインストール時に<em>「ここにCaskroom作りたいんだけどパーミッションの関係で作れないからsudoパスワードを入力してくれ」</em>的なことを言われた。そして、このCaskroomから<code>~/Applications</code>にシンボリックリンクが貼られるみたい。もちろんこれもデフォルトの話で、</p>

<pre><code>$ export HOMEBREW_CASK_OPTS="--appdir=/Applications"
</code></pre>

<p>とか環境変数で変えられるみたい。<strong>update</strong>もどうやら<code>brew upgrade</code>で出来るみたいでココらへんは空気のような振る舞いをしてくれる。</p>

<h5>気になる点としては</h5>

<ul>
<li><p><code>~/Applications</code>に入るのはシンボリックリンクなので、ランチャー(少なくとも<code>QuickSilver</code>)で認識できない</p></li>
<li><p><code>brew cask uninstall</code>時には<code>*.plst</code>なども一緒に掃除してくれるのか(多分してくれない)</p>

<ul>
<li>そして確かにアンインストールはされるけど、<code>/opt/homebrew-cask/Caskroom</code>以下に空のそのアプリのディレクトリが残る</li>
</ul>
</li>
</ul>


<p>くらいかなぁ。今もともと入れてるアプリを置き換えるかどうかは少し迷うかな。ちょっといろいろ試してみようかと思う。いずれにせよ、これをうまく使いこなせばマックブックを買い換えた時なんかに絶大な威力を発揮する気がする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountain Lionにjuliusをhomebrewで入れる]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/04/install-julius/"/>
    <updated>2013-09-04T00:24:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/04/install-julius</id>
    <content type="html"><![CDATA[<p>音声認識ソフトである<a href="http://julius.sourceforge.jp/index.php">julius</a>をMBAにインストールした。バージョンとしては2013年9月4日現在最新のjulius4.2.3になる。</p>

<!-- more -->


<p>環境によってたまにハマる場合もあるみたいだけど、基本的にはMacOS 10.8でMountain Lionの場合は</p>

<ul>
<li><p>PortAudio入れる</p></li>
<li><p>Julius入れる(<code>--with-mictype=portaudio</code>する)</p></li>
<li><p>DictationKit入れる</p></li>
</ul>


<p>だけで動くはず。もちろん詳しく使うには自分で辞書データ用意したり色々いじったりする必要あるけど。なんでPortAudioなのかというと、OS X標準のCoreAudioが使えないから(これはもしかしたら解決されてるかもしれない)。そこらへんの話は前のブログ<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>で書いた。まぁともかく入れば良いし、この分野では(恐らく)枯れてるPortAudio使えばそんなに困らないからそうしてる。</p>

<h2>INSTALL</h2>

<p>んで、さっそくインストールしていくわけなんだけど、なんだか手順説明するのもおっくうだし、自分でも毎回同じ手順踏むの面倒なので<strong>Homebrew</strong>の<a href="https://github.com/digitalbot/homebrew-acoust/blob/master/julius.rb">Formula</a>にした。</p>

<pre><code>$ brew tap digitalbot/homebrew-acoust
$ brew install julius
</code></pre>

<p>で<code>--univarsal</code>な<code>portaudio</code>も先に入れてくれるし、肝心の<code>julius</code>コマンドがインストールされない問題も解決してくれるパッチも書いて入れた。</p>

<h2>juliusコマンドがインストールされない件</h2>

<pre><code>- if (j_adin_init(recog) == FALSE) return;
+ if (j_adin_init(recog) == FALSE) return 0;
</code></pre>

<p>パッチを見てもらえればわかると思うけど、おそらくmountain lionのデフォルトコンパイラ(llvm-gccだっけ？)が<code>return;</code>で返す値をうまく解釈してくれてないんじゃないかと思う。詳しくはこれから追うけど、ともかくこのパッチを当てると<code>/usr/local/Cellar/julius/4.2.3/bin</code>以下に<code>julius</code>コマンドが入るし、homebrewがうまく<code>/usr/local/bin</code>にシンボリックリンク貼ってくれる。多分このパッチ当てなくても<code>gcc</code>を<code>homebrew-versions</code>で別途入れて使うように指定したらうまくいく気もする。</p>

<h2>終わりに</h2>

<p>今回はじめて<code>homebrew tap</code>を作ったし、<code>Formula</code>も書いた。簡単だったけど良い勉強になった。</p>

<p>juliusは色々と情報が回っててそれぞれがそれぞれのコンパイルオプションやらパッチ当ててる感じあるけど、最低限動く感じだったら今回紹介したもので必要十分だと思う。ちなみに今回迷ったんだけど、DictationKitはhomebrewでのインストールを見送ったので自分で<a href="http://sourceforge.jp/projects/julius/downloads/59050/dictation-kit-v4.2.3.tar.gz/">ダウンロード</a>してきて使って欲しい。使用法はDictationKitのディレクトリで(というかfast.jconfを引数で指定して)juliusを実行するだけ。</p>

<pre><code>$ cd dictation-kit-v4.2.3
$ julius -C fast.jconf -charconv EUC-JP UTF-8
</code></pre>

<p>何かあったら絶賛プルリクエスト受付中なのでどうぞ。homebrew-acoustでは今後も音響関係のformulaを作っていければなぁと思っている。</p>

<h2>追記</h2>

<ul>
<li>SnowLeopard

<ul>
<li>i686-apple-darwin10-gcc-4.2.1 (GCC) 4.2.1 (Apple Inc. build 5666) (dot 3)</li>
</ul>
</li>
</ul>


<p>でも今回作成したFormulaでビルド出来た。</p>

<p>しかし、juliusってこれ、一応動いてるし精度悪いながらも音声認識できてるけど、完璧にインストールできてるかわかりづらいな。testが欲しい。</p>

<ul>
<li><a href="http://mac-os-forge.2317878.n4.nabble.com/MacPorts-32069-julius-4-2-1-kit-Julius-Compile-Failes-on-Lion-td61466.html">http://mac-os-forge.2317878.n4.nabble.com/MacPorts-32069-julius-4-2-1-kit-Julius-Compile-Failes-on-Lion-td61466.html</a></li>
</ul>


<p>↑こういう記事もあったけど、結局llmv-gccの問題っぽい。パッチもそれ系。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://about-digital.ldblog.jp/archives/458338.html">音声認識エンジンjuliusをLionで試してみた</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://qiita.com/ikesato/items/ffe1eff8440a995065fe">音声認識 Julius 4.2.3 + Mac OSX Mountain Lion 10.8.4 でビルドする方法</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p><a href="http://qiita.com/o_ame/items/1236b91b15d077e03525">HomebrewでOSXに音声解析エンジンJuliusを入れる</a>
<a href='#fnref:3' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
