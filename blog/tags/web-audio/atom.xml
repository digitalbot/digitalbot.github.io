<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: web_audio | About Digital]]></title>
  <link href="http://blog.digital-bot.com/blog/tags/web-audio/atom.xml" rel="self"/>
  <link href="http://blog.digital-bot.com/"/>
  <updated>2014-02-07T02:16:44+09:00</updated>
  <id>http://blog.digital-bot.com/</id>
  <author>
    <name><![CDATA[digital_bot]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web Audio APIを使ってストリーム入出力してみた]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/12/11/web-audio/"/>
    <updated>2013-12-11T02:17:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/12/11/web-audio</id>
    <content type="html"><![CDATA[<h3>2013/12/10時点での話</h3>

<blockquote><p><a href="http://www.mozilla.jp/blog/entry/10338/">Firefox に Web Audio API が採用され、Web が完全なゲームプラットフォームになりました</a></p>

<p><a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html">Web Audio API W3C Editor&rsquo;s Draft</a></p></blockquote>

<p>ということだったので触ってみた。</p>

<ul>
<li><p>環境</p>

<ul>
<li><p>Mac OS X MountainLion</p></li>
<li><p>FireFox 25.0.1</p></li>
</ul>
</li>
</ul>


<p><div><script src='https://gist.github.com/7894336.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
    &lt;title&gt;SAMPLE&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;audio id=&quot;audio&quot;&gt;ok?&lt;/audio&gt;
    &lt;script&gt;
     navigator.getUserMedia = navigator.getUserMedia
     || navigator.webkitGetUserMedia
     || navigator.mozGetUserMedia;
     window.AudioContext = window.AudioContext
     || window.webkitAudioContext
     || window.mozAudioContext;

     navigator.getUserMedia({audio:true}, function(stream) {
       var audio = document.getElementById(&#39;audio&#39;);
       var context = new AudioContext();
       var mediaStreamSource = context.createMediaStreamSource(stream);
       var filter = context.createBiquadFilter();
       mediaStreamSource.connect(filter);
       filter.type = 0;
       filter.frequency.value = 1000;
       var delay = context.createDelay(1.0);
       filter.connect(delay);
       delay.connect(context.destination);
     }, function() {
       alert(&#39;error&#39;);
     });
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre></noscript></div>
</p>

<h2>注意点</h2>

<ul>
<li><p>ブラウザやバージョンによって本当に挙動が違う</p>

<ul>
<li>fire fox 25でもなんだかたまに不安定(な気がする)</li>
</ul>
</li>
</ul>


<p>マイク入力からWeb Audio APIを使うにはいくつか方法があるんだけど</p>

<p>今回は<code>context.createMediaStreamSouce()</code>に<code>stream</code>を渡したあと、最終的に<code>context.destination</code>をフィルタなりソースに渡せばOK。</p>

<p>マイク入力じゃなくてmp3ファイルとかを読み込んで使うときは<code>source.start()</code>とかするんだけど、ストリーミングのときは<code>context.destination</code>までで大丈夫。</p>

<p>※ちなみにネット上によくあるサンプルなどの<code>souce.noteOn()</code>はduplicatedのもよう。</p>

<h2>まとめ</h2>

<p>本格的な信号処理も可能のようだし、WebRTCをガッツリ触ってP2Pで情報のやりとりとかできればなかなかおもしろいことができそう。</p>

<p>ところで、gistのスタイルが汚いのはあとでなんとかしないとな&hellip;</p>
]]></content>
  </entry>
  
</feed>
