<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: mac | About Digital]]></title>
  <link href="http://blog.digital-bot.com/blog/tags/mac/atom.xml" rel="self"/>
  <link href="http://blog.digital-bot.com/"/>
  <updated>2013-10-12T16:00:16+09:00</updated>
  <id>http://blog.digital-bot.com/</id>
  <author>
    <name><![CDATA[digital_bot]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Macを購入したら絶対に使いたい！超オススメアプリ10選！決定版]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/10/12/terminal/"/>
    <updated>2013-10-12T02:23:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/10/12/terminal</id>
    <content type="html"><![CDATA[<p>さて本日は、MacBookAirを今年に買いかえてから、数々のフリーソフト・シェアウェアを使い続けてきた私が、MacBookを買ったら「絶対に」導入したい、超厳選アプリをランキング形式でご紹介したいと思います！今回は無料で使えるものばかり集めてみましたので、シェアウェアに関しては後日またご紹介したいと思います（＾＾）</p>

<p>それでは、ご覧ください！</p>

<p>↓↓</p>

<!-- more -->




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第10位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>まずは定番、Terminalですね。知る人ぞ知る端末エミュレータです。なんとMac OS Xには<strong>最初から入っています！</strong>端末エミュレータの記事ではないので詳しい説明は避けますが、Terminalはなんと、<strong>マウスを使わずに操作できるという魔法のような操作方法</strong>により世界中に多くのユーザがいます。カフェでドヤ顔したい方はぜひ導入すべきと言えるアプリでしょう。</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第9位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>Macと言えばApple、AppleといえばiPod、iPodといえば音楽です。 そう、せっかくMacを買ったからには、音楽を楽しまなければいけません。デフォルトでインストールされている「iTunes」でもよいのですが、ここはキーボードから小気味よく選曲などの操作をして音楽を聴きたいところです。そんなあなたにオススメなのが、このTerminalというアプリ！なんと、<code>afplay</code>と入力して<em>ごにょごにょ</em>するだけで音楽を聞くことが出来ます！また、Terminalには、おまけとして<a href="http://gyazo.com/3f227e2e46c8b0fee1199f899b2709dd">黒い画面にSLを走らせる</a>！機能も付いているので、カフェでの仕事が捗りますね。</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第8位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>さて、次におすすめしたいのが、Terminalというアプリです。このアプリはいわゆる「テキストエディタ」とも言えます。<code>vim</code>とか<code>emacs</code>とか、よくわからないですけど、ともかくテキストをエディットできます。よくわからないですけど、どちらも使えるので世界は平和です。</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第7位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>さて、WindowsでもMacでも変わらない現代の必須ソフト、それは「ウェブブラウザ」ですね。WindowsだとInternetExplorer、通称IEが標準でインストールされていますが、IEは「ブラウザをダウンロードするための便利なソフト」と揶揄されていたりします（苦笑）</p>

<p>Macに標準でインストールされているブラウザであるSafariはそれほど酷評されているわけではありませんが、やはり自分の手に馴染むブラウザを選択して使っていきたいですよね。</p>

<p><strong>そこでTerminalというアプリです（＾＾）</strong></p>

<p><code>w3m</code>とかいうやつをなんとかどうにかインストールみたいなことすれば、そう、ウェブブラウザです！</p>

<p>あと、<a href="http://gyazo.com/3f227e2e46c8b0fee1199f899b2709dd">SLを走らせたりもできます</a>！</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第6位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>Macには最初からMail.appがインストールされています。しかし、アカウントだの同期だのと面倒ですよね。何も気にせず気持よくメールを送りたいときもあるじゃないですか！</p>

<p>そんなときはTerminalというアプリです。</p>

<p><code>sendmail</code>とか適当に<em>ごにょごにょ</em>すれば、そう、メーラーです！</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第5位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>みなさん！twitterはやってますか？？？</p>

<p>今回5位にランク・インしたのはTerminalというツイッタークライアントです！<code>tw</code>とかを<em>ごにょごにょ</em>すればなんかうまくやってくれるみたいです！</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第4位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>4位です</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第3位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>いよいよトップスリー！第3位は「Terminal」です！世界にはEmacsとVim、2種類のエディタしかないことは有名ですが、Terminalなら両方使えます！</p>

<p>さて、この第3位のTerminalというアプリなのですが、第4位のTerminalと、どちらを3位にしようか、最後まですっご〜〜〜〜〜く悩みました！（笑）（＾＾；） それくらい、TerminalとTerminal、どちらもすごくいいアプリなんです！</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第2位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>さて、惜しくも1位を逃すこととなった第2位は、「Terminal」です！</p>

<p>「Terminal」、中には初めて耳にした方も居るかもしれませんね。一般的に、PCを使う場合は、マウスを使わないと操作することが出来ませんが、このTerminalでは<strong>マウスを使わずにPCを操作すること</strong>が可能とされています。ファイル操作や書類の印刷、なんでもできます！それもそのはず！Terminalは端末エミュレータなんです！端末をエミュレートしてるんですから便利なのはあたりまえかな？</p>

<p>世間には多くの端末エミュレータがありますが、私がおすすめしたいのは、やはりTerminalです。最終的に他の端末エミュレータ、例えばiTermなどを使っていくにしても、「マウスを使わずに色々できる」ことを突き詰めることができるTerminalを経験するのはあなたのPCライフにおいて非情に有意義なものとなるでしょう。</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第1位</h2>

<p>そして栄えある第1位は&hellip;</p>

<br />  




<br />  




<br />  




<br />  




<br />  


<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminalです！！！！！！</h3>

<br />  




<br />  




<br />  




<br />  


<hr />

<h5>元ネタ</h5>

<ul>
<li><p><a href="http://samuraism.com/2013/10/11/1554">Macを購入したら絶対に導入したい！Windowsを購入しても絶対に導入したい！Linuxをインストールしても絶対に導入したい！超オススメアプリ10選！</a></p></li>
<li><p><a href="http://blog.supermomonga.com/articles/vim/startdash-with-mac.html">Macを購入したら絶対に導入したい！私が3年間で厳選した超オススメアプリ10選！</a></p></li>
<li><p><a href="http://blog.id774.net/post/2013/10/11/408/">Mac を購入したら絶対に導入したい！超オススメアプリ 10 選！</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimを使いやすくする]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/10/12/improve-vim/"/>
    <updated>2013-10-12T01:50:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/10/12/improve-vim</id>
    <content type="html"><![CDATA[<p>Emacs派でEmacsは結構拡張してるけど、vimだってコマンドラインから結構手軽につかってる。なぜならEmacsは起動に時間がかかるし、CocoaEmacsに最適化した設定だからあまりターミナルから起動したくないから。もちろんそこらへんもいろいろ工夫はしてるけど、ほんとにさっくりファイルを弄りたいときなんかは結構vimで弄ったりする。</p>

<p>これまではtabの設定とか最低限の設定をした.vimrcを使ってたんだけど、せっかくだからvimももう少し便利にすることにした。まぁ何かに行き詰まったときにこういう設定をすると仕事してる気になって落ち着くっていう悪い癖なだけな気もする。</p>

<!-- more -->


<h2>.vimrc</h2>

<p><a href="http://blog.digital-bot.com/blog/2013/09/30/macvim-kaoriya/">前回</a>、最新のVim7.4のMacVim-Kaoriyaを入れたお陰<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>でどうやらいくつかのプラグインが強化されてるらしい。まぁ詳しい説明は<a href="http://qiita.com/">Qiita</a>なんかにまかせる。</p>

<p>まぁだらだら書くのもあれなので手っ取り早く<strong>.vim</strong>を晒そう</p>

<h3>リポジトリ</h3>

<ul>
<li><a href="https://github.com/digitalbot/dot-vim">dot-vim</a></li>
</ul>


<p>今回我ながらポイントだと思うのが、READMEのとおりにセットアップすれば大体どの環境(unix系)でも動く汎用的な設定ができたところ。Emacsの設定はとてもじゃないけど、現状自分のMac以外に持ち出せないのでここは少しこだわってみた。</p>

<p>そしてそのセットアップもできる限り簡単に仕上げたつもり。基本的には<code>git clone --recursive</code>して<code>./setup.sh</code>するだけ。簡単。</p>

<pre><code>$ git clone --recursive git://github.com/digitalbot/dot-vim.git
$ cd dot-vim
$ ./setup.sh
$ vim +NeoBundleInstall +q
</code></pre>

<p>READMEからの引用だけど、これで元のvimの挙動をそんなにいじらないけど細かいところで便利なvimができあがる。git cloneの<code>--recursive</code>については<a href="http://blog.digital-bot.com/blog/2013/08/31/git-clone-recursive/">以前書いたとおり</a>。</p>

<p>ともかく、詳しい設定の内容は割愛するけど、<code>NeoBundle</code>、<code>Unite</code>、<code>Lightline</code>、<code>Quickrun</code>とか<code>Neocomplete</code>を導入した。これ以上増やすとEmacsみたいになるので、ここらへんが必要最低限だと思う。ちなみに、<code>if_lua</code>が効かない、つまり古めのvimでもそんときは<code>Neocomplete</code>じゃなく<code>Neocomplcache</code>を使うように条件分岐してるから、ほんとに大体の環境でこの<strong>.vim</strong>は動くはず。</p>

<h2>おわりに</h2>

<p>エディタの拡張は「どこまでやるか」のバランスがとてもむずかしいように思う。<strong>Emacs</strong>ではやりすぎて重たくなってしまってるし(それでもこの記事も<strong>Emacs</strong>で書いてるけど)、できるだけ必要最低限でポータビリティがあるのがカッコイイと最近は思い始めた。あと、全然環境の違う赤の他人が<code>git clone</code>して試せるかどうかを考えてるってもの個人的には渋くてかっこいいと思う。</p>

<p>なお、Lightlineはコマンドラインから<code>mvim</code>してGUIで動かすと変なwarnを出すのでGUIではオフにしている。そこら辺のことはまた別のエントリにしようかと思ってる。</p>

<p>あとvimは引数に<code>+command</code>するとそのコマンドを起動時に実行してくれるらしく、これのお陰で<code>vim +NeoBundleInstall +q</code>といった風にワンライナーでプラグインをインストールできるのが良いと思った。</p>

<p>でもvim scriptはちょっとよくわかんないとも思った。<del>elispのほうが美しい</del></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><code>if_lua</code>が大事らしい
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacVim Kaoriyaをhomebrewから入れた]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/30/macvim-kaoriya/"/>
    <updated>2013-09-30T19:56:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/30/macvim-kaoriya</id>
    <content type="html"><![CDATA[<p>Emacsを愛用していて、システムデフォルトのではなくhomebrewで自前のEmacsを入れてるわけなんだけど、不公平な気もしたのでVimも自前のを入れることにした。</p>

<h2>MacVim KaoriYa</h2>

<p>やはりvimもGUI版があれば使いたいと思ったので<a href="http://code.google.com/p/macvim-kaoriya/">MacVim KaoriYa</a>を導入することにした。MacVim Kaoriyaのメリットは上記リンクに詳しく書いてあるし、なんだったらいろいろな設定方法も書いてある。</p>

<p>環境としては</p>

<ul>
<li>MacOSX Mountain Lion, Intel Core i7, 8 GB RAM</li>
</ul>


<p>と、後述するSnowLeopardで導入した。</p>

<!-- more -->


<p>ここで、後に入れるプラグインのためにも、<strong>v7.4</strong>, <strong>if_lua</strong> に対応していることが求められる。デフォルトではhomebrewのレシピが無いんだけど、世の中奇特な人はいるもんで、レシピを用意してくれてる人がいる<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<pre><code>$ brew tap supermomonga/homebrew-splhack
$ brew install --HEAD cmigemo-mk
$ brew install --HEAD ctags-objc-ja
$ brew install --HEAD gettext-mk
$ brew install --HEAD macvim-kaoriya
$ brew linkapps
</code></pre>

<p>これだけでなんとかなるはず。<br/>
emacsでも使うから<code>ctags</code>や<code>cmigemo</code>は標準フォーミュラの方でいれちゃったから</p>

<pre><code>$ brew unlink cmigemo &amp;&amp; brew link -f cmigemo-mk
</code></pre>

<p>とかする必要があった。</p>

<h2>SnowLeopardでの問題</h2>

<p>ちなみに、もう一台のデスクトップはSnowLeopardなんだけど、SnowLeopard環境ではgccでのコンパイルにしくじるので<code>brew install --HEAD macvim-kaoriya</code>の前にフォーミュラを少し編集する必要がある。それについては <a href="http://kronus9.sblo.jp/article/71512104.html">MacVim KaoriYaをSnow Leopard + Homebrewでビルドした</a> にて詳しい方法が載っている。<br/>
自分もエラーログ追っててclangを使うのはすぐわかったんだけど、<code>--use-clang</code>してもダメだから参ってた。</p>

<h2>.vimrc</h2>

<p>vimrcもいろいろ弄ったんだけど、まぁそこら辺は違うエントリにまとめるとする。</p>

<h2>ちなみに</h2>

<p>アイコンからGUIのMacVim KaoriYaを起動する分には問題ないけど、そのままじゃターミナルでパスが通ってないのでなんとかする必要がある。そこら辺についても他のエントリにまとめると思う。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://supermomonga.com/2013/06/15/macvim_kaoriya_homebrew/">homebrewを使ってちょっと新しめのMacVim KaoriYaを使おう</a>
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[homebrew-caskが良さそうなので導入してみた]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/08/homebrew-cask/"/>
    <updated>2013-09-08T03:11:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/08/homebrew-cask</id>
    <content type="html"><![CDATA[<p>どうやらMacのGUIアプリケーションまでも<code>homebrew</code>で管理をしようとしている人がいるらしい。確かに考えなくもなかったけど、本当に作った人がいるとは思わなかったし、うまいことhomebrewを拡張した感じで作ってると感じた。マックのアプリのパッケージ管理がこれで楽になればよいなぁと思う。バージョンの管理も。</p>

<!-- more -->


<h2>Git repo</h2>

<ul>
<li><a href="https://github.com/phinze/homebrew-cask">https://github.com/phinze/homebrew-cask</a></li>
</ul>


<h2>導入方法</h2>

<pre><code>$ brew tap phinze/homebrew-cask
$ brew install brew-cask
</code></pre>

<p>READMEを読む感じ、これだけ。そしておもむろに</p>

<pre><code>$ brew cask install google-chrome
</code></pre>

<p>とかすると<code>~/Applications/"Google Chrome.app"</code>が生まれるという寸法らしい。すごいお手軽。一々ダウンロードリンクを探すこともなければ、ドラッグアンドドロップも必要ない。しかも、<code>brew cask install</code>に複数のアプリ名を渡せば一括でインストールが可能。これは便利だと思う。良い。ここでちょっと関心したのが<code>brew cask list</code>でちゃんとhomebrew-caskで入れたアプリが一覧できること。これをなんかに書き出しとけば他の環境でもパイプで渡して再現が簡単。</p>

<h2>雑感</h2>

<p>homebrew本体とは微妙に違ってるところがあって、homebrewでは<code>/usr/local/Cellar</code>以下に実体をインストールしていくのに対し、homebrew-caskでインストールされたアプリケーションは、<code>Caskroom</code>というところに入る。これはデフォルトだと<code>/opt/homebrew-cask/Caskroom</code>で、最初のアプリをインストール時に<em>「ここにCaskroom作りたいんだけどパーミッションの関係で作れないからsudoパスワードを入力してくれ」</em>的なことを言われた。そして、このCaskroomから<code>~/Applications</code>にシンボリックリンクが貼られるみたい。もちろんこれもデフォルトの話で、</p>

<pre><code>$ export HOMEBREW_CASK_OPTS="--appdir=/Applications"
</code></pre>

<p>とか環境変数で変えられるみたい。<strong>update</strong>もどうやら<code>brew upgrade</code>で出来るみたいでココらへんは空気のような振る舞いをしてくれる。</p>

<h5>気になる点としては</h5>

<ul>
<li><p><code>~/Applications</code>に入るのはシンボリックリンクなので、ランチャー(少なくとも<code>QuickSilver</code>)で認識できない</p></li>
<li><p><code>brew cask uninstall</code>時には<code>*.plst</code>なども一緒に掃除してくれるのか(多分してくれない)</p>

<ul>
<li>そして確かにアンインストールはされるけど、<code>/opt/homebrew-cask/Caskroom</code>以下に空のそのアプリのディレクトリが残る</li>
</ul>
</li>
</ul>


<p>くらいかなぁ。今もともと入れてるアプリを置き換えるかどうかは少し迷うかな。ちょっといろいろ試してみようかと思う。いずれにせよ、これをうまく使いこなせばマックブックを買い換えた時なんかに絶大な威力を発揮する気がする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AnythingからHelmに移行できない]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/07/cant-use-helm/"/>
    <updated>2013-09-07T02:30:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/07/cant-use-helm</id>
    <content type="html"><![CDATA[<p><code>Anything</code>から<code>Helm</code>に移行できない。わざわざ移行する必要も確かに無いんだけど、移行できるもんなら移行したいってもん。だけど、Anythingだと快適に使えるEmacsも、Helmに切り替えるとどうにも使い勝手が悪くなる。</p>

<p>自分は<strong>Mac OS 10.8 mountain lion</strong>と<strong>Mac OS 10.6 snow leopard</strong>の環境で同じ<strong>CocoaEmacs</strong>・同じ<strong>.emacs</strong>を使ってるんだけど、Anythingだと両方のマシンで問題なく動くのに、Helmだとsnow leopardで動かないってことがあって割と困ってる。しかも、そもそもどちらの環境でもうまく動かないHelmの機能もいくつかあってさらに困ってる。</p>

<p>だからHelmのほうはブランチを切って(当然.emacsは<code>git</code>管理してる。ちなみにCentOS上のgitolite)ちょくちょく修正を加えては試して、ダメだからmasterにもどってAnythingを使ってって感じになってる。具体的には</p>

<ul>
<li><p><code>helm-gtags</code>が意図通りの挙動をしない</p></li>
<li><p><code>helm-show-kill-ring</code>の画面分割がおかしい</p>

<ul>
<li>しかも<code>popwin.el</code>に登録できない</li>
</ul>
</li>
<li><p><code>helm-show-kill-ring</code>がsnow leopardで複数行を一行ずつと解釈する</p></li>
<li><p><code>helm-for-files</code>で<code>tramp</code>使ってファイル開こうとすると落ちる</p></li>
<li><p><code>tramp</code>使ってリモートに入ってるときにfile系helmの機能使うと、カレントディレクトリのソースを取ってくるのに手間取って固まる</p></li>
</ul>


<p>あたりが現状問題視しているもの。詳しい話(具体的な設定など)はまた次の機会に書くとして、あくまでメモとしてここにとりあえず書いとく。自分でも忘れちゃうから。</p>

<p>そもそも、Helmが色々置き換え過ぎだし、デフォルトの挙動が色々ちょっときもいのもどうなのかなぁと思ってる。</p>

<p>しかし、Anythingにも問題があって、いつからかregionがactiveなときに<code>anything-*</code>するとそのanythingバッファの中で<code>delete-backward-char</code>が出来なくなってしまってる。つまり、例えば仮にある範囲内の文字を置換したくて、範囲を選択した状態で<code>replace-string</code>すべく<code>M-x</code>してから<code>reprace</code>とかtypoしたのを<code>C-h</code>(に<code>delete-backward-char</code>をバインドしてる)で修正出来ない。まぁここらへんも別にまたまとめよう。</p>

<h2>おわりに</h2>

<p>こういう<strong>「**できない」</strong>って書いてあるだけのエントリは後にそれがどうなったかわからないし、解決策や問題が起きた具体例がないと何も進展しないってことで悪いとされてるみたいだけど、まぁ何書こうが良いだろう。それぞれの問題が何に起因しているかは大体当たりはついてるけどその話はまた今度。まぁともかく今回は自分への忘備録として、色々ハマったときに参考にしたサイトでも上げておこうかと思う。</p>

<h4>参考</h4>

<ul>
<li><p><a href="http://www49.atwiki.jp/ntemacs/pages/32.html">http://www49.atwiki.jp/ntemacs/pages/32.html</a></p></li>
<li><p><a href="http://qiita.com/akisute3@github/items/7c8ea3970e4cbb7baa97">http://qiita.com/akisute3@github/items/7c8ea3970e4cbb7baa97</a></p></li>
<li><p><a href="http://sleepboy-zzz.blogspot.jp/2013/02/helm-migemo.html">http://sleepboy-zzz.blogspot.jp/2013/02/helm-migemo.html</a></p></li>
<li><p><a href="https://github.com/emacs-helm/helm/issues/94">https://github.com/emacs-helm/helm/issues/94</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
