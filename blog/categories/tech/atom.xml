<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | About Digital]]></title>
  <link href="http://blog.digital-bot.com/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://blog.digital-bot.com/"/>
  <updated>2013-09-30T19:59:22+09:00</updated>
  <id>http://blog.digital-bot.com/</id>
  <author>
    <name><![CDATA[digital_bot]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MacVim Kaoriyaをhomebrewから入れた]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/30/macvim-kaoriya/"/>
    <updated>2013-09-30T19:56:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/30/macvim-kaoriya</id>
    <content type="html"><![CDATA[<p>Emacsを愛用していて、システムデフォルトのではなくhomebrewで自前のEmacsを入れてるわけなんだけど、不公平な気もしたのでVimも自前のを入れることにした。</p>

<h2>MacVim KaoriYa</h2>

<p>やはりvimもGUI版があれば使いたいと思ったので<a href="http://code.google.com/p/macvim-kaoriya/">MacVim KaoriYa</a>を導入することにした。MacVim Kaoriyaのメリットは上記リンクに詳しく書いてあるし、なんだったらいろいろな設定方法も書いてある。</p>

<p>環境としては</p>

<ul>
<li>MacOSX Mountain Lion, Intel Core i7, 8 GB RAM</li>
</ul>


<p>と、後述するSnowLeopardで導入した。</p>

<!-- more -->


<p>ここで、後に入れるプラグインのためにも、<strong>v7.4</strong>, <strong>if_lua</strong> に対応していることが求められる。デフォルトではhomebrewのレシピが無いんだけど、世の中奇特な人はいるもんで、レシピを用意してくれてる人がいる<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<pre><code>$ brew tap supermomonga/homebrew-splhack
$ brew install --HEAD cmigemo-mk
$ brew install --HEAD ctags-objc-ja
$ brew install --HEAD gettext-mk
$ brew install --HEAD macvim-kaoriya
$ brew linkapps
</code></pre>

<p>これだけでなんとかなるはず。<br/>
emacsでも使うから<code>ctags</code>や<code>cmigemo</code>は標準フォーミュラの方でいれちゃったから</p>

<pre><code>$ brew unlink cmigemo &amp;&amp; brew link -f cmigemo-mk
</code></pre>

<p>とかする必要があった。</p>

<h2>SnowLeopardでの問題</h2>

<p>ちなみに、もう一台のデスクトップはSnowLeopardなんだけど、SnowLeopard環境ではgccでのコンパイルにしくじるので<code>brew install --HEAD macvim-kaoriya</code>の前にフォーミュラを少し編集する必要がある。それについては <a href="http://kronus9.sblo.jp/article/71512104.html">MacVim KaoriYaをSnow Leopard + Homebrewでビルドした</a> にて詳しい方法が載っている。<br/>
自分もエラーログ追っててclangを使うのはすぐわかったんだけど、<code>--use-clang</code>してもダメだから参ってた。</p>

<h2>.vimrc</h2>

<p>vimrcもいろいろ弄ったんだけど、まぁそこら辺は違うエントリにまとめるとする。</p>

<h2>ちなみに</h2>

<p>アイコンからGUIのMacVim KaoriYaを起動する分には問題ないけど、そのままじゃターミナルでパスが通ってないのでなんとかする必要がある。そこら辺についても他のエントリにまとめると思う。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://supermomonga.com/2013/06/15/macvim_kaoriya_homebrew/">homebrewを使ってちょっと新しめのMacVim KaoriYaを使おう</a>
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPCに行ってきた]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/25/went-yapc/"/>
    <updated>2013-09-25T00:37:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/25/went-yapc</id>
    <content type="html"><![CDATA[<p>YAPC::ASIAに行ってきた。</p>

<p>結局明日からの音響学会の準備が会ったから一日目しかいれなかったけど、やはり参加してよかったし、来年以降も参加したいと思った。どうやら今回で@lestrratさん、@941さん体制が終わるらしいけど。Perlハッカーコミュニティの文化は本当に素晴らしいと思っていて、なんとか自分も貢献したいと思う。</p>

<p>以下、印象に残った発表</p>

<hr />

<h2>[学術分野におけるperl] by @papixさん</h2>

<blockquote><p>PerCUDA</p></blockquote>

<p>自分も信号処理で高速リアルタイム計算とかがやりたくてGPGPUとか一時期やってたし、とても興味がある話だった。けど、自分はリアルタイムで本当にコンママイクロ秒以下の世界で計算するためにGPGPUやってたから、そこをPerlのバインディングにしてその分GPU側との情報のやりとりとかに時間がかかるようだったら少しもったいないとも思った。</p>

<blockquote><p>その他研究のレガシーとモダンのこと</p></blockquote>

<p>Emacs使いとして尊敬する@syohexさんと同じ研究室と聞いて少しびっくり。研究自体もPerlでコンパイラのバグ検知とかすごい面白そうだと思った。</p>

<h2>[社内開発簡単化と世界で戦う開発を考える技術] by @yappoさん</h2>

<blockquote><p>ミッションステートメント</p>

<blockquote><p>「やることやらないことを最初にまとめておくとあとでぶれない」</p></blockquote></blockquote>

<p>これ、当たり前のことなんだけど、やっぱり当たり前に大事だと思うし、それを具体的にモジュールの例を上げて話してくれて説得力あった。</p>

<blockquote><p>普段コピペとかを嫌うのに、最初の設定ファイルはコピペとかしちゃう</p>

<blockquote><p>そういうのは秘伝のタレ化してしまうし、意味もわからなくつかってしまう</p>

<p>コピペ元の人はコピペされることを意識して書いてない。そしてバグを直してもそれが追従されない</p></blockquote></blockquote>

<p>今回のYAPC::ASIAキーワード「秘伝のタレ」。これも考えてみれば当たり前なんだけど、やっぱりコロンブスの卵的な話だと思う。そしてその現状を打破するために自分でセットアップスクリプト書くってのはまさしくstfuawscを体現しててカッコ良いとおもった。</p>

<h2>最後に</h2>

<p>普段Blogとかで追ってるすごいプログラマ達を間近で見られてとてもよい経験になった。すごくモチベーションが上がった。Perl以外の分野でも活躍するタレント性のあるハッカー達をみると、Open&amp;ShareであったりブログやOSS活動を通じての体外活動が大事なのがよく分かる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPCに行こう]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/20/go-yapc/"/>
    <updated>2013-09-20T00:05:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/20/go-yapc</id>
    <content type="html"><![CDATA[<p><a href="http://yapcasia.org/2013/">YAPC::ASIA</a>が始まった。</p>

<ul>
<li><p>慶応義塾大学日吉キャンパス(日吉駅そば)</p></li>
<li><p>9/19 ~ 9/21</p></li>
</ul>


<p>20日は一日いる予定で、21はもしかした午前中しかいられないかも。けど楽しみ。学生チケットは¥0ってものうれしい。会場でよろしく。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emacsとvimの使い分け]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/17/emacs-and-vim/"/>
    <updated>2013-09-17T20:19:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/17/emacs-and-vim</id>
    <content type="html"><![CDATA[<h3>ひとりごと</h3>

<p><strong>Emacs</strong>はMacBookAirローカルでCocoaEmacsを動かして、<code>tramp</code>でサーバ上のファイルいじったりするから徹底的にいじってるけど、<strong>Vim</strong>は逆に<code>ssh</code>したサーバ上で動かすことが多いから出来るだけシンプル且つデフォルトの挙動とそこまで違う挙動をしないような設定をしてる。</p>

<p>そういう意味では<code>C-h</code>が<code>delete-backward-char</code>にすらなってないような他人のEmacsは正直使うことが苦痛にすらなるレベル。ネット上のリポジトリの設定ファイルを手軽に読む方法とかないのかな。<code>git clone</code>とかせず、urlをしていするだけ、みたいな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[複数PCでsshキーを共有する]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/16/ssh-add/"/>
    <updated>2013-09-16T03:28:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/16/ssh-add</id>
    <content type="html"><![CDATA[<p>色んなPCでsshの鍵を共有している場合、単に鍵をコピーするだけでなく<code>ssh-add</code>が必要。</p>

<p>PC Aでssh-keygenしたキーをPC Bにコピーして使ってたんだけど、毎回</p>

<pre><code>enter passphrase for key
</code></pre>

<p>って聞いてきて鍵登録してる意味ないやん、って思いながらパスをポチポチ打ってた。</p>

<p>けどどう考えても鍵コピーした手間に見合った効果得られてないしなんだか損してるって気付いたので重い腰を上げて設定してみた。<br/>
調べたところ、PC Aではssh-keygenしたからssh-agentに登録されてるけど、PC Bでは鍵がssh-agentに登録されてないのが原因ぽいことがわかった。<br/>
そこで</p>

<pre><code>$ eval `ssh-agent`
$ ssh-add [keyのパス（デフォルトは~/.ssh/id_rsaだと思う）]
</code></pre>

<p>することで鍵を登録した。<br/>
これでいろいろ捗るようになった。</p>
]]></content>
  </entry>
  
</feed>
