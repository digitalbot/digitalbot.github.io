<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | About Digital]]></title>
  <link href="http://blog.digital-bot.com/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://blog.digital-bot.com/"/>
  <updated>2013-11-01T23:38:42+09:00</updated>
  <id>http://blog.digital-bot.com/</id>
  <author>
    <name><![CDATA[digital_bot]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PerlでJSONを出力する。JSONとJSON::Syckの違い]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/11/01/json-cmp/"/>
    <updated>2013-11-01T22:34:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/11/01/json-cmp</id>
    <content type="html"><![CDATA[<p>PerlでJSONを吐き出す方法、いくつかあるんだけど、どうすればよいか毎回忘れるし、プロジェクトによってJSON::XS使ってたりJSON::Syck使ってたりとまちまちだから、自分なりの方法をここにメモしておく。</p>

<h2>JSONとSyckで同じ出力を得る</h2>

<p><div><script src='https://gist.github.com/7265507.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code>#!/usr/bin/env perl
use strict;
use warnings;
use feature qw/say/;
use Encode qw//;
use Encode::JavaScript::UCS;
use Data::Dumper;
use JSON qw//;
use JSON::Syck;
use Test::More;

sub _json {
    my @data = @_;
    my $json = JSON-&gt;new-&gt;ascii-&gt;utf8(0)-&gt;encode(\@data);
    $json =~ s/([&lt;&gt;\/\+])/sprintf(&quot;\\u%04x&quot;,ord($1))/eg;
    return $json;
}
sub _syck {
    my @data = @_;
    my $json = Encode::encode('JavaScript-UCS', JSON::Syck::Dump(\@data));
    $json =~ s/([&lt;&gt;\/\+])/sprintf(&quot;\\u%04x&quot;,ord($1))/eg;
    return $json;
}

my @members = ({
    age =&gt; 41,
    name =&gt; '[倉持]',
}, {
    age =&gt; 42,
    name =&gt; '&quot;浅沼&quot;/\/',
}, {
    age =&gt; 49,
    name =&gt; '&quot;\&quot;&lt;恩田&gt;',
}, {
    age =&gt; 49,
    name =&gt; ';{五十嵐};',
});

ok(_json eq _syck);
done_testing;

# say _json(@members);
##=&gt; [{&quot;age&quot;:41,&quot;name&quot;:&quot;[\u00e5\u0080\u0089\u00e6\u008c\u0081]&quot;},{&quot;name&quot;:&quot;\&quot;\u00e6\u00b5\u0085\u00e6\u00b2\u00bc\&quot;\u002f\\\u002f&quot;,&quot;age&quot;:42},{&quot;name&quot;:&quot;\&quot;\\\&quot;\u003c\u00e6\u0081\u00a9\u00e7\u0094\u00b0\u003e&quot;,&quot;age&quot;:49},{&quot;age&quot;:49,&quot;name&quot;:&quot;;{\u00e4\u00ba\u0094\u00e5\u008d\u0081\u00e5\u00b5\u0090};&quot;}]

# say _syck(@members);
##=&gt; [{&quot;age&quot;:41,&quot;name&quot;:&quot;[\u00e5\u0080\u0089\u00e6\u008c\u0081]&quot;},{&quot;name&quot;:&quot;\&quot;\u00e6\u00b5\u0085\u00e6\u00b2\u00bc\&quot;\u002f\\\u002f&quot;,&quot;age&quot;:42},{&quot;name&quot;:&quot;\&quot;\\\&quot;\u003c\u00e6\u0081\u00a9\u00e7\u0094\u00b0\u003e&quot;,&quot;age&quot;:49},{&quot;age&quot;:49,&quot;name&quot;:&quot;;{\u00e4\u00ba\u0094\u00e5\u008d\u0081\u00e5\u00b5\u0090};&quot;}]
</code></pre></noscript></div>
</p>

<p>念頭にあるのは「安全で文字コードの違いなどを意識せずに扱いたい」ということ。JSONとJSON::Syckでは当然だけどデフォルトの挙動がいくらか違うし、出力されるJSON自体も違う。</p>

<p>```perl</p>

<h1>JSON</h1>

<p>JSON->new->ascii->utf8(0)&ndash;>encode(\@data);
```</p>

<p>Unicode文字列を"%uXXXX"形式にエンコードしたいから、<strong>JSON</strong>では<code>ascii</code>オプションをつける。<code>utf8(0)</code>はデフォルトの挙動なので無くても良い。</p>

<p>```perl</p>

<h1>JSON::Syck</h1>

<p>Encode::encode(&lsquo;JavaScript-UCS&rsquo;, JSON::Syck::Dump(\@data));
```</p>

<p>こちら<strong>JSON::Syck</strong>では<code>Encode::JavaScript::UCS</code>を使うことでそれを実現する。</p>

<p><code>perl
$json =~ s/([&lt;&gt;\/\+])/sprintf("\\u%04x",ord($1))/eg;
</code></p>

<p>それだけじゃ「&lt;、>、+」がそのままなので、置換しておく。それぞれこうすると安全なJSON文字列を得ることができる。これさえ覚えておけばプロジェクトによってどちらが使われていても、同じ結果が得られるAPIが書けるはず。</p>

<h2>渡す文字列</h2>

<p>euc-jpでencodedな文字列でもsjisでencodedな文字列でも(つまりutf8フラグ無し)、decodedな文字列(utf8フラグ有り)でもなんでも渡せる。</p>

<h2>返ってくる文字列</h2>

<p><code>"%uXXXX"</code>形式にエンコードされたutf8文字列が返ってくる。これを普通のutf8文字列(utf8フラグ無し)にしたければ</p>

<p><code>perl
Encode::decode('JavaScript-UCS', $str);
</code></p>

<p>すれば良いし、あとはeuc-jpとかで欲しければ普通に</p>

<p><code>perl
Encode::encode('euc-jp', Encode::decode_utf8(Encode::decode('JavaScript-UCS', $str)));
</code></p>

<p>すれば良いはず。違ったら教えて。</p>

<h3>参考</h3>

<ul>
<li><p><a href="http://d.hatena.ne.jp/hasegawayosuke/20110706/p1">SONのエスケープをどこまでやるか問題</a></p></li>
<li><p><a href="http://d.hatena.ne.jp/minesouta/20071005/p1">JSON::Syck &ndash; あえて言おう、JSONはYAMLであると。</a></p></li>
<li><p><a href="http://kawa.at.webry.info/200801/article_6.html">JSON モジュールの utf8 フラグ周りの仕様 tips 注意点</a></p></li>
<li><p><a href="http://blog.64p.org/entry/20111125/1322185155">Amon2とJSONとセキュリティ</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web::Queryのtestがコケた話]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/10/28/install-web-query/"/>
    <updated>2013-10-28T15:09:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/10/28/install-web-query</id>
    <content type="html"><![CDATA[<p>先日、CentoOSにWeb::Queryを入れようとしたらこけてハマってた。レガシーなシステムでの使用だったので当然<code>Carton</code>なんか使ってないし、モジュールはそれぞれのサーバに入って直接<code>cpanm</code>する形だったが、やはりこういったレガシーな開発手順というのは早めに駆逐されたほうが世の(開発者)のためだと感じた。</p>

<p>開発環境では一発で入ってたし、試しにと手元のMBAに<code>cpanm Web::Query</code>しても問題なく入ったのに、肝心の本番サーバでWeb::Queryが入らない。テストでこけてる。その他perl5.8.8を新規に入れたまっさら状態のサーバを用意して試しても見たけど再現しない。なんなんだ。</p>

<p>ためしに最新版ではない、0.16とかいくつか古いバージョンのWeb::Queryも試したけれど、特に違いはうまれなかったので、最近の変更が原因ではなさそう。</p>

<p>サマリーだけ抜き出すとこんな感じ</p>

<p>```</p>

<h2>Failed Test        Stat Wstat Total Fail  Failed  List of Failed</h2>

<p>t/07_remove.t         2   512    10    2  20.00%  2-3
t/08_indent.t         1   256     2    1  50.00%  1
t/09_as_html.t        8  2048     8    8 100.00%  1-8
t/add.t               4  1024     8    4  50.00%  1-4
t/add_class.t         2   512     4    2  50.00%  1-2
t/after.t             1   256     2    1  50.00%  1
t/append.t            1   256     2    1  50.00%  1
t/before.t            1   256     2    1  50.00%  1
t/clone.t             1   256     2    1  50.00%  1
t/contents.t          2   512     4    2  50.00%  1-2
t/detach.t            2   512     6    2  33.33%  1-2
t/insert_after.t      1   256     2    1  50.00%  1
t/insert_before.t     1   256     2    1  50.00%  1
t/prepend.t           1   256     2    1  50.00%  1
t/remove_class.t      2   512     6    2  33.33%  2-3
t/replace_with.t      4  1024     8    4  50.00%  1-4
t/store_comments.t    2   512     4    2  50.00%  1-2
Failed 17/28 test scripts, 39.29% okay. 36/135 subtests failed, 73.33% okay.
FAIL
```</p>

<!-- more -->


<h2>HTML::Element</h2>

<p>結論からいうと<strong>HTML::Element</strong>が入ってなかった。</p>

<p>Web::Queryの依存モジュールに入ってないから必ずしもHTML::Elementが必要なわけではないのだろうけど(というか依存モジュール入れる時点で入りそうなもんだけど)、これがないと何故か'\n'が<code>wq-&gt;as_html</code>だかの結果に入り込んでテスト結果が誤判定？されてしまっていた。<code>cpanm --look Web::Query</code>してテストを自分で書き換えたりもしてみたら、どうにもやはりこの"\n"が問題のようなんだけど、これはなんでだろう。</p>

<p>「これは何かおかしい」と思って、適当に関係しそうっぽいモジュールを入れてから再度<code>cpanm</code>すると、今度は何事もなかったかのようにインストールされた。それが<strong>HTML::Element</strong>だった。他にもHTML::ParserとかXML::LibXMLとか色々入れなおしたけど、やっかいなのはこれな気がする。</p>

<p>何が面倒かって、特にモジュールが足りてない(Can&rsquo;t locate~)とか言われずに、淡々とテストの文字列比較で落ちてるのが面倒だった。</p>

<h2>おわりに</h2>

<p><a href="https://gist.github.com/digitalbot/7200263">一応エラーのログを貼っておこうかと思う</a>。結局技術的に踏み込んで解決策を見出したわけでもないゆるふわな記事だけど、まぁそういう風にハマってた人もいたってことで。</p>

<p>ちなみに、このWeb::Query、とても便利。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X MavericksにSnow Leopardからアップデートした]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/10/23/install-mavericks/"/>
    <updated>2013-10-23T22:44:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/10/23/install-mavericks</id>
    <content type="html"><![CDATA[<p>手元のMacBookAir Mid 2013はまだMountainLionだけど、職場で使ってるSnowLeopard機をMavericksにアップデートしてみた。</p>

<blockquote><p><a href="http://news.livedoor.com/article/detail/8183029/">アップル、「OS X Mavericks」を無料公開！</a></p>

<blockquote><p>アップルは22日（現地時間）、OS Xの最新バージョン「Mavericks」の公開を開始した。互換性があるMacユーザーであれば無料でアップロード可能となっている。</p></blockquote></blockquote>

<p>これまでのOS X(例えばLion)は安いとはいえ無料じゃなかったので、アップデートをするには会社のシステム管理者的な人に申請をして話を通す必要があったのでこれまでアップデートを面倒臭がってしていなかった。が、しかしいい加減MacBookAirと環境が大きく違うのが地味にストレスになっていたのでこの<strong>無料アップデート</strong>に飛びついてみた。</p>

<h2>環境</h2>

<ul>
<li><p>Mac OS X Snow Leopard 多分 2009年くらいの</p></li>
<li><p>500GB HDD</p></li>
<li><p>4GB RAM</p></li>
</ul>


<p>ちょっと今自宅だし詳細なデータはないけど、一応環境はこんなもんだと思う。</p>

<h2>前準備</h2>

<p>会社のだし、とくにタイムマシーンとかでバックアップとかもとってないので、いきなりアップデートするのは怖い。そこで大事なファイルのバックアップをとったり、<strong>homebrew</strong>で入れたもののリストを作ったりした。</p>

<pre><code>$ mkdir -p ~/.brew
$ T=`date +%Y%m%d`
$ brew list &gt; ~/.brew/list$T.txt
$ brew list | xargs brew info &gt; ~/.brew/info$T.txt
</code></pre>

<p>入れたものリスト(<code>brew list</code>)だけではコンパイルオプションとか残らないから、念のためそれぞれの情報(<code>brew info</code>)も残しておいた。</p>

<h2>インストール</h2>

<p>インストール自体はApp Storeからすんなり行く。最初に<strong>残り44分</strong>て出るけど、まぁ実際は一時間くらいかかったかな。特に躓くことはないはず。SnowLeopardでも。今回、SnowLeopard &ndash;> Lion &ndash;> MountainLion &ndash;> Mavericksとか段階を踏まずに一発でMavericksを入れられるのが地味にうれしいところ。</p>

<h2>セットアップ</h2>

<p>インストールが終わると後は普通にログインして使いはじめるだけなんだけど、<strong>TotalFinder</strong>が対応してないので<strong>「互換性のないフォルダ</strong>みたいなところに移動しました」とかでた。これは少し残念だけど、今回のMavericksからデフォルトでFinderにタブが付いたのでとりあえずは問題ないかな。(※最下部追記あり)</p>

<p>あとは<strong>Xcode</strong>を改めて入れたり、<strong>Java</strong>を入れたりで、割と時間がかかってしまった。SnowLeopardからのアップデートだったので色々とシステム環境設定から細かい挙動をいじるのも少し大変だった(スクロールはナチュラルじゃダメ派)。</p>

<p>実際のところ、ターミナルと<strong>Emacs</strong>さえ動けば良いのでそこら辺の挙動しかまだ確かめてないけど、特に問題なく使えてると思う。ただ、<code>brew upgrade</code>したら(<code>brew update</code>はできた。)、一部のhomebrewで入れたツールが<strong>「libc++で入れなおしてくれ」</strong>みたいなこと言うので、次の出社時にはそれの対応をしなきゃいけないっぽい(まだ入れなおしてない)。</p>

<p>libc++といえば、</p>

<ul>
<li><a href="http://beatsync.net/main/log20131021.html">Mac OS X環境でclangを使ってC++11をboostとともに使う環境を構築するの巻</a></li>
</ul>


<p>ちょうど今日この記事を見たので貼っておく。なんか関係有るのかな。</p>

<p>他気になる点としては、アップデートとかで色々入れてた直後だからってのもあるけど、ファンが少し前より気になるくらいに活発にうごいてることと、全体的に動きがもっさりするようになった気がすることか。まぁこれはもう少し使ってみないとわからないかな。</p>

<h2>おわりに</h2>

<p>手元のMacBookAir(MountainLion)はもうちょっと人柱が出て、色々アプリやらなんやらが対応してからアップデートしようと思ってる。</p>

<h4>ちなみに</h4>

<p>アクティビティモニタのDockでメモリ使用量表示するの地味に便利に使ってたんだけど、Mavericksで出来なくなっててちょっとショック。</p>

<p><img src="/images/activitie_monitor.png" alt="ActivitieMonitor" /></p>

<p>↑これね。</p>

<h2>※追記(2013/10/31)</h2>

<p>TotalFinderはアップデートによりMavericksに対応したので今は快適に使ってる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macを購入したら絶対に使いたい！超オススメアプリ10選！決定版]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/10/12/terminal/"/>
    <updated>2013-10-12T02:23:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/10/12/terminal</id>
    <content type="html"><![CDATA[<p>さて本日は、MacBookAirを今年に買いかえてから、数々のフリーソフト・シェアウェアを使い続けてきた私が、MacBookを買ったら「絶対に」導入したい、超厳選アプリをランキング形式でご紹介したいと思います！今回は無料で使えるものばかり集めてみましたので、シェアウェアに関しては後日またご紹介したいと思います（＾＾）</p>

<p>それでは、ご覧ください！</p>

<p>↓↓</p>

<!-- more -->




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第10位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>まずは定番、Terminalですね。知る人ぞ知る端末エミュレータです。なんとMac OS Xには<strong>最初から入っています！</strong>端末エミュレータの記事ではないので詳しい説明は避けますが、Terminalはなんと、<strong>マウスを使わずに操作できるという魔法のような操作方法</strong>により世界中に多くのユーザがいます。カフェでドヤ顔したい方はぜひ導入すべきと言えるアプリでしょう。</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第9位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>Macと言えばApple、AppleといえばiPod、iPodといえば音楽です。 そう、せっかくMacを買ったからには、音楽を楽しまなければいけません。デフォルトでインストールされている「iTunes」でもよいのですが、ここはキーボードから小気味よく選曲などの操作をして音楽を聴きたいところです。そんなあなたにオススメなのが、このTerminalというアプリ！なんと、<code>afplay</code>と入力して<em>ごにょごにょ</em>するだけで音楽を聞くことが出来ます！また、Terminalには、おまけとして<a href="http://gyazo.com/3f227e2e46c8b0fee1199f899b2709dd">黒い画面にSLを走らせる</a>！機能も付いているので、カフェでの仕事が捗りますね。</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第8位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>さて、次におすすめしたいのが、Terminalというアプリです。このアプリはいわゆる「テキストエディタ」とも言えます。<code>vim</code>とか<code>emacs</code>とか、よくわからないですけど、ともかくテキストをエディットできます。よくわからないですけど、どちらも使えるので世界は平和です。</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第7位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>さて、WindowsでもMacでも変わらない現代の必須ソフト、それは「ウェブブラウザ」ですね。WindowsだとInternetExplorer、通称IEが標準でインストールされていますが、IEは「ブラウザをダウンロードするための便利なソフト」と揶揄されていたりします（苦笑）</p>

<p>Macに標準でインストールされているブラウザであるSafariはそれほど酷評されているわけではありませんが、やはり自分の手に馴染むブラウザを選択して使っていきたいですよね。</p>

<p><strong>そこでTerminalというアプリです（＾＾）</strong></p>

<p><code>w3m</code>とかいうやつをなんとかどうにかインストールみたいなことすれば、そう、ウェブブラウザです！</p>

<p>あと、<a href="http://gyazo.com/3f227e2e46c8b0fee1199f899b2709dd">SLを走らせたりもできます</a>！</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第6位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>Macには最初からMail.appがインストールされています。しかし、アカウントだの同期だのと面倒ですよね。何も気にせず気持よくメールを送りたいときもあるじゃないですか！</p>

<p>そんなときはTerminalというアプリです。</p>

<p><code>sendmail</code>とか適当に<em>ごにょごにょ</em>すれば、そう、メーラーです！</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第5位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>みなさん！twitterはやってますか？？？</p>

<p>今回5位にランク・インしたのはTerminalというツイッタークライアントです！<code>tw</code>とかを<em>ごにょごにょ</em>すればなんかうまくやってくれるみたいです！</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第4位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>4位です</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第3位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>いよいよトップスリー！第3位は「Terminal」です！世界にはEmacsとVim、2種類のエディタしかないことは有名ですが、Terminalなら両方使えます！</p>

<p>さて、この第3位のTerminalというアプリなのですが、第4位のTerminalと、どちらを3位にしようか、最後まですっご〜〜〜〜〜く悩みました！（笑）（＾＾；） それくらい、TerminalとTerminal、どちらもすごくいいアプリなんです！</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第2位</h2>

<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>さて、惜しくも1位を逃すこととなった第2位は、「Terminal」です！</p>

<p>「Terminal」、中には初めて耳にした方も居るかもしれませんね。一般的に、PCを使う場合は、マウスを使わないと操作することが出来ませんが、このTerminalでは<strong>マウスを使わずにPCを操作すること</strong>が可能とされています。ファイル操作や書類の印刷、なんでもできます！それもそのはず！Terminalは端末エミュレータなんです！端末をエミュレートしてるんですから便利なのはあたりまえかな？</p>

<p>世間には多くの端末エミュレータがありますが、私がおすすめしたいのは、やはりTerminalです。最終的に他の端末エミュレータ、例えばiTermなどを使っていくにしても、「マウスを使わずに色々できる」ことを突き詰めることができるTerminalを経験するのはあなたのPCライフにおいて非情に有意義なものとなるでしょう。</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第1位</h2>

<p>そして栄えある第1位は&hellip;</p>

<br />  




<br />  




<br />  




<br />  




<br />  


<p><img src="/images/terminal.png" alt="terminal" /></p>

<h3>Terminalです！！！！！！</h3>

<br />  




<br />  




<br />  




<br />  


<hr />

<h5>元ネタ</h5>

<ul>
<li><p><a href="http://samuraism.com/2013/10/11/1554">Macを購入したら絶対に導入したい！Windowsを購入しても絶対に導入したい！Linuxをインストールしても絶対に導入したい！超オススメアプリ10選！</a></p></li>
<li><p><a href="http://blog.supermomonga.com/articles/vim/startdash-with-mac.html">Macを購入したら絶対に導入したい！私が3年間で厳選した超オススメアプリ10選！</a></p></li>
<li><p><a href="http://blog.id774.net/post/2013/10/11/408/">Mac を購入したら絶対に導入したい！超オススメアプリ 10 選！</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimを使いやすくする]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/10/12/improve-vim/"/>
    <updated>2013-10-12T01:50:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/10/12/improve-vim</id>
    <content type="html"><![CDATA[<p>Emacs派でEmacsは結構拡張してるけど、vimだってコマンドラインから結構手軽につかってる。なぜならEmacsは起動に時間がかかるし、CocoaEmacsに最適化した設定だからあまりターミナルから起動したくないから。もちろんそこらへんもいろいろ工夫はしてるけど、ほんとにさっくりファイルを弄りたいときなんかは結構vimで弄ったりする。</p>

<p>これまではtabの設定とか最低限の設定をした.vimrcを使ってたんだけど、せっかくだからvimももう少し便利にすることにした。まぁ何かに行き詰まったときにこういう設定をすると仕事してる気になって落ち着くっていう悪い癖なだけな気もする。</p>

<!-- more -->


<h2>.vimrc</h2>

<p><a href="http://blog.digital-bot.com/blog/2013/09/30/macvim-kaoriya/">前回</a>、最新のVim7.4のMacVim-Kaoriyaを入れたお陰<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>でどうやらいくつかのプラグインが強化されてるらしい。まぁ詳しい説明は<a href="http://qiita.com/">Qiita</a>なんかにまかせる。</p>

<p>まぁだらだら書くのもあれなので手っ取り早く<strong>.vim</strong>を晒そう</p>

<h3>リポジトリ</h3>

<ul>
<li><a href="https://github.com/digitalbot/dot-vim">dot-vim</a></li>
</ul>


<p>今回我ながらポイントだと思うのが、READMEのとおりにセットアップすれば大体どの環境(unix系)でも動く汎用的な設定ができたところ。Emacsの設定はとてもじゃないけど、現状自分のMac以外に持ち出せないのでここは少しこだわってみた。</p>

<p>そしてそのセットアップもできる限り簡単に仕上げたつもり。基本的には<code>git clone --recursive</code>して<code>./setup.sh</code>するだけ。簡単。</p>

<pre><code>$ git clone --recursive git://github.com/digitalbot/dot-vim.git
$ cd dot-vim
$ ./setup.sh
$ vim +NeoBundleInstall +q
</code></pre>

<p>READMEからの引用だけど、これで元のvimの挙動をそんなにいじらないけど細かいところで便利なvimができあがる。git cloneの<code>--recursive</code>については<a href="http://blog.digital-bot.com/blog/2013/08/31/git-clone-recursive/">以前書いたとおり</a>。</p>

<p>ともかく、詳しい設定の内容は割愛するけど、<code>NeoBundle</code>、<code>Unite</code>、<code>Lightline</code>、<code>Quickrun</code>とか<code>Neocomplete</code>を導入した。これ以上増やすとEmacsみたいになるので、ここらへんが必要最低限だと思う。ちなみに、<code>if_lua</code>が効かない、つまり古めのvimでもそんときは<code>Neocomplete</code>じゃなく<code>Neocomplcache</code>を使うように条件分岐してるから、ほんとに大体の環境でこの<strong>.vim</strong>は動くはず。</p>

<h2>おわりに</h2>

<p>エディタの拡張は「どこまでやるか」のバランスがとてもむずかしいように思う。<strong>Emacs</strong>ではやりすぎて重たくなってしまってるし(それでもこの記事も<strong>Emacs</strong>で書いてるけど)、できるだけ必要最低限でポータビリティがあるのがカッコイイと最近は思い始めた。あと、全然環境の違う赤の他人が<code>git clone</code>して試せるかどうかを考えてるってもの個人的には渋くてかっこいいと思う。</p>

<p>なお、Lightlineはコマンドラインから<code>mvim</code>してGUIで動かすと変なwarnを出すのでGUIではオフにしている。そこら辺のことはまた別のエントリにしようかと思ってる。</p>

<p>あとvimは引数に<code>+command</code>するとそのコマンドを起動時に実行してくれるらしく、これのお陰で<code>vim +NeoBundleInstall +q</code>といった風にワンライナーでプラグインをインストールできるのが良いと思った。</p>

<p>でもvim scriptはちょっとよくわかんないとも思った。<del>elispのほうが美しい</del></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><code>if_lua</code>が大事らしい
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
