<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | About Digital]]></title>
  <link href="http://blog.digital-bot.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://blog.digital-bot.com/"/>
  <updated>2013-09-03T18:32:59+09:00</updated>
  <id>http://blog.digital-bot.com/</id>
  <author>
    <name><![CDATA[digital_bot]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopressのインストール]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/02/intro-octopress/"/>
    <updated>2013-09-02T21:00:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/02/intro-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://blog.digital-bot.com/blog/2013/09/01/start-octopress/">先のエントリ</a>の通り、Octopressを導入したので導入時に何をしたか、どこにハマったかを残しておこうと思う。</p>

<!-- more -->


<p>このOctopress + GitHub Pagesを使ってのブログ開設ってのは技術的にはもう1、2年前のトレンドっぽいし、最近ではむしろオレオレBlogの実装とかがトレンドっぽいけど<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>、まぁでもともかく<strong>ruby</strong>にも触れてみたかったし、リッチさとシンプルさのバランスから今回はOctopress + GitHub Pagesを採用することにした。</p>

<h2>INSTALL</h2>

<ul>
<li><a href="http://octopress.org/">公式サイト</a></li>
</ul>


<p>インストールは公式の<a href="http://octopress.org/doc/setup/">setupページ</a>を見れば大体問題ないと思うし、なんだったら日本語の解説記事<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>もいろいろあるのでそちらを参考にすれば良いと思う。</p>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress
</code></pre>

<p>基本的には上コマンドを打って、後にモジュールを入れていくだけ。</p>

<p>ただ、一点注意するポイントがあって、<strong>ruby</strong>のバージョンが1.9.3じゃなければいけないことと、<strong>rbenv</strong>で1.9.3を入れててもなんだか</p>

<pre><code>rbenv: version `1.9.3' is not installed
</code></pre>

<p>とか言われてセットアップをすすめることができないこと。</p>

<p>これはおそらくrbenvで管理してるrubyのバージョンが、パッチ番号まで含めたものになってるからだと思う。試しにホームディレクトリかどっかで<code>rbenv versions</code>するとこうなる</p>

<pre><code>$ rbenv versions
  system
  1.9.3-p448
* 2.0.0-p247 (set by /Users/kosuke/.anyenv/envs/rbenv/version)
</code></pre>

<p><code>global</code>は<em>2.0.0-p247</em>を使うことになってるし、<em>1.9.3</em>も<strong>1.9.3-p448</strong>がしっかり入っているので、octopressのディレクトリの<code>.ruby-version</code>がしっかりしていれば特に問題なくセットアップを進めることができるはずだ。んで、試しにその.ruby-versionを見てみるとこうなっていた。</p>

<pre><code>$ cat OCTOPRESSDIR/.ruby-version
1.9.3
</code></pre>

<p>これはもしやと思い</p>

<pre><code>$ echo "1.9.3-p448" &gt; OCTOPRESSDIR/.ruby-version
</code></pre>

<p>とすると無事先のエラーが消えセットアップを進めることができるようになった。なんだかrbenvのエラーが出てハマってるって人はパッチ番号まで含めた.ruby-versionを改めて作ると良いかもしれない。</p>

<p>まぁともかくrbenvの問題を乗り切ればあとは公式の手順通りにに<code>cd octopress</code>した後に</p>

<pre><code>$ gem install bundler #さっきはここでversionについてエラーが出てた
$ rbenv rehash
$ bundle install
$ bundle update
</code></pre>

<p>すればオーケー。</p>

<p><strong>ここで大事なのが</strong>、この時点で（<code>rake install</code>する前に）</p>

<pre><code>$ git add .
$ git commit -m "init ok"
</code></pre>

<p>とでもしてしっかり現状を記録しておくこと。何故なら、後にテーマを変えたり色々プラグインを入れたりしたときに、わけがわからなくなって初期状態に戻したくなることが絶対にあるから。以後、テーマを入れたりプラグインを入れたりするときはブランチを切って気に入ったらマージするなどの作業をすることをお勧めする。</p>

<p>コミットをしたらとりあえず</p>

<pre><code>$ rake install
</code></pre>

<p>すれば準備は万端になるし</p>

<pre><code>$ rake preview
</code></pre>

<p>すれば <a href="http://localhost:4000/">http://localhost:4000/</a> にサーバが立ち上がり初期設定のブログのプレビューが見れるはず。</p>

<h4>Directory_watcherの問題</h4>

<ul>
<li><a href="http://blog.satooshi.jp/blog/2013/04/09/octopress-preview-never-stop-auto-regeneration/">Octopressでpreviewしていたらregeneration: 1 files changedが終わらない場合の対処方法</a></li>
</ul>


<p>ここにあるとおり、Octopressは<code>rake preview</code>でプレビューが見れるのはいいんだけど、なんだかファイル監視システムの不具合でCPU使用率がとんでもないことになってしまうバグが有る。なので<code>Gemfile</code>の中でdirectory_watcherのバージョンを明示してあげよう。</p>

<pre><code>gem "directory_watcher", "~&gt; 1.4.1"
</code></pre>

<p>こうして再度<code>bundle update</code>すればこの問題は解決されるはず。</p>

<h2>おわりに</h2>

<p>あとは他のブログで色々と解説されている通り<code>rake setup_github_pages</code>したり、<code>rake new_post["hoge"]</code>するなりなんなりでブログを書いていけば良いと思う。他にも紹介すべきポイントやgistのズレの問題について書くことはあるんだけど、今回はとりあえずインストールまで書いてみた。</p>

<p>以上。</p>

<p>※ なお、参考に上げたページなどは大変有用だが一部間違った情報などもあるので注意が必要</p>

<h4>参考</h4>

<ul>
<li><p><a href="http://rcmdnk.github.io/blog/2013/03/07/setup-octopress/">GitHub pages + Octopressの導入</a></p></li>
<li><p><a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">GithubとOctopressでモダンな技術系ブログを作ってみる</a></p></li>
</ul>


<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p>例えばPerlでは<a href="http://songmu.github.io/p5-Riji/blog/">riji</a>など。
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://rcmdnk.github.io/blog/2013/03/07/setup-octopress/">http://rcmdnk.github.io/blog/2013/03/07/setup-octopress/</a>
<a href='#fnref:2' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitPrep導入してみた]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/08/31/gitprep-intro/"/>
    <updated>2013-08-31T18:01:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/08/31/gitprep-intro</id>
    <content type="html"><![CDATA[<p>最近、研究室用にgitリポジトリとgitブラウザが欲しいと思って<a href="http://gitprep.org/">GitPrep</a>を導入した。</p>

<p>正直総合力で見てはGithubには劣るけど、逆にあそこまで大掛かりじゃなくシンプルなものが欲しい人にとっては向いてると思う。
けどまぁ最近出来たてのプロダクトってこともあっていくつかはまったことがあるのでここに書いておく。</p>

<p>ちなみに、GitPrepはPerl製GitHubクローンで、この記事は<strong>Perl</strong>や<strong>local::lib</strong><sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>、<strong>Carton</strong><sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>、<strong>Plenv</strong><sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>などが大体わかってる前提で書いてる。でもわからなくても雰囲気でなんとかなる。</p>

<p>あ、ちなみに作業環境としては<strong>CentOS6.3</strong>になる。perlはplenvで個別に入れた<strong>perl5.18</strong>。</p>

<!-- more -->


<h2>install</h2>

<p>基本的には<a href="https://github.com/yuki-kimoto/gitprep/blob/master/README.md">README</a>通りにやれば良いんだけど、<code>git clone</code>してきて、<code>plackup</code>すれば良いと思ったらそうでも無いらしくて困った。
なんていうか、初心者も手軽に使えるようにしてる分、煩雑になってる部分もあると思う。</p>

<p>んじゃまぁとりあえず、と思って<code>carton install</code>すると、確かに<code>local/lib/perl5</code>にモジュールが入るんだけど、それが<code>@INC</code>に入ってないし、<code>carton exec</code>しても実行スクリプトがなんかラップされてるからうまく効かない。</p>

<p>仕方ないから素直に<code>./setup.sh</code>を叩くわけだけど、最初はうまくいったけど、後述するアップデート後になんかうまく動かなくなった。</p>

<p>から、結局</p>

<pre><code>$ rm -rf GITPREPDIR/extlib/lib/perl5
$ mv GITPREPDIR/local/lib/perl5 GITPREPDIR/extlib/lib/
</code></pre>

<p>して、cartonで入れたモジュールを強引に使うようにした。</p>

<p>ひとまずこれで</p>

<pre><code>$ gitprep
</code></pre>

<p>すれば動くようになった。</p>

<h2>daemontools</h2>

<p><code>supervisor</code>も使ってみたかったけど、ここは<code>daemontools</code>にした。</p>

<p>daemontools自体のインストールは<a href="http://upsnap.jp/archives/show/96">ココ</a>とかが参考になる。
で、ともかくデーモン化して運用したいわけだけど、daemontools久しぶりに設定したせいですごいハマってた。
具体的には、daemontoolsでデーモン化するにはフォアグラウンドのプロセスじゃなきゃだめなこと忘れてた。</p>

<p>幸いにも、実行スクリプトである<code>gitprep</code>(これは実際には<code>hypnotoad</code>のラップ)にもフォアグラウンドオプションがありそれをつけることで解決。</p>

<p>ついでに書いたrunスクリプトを貼っておく。</p>

<p><div><script src='https://gist.github.com/670631b4bd8e6751ffdc.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<h2>update</h2>

<p><code>revision:a80b1a7209</code>あたりからREADMEがマークダウンに対応したのでgitprepをアップデートした。ドキュメントを見る限り、そのまま置き換えたりアップデートしても大丈夫そうなのでそうした。</p>

<pre><code>$ git pull
</code></pre>

<p>するとやはり特に不自由なくgitprepが最新になった。</p>

<p>しかし、これでさらに捗るぞと思って改めてブラウザからリポジトリにアクセスしたらエラーが出てしまった。こういうときはログを見るに限る。</p>

<pre><code>$ less GITPREPDIR/log/production.log
</code></pre>

<p>もちろん<code>tail -f</code>でもいいけど、ともかくログをみると<code>Text::Markdown</code>モジュールが無くて死んでるっぽいので再度<code>./setup.sh</code>を動かすことに。
しかしなんだか謎のエラーを吐いてモジュールがインストールできない。もちろんインストール先は必ずしも<code>extlib</code>以下じゃなくてもいいんだけど、ここまで来たらうまいことまとめたい。
そこで#installの項にも書いたけど<code>carton install</code>してそれを<code>mv</code>することで解決した。</p>

<h2>Basic Auth</h2>

<p>GitPrepを導入した理由に、プライベートで決められた人だけに公開できるgitリポジトリが欲しいっていうのがあったので認証をかけたかったんだけど、このGitPrep、サインインなどのシステムはあるもののリポジトリそのものを見えなくしたり、cloneを防いだりする機構は現在無いみたい。</p>

<p>そこで<code>nginx</code><sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>側でベーシック認証をかけることにした。</p>

<p><div><script src='https://gist.github.com/d4fd11c829066925bfb9.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>基本的には</p>

<pre><code>auth_basic "hoge";
auth_basic_user_file "/path/to/file";
</code></pre>

<p>を書くだけでnginxではベーシック認証がかかるみたい。だもんで</p>

<pre><code>$ mkdir -p /usr/local/nginx/htpasswd
$ htpasswd -nb user pass &gt; /usr/local/nginx/htpasswd/gitprep
</code></pre>

<p>とでもして、上gistの中のでのファイルパスに指定するだけ。</p>

<p>nginxのconfの書き方自体は適当にググって欲しい。とりあえず自分はprefixを<code>/usr/local/nginx</code>にしてたり、<code>general.conf</code>に共通設定をまとめたりしてる。
あと当然gitprepはリバースプロキシで動いてるからその設定が最下部のブロックになる。</p>

<h2>以上</h2>

<p>つらつらとGitPrep導入にあたって何をしたか書いてみたけど思ったより長くなってしまった。
あまり調べずに結構適当に書いてしまったので、もしかしたらもっとうまい方法やそもそもやり方がおかしい部分もあるかもしれない。</p>

<p>実際他にもよくわかってないところや不具合なんかもあるんだけど、それはまた別にまとめるとする。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p>perlでモジュールを任意の場所にインストール・使用するモジュール。<a href="http://gihyo.jp/dev/serial/01/modern-perl/0018">参考URL</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p>perlでwebアプリごとにモジュールをインストール・管理するモジュール。<a href="http://blog.64p.org/entry/2013/08/06/112350">参考URL</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p>perl自体を簡単にインストール・管理するツール。<a href="http://blog.papix.net/entry/2013/01/21/210327">参考URL</a>
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p>webサーバ。なんかモダンだってことで最近はApacheより使うかも。<a href="http://nginx.org/ja/">参考URL</a>
<a href='#fnref:4' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git clone --recursive便利]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/08/31/git-clone-recursive/"/>
    <updated>2013-08-31T13:06:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/08/31/git-clone-recursive</id>
    <content type="html"><![CDATA[<p>この前サブモジュールを含んだリポジトリを<code>git clone</code>してきてなんかうまく動かなくて困った。<br/>
んで調べたらサブモジュールはデフォルトでは一緒にクローンしてきてくれないらしい。<br/>
そういうときは</p>

<pre><code>$ git clone git://hoge/fuga.git
$ git submodule init
$ git submodule update
</code></pre>

<p>すれば良いらしいことがわかった。</p>

<p>まぁこれで済むならそれでいいやと思ってしばらく運用してたんだけど、どうやら<code>git clone</code>には<code>--recursive</code>なんていうオプションがあるらしいことを知った。つまり</p>

<pre><code>$ git clone --recursive git://hoge/fuga.git
</code></pre>

<p>だけでさっきと同じことが一行ですませられるらしい。これは便利だ。</p>

<h2>ちなみに</h2>

<p>gitのサブモジュールは<code>git submodule add</code>した時点でのcommit情報しかもってないから、サブモジュール自体を最新にしたい場合また別の操作が必要みたい</p>

<h4>参考</h4>

<p><a href="http://rochefort.hatenablog.com/entry/20110410/p1">git submoduleの更新</a></p>
]]></content>
  </entry>
  
</feed>
