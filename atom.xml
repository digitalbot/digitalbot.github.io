<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[About Digital]]></title>
  <link href="http://blog.digital-bot.com/atom.xml" rel="self"/>
  <link href="http://blog.digital-bot.com/"/>
  <updated>2014-02-15T03:10:46+09:00</updated>
  <id>http://blog.digital-bot.com/</id>
  <author>
    <name><![CDATA[digital_bot]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mavericksで使えなくなったCandyBarを使えるようにしてアイコンを変える]]></title>
    <link href="http://blog.digital-bot.com/blog/2014/02/07/use-candybar-with-mavericks/"/>
    <updated>2014-02-07T01:46:25+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2014/02/07/use-candybar-with-mavericks</id>
    <content type="html"><![CDATA[<p><a href="http://candybar.softonic.jp/mac">CandyBar</a>というMacのアイコンを変えるアプリがあるんだけど、これがMavericksになってから使えなくなった。もともと、MountainLionあたりから結構アイコンとかを変えることにたいして難しい感じになってたらしくて、それが原因で無料アプリになったらしいんだけど、Mavericksになってついに動かなくなって、困ってた。</p>

<p>使うとこんな感じにアイコンを変えられる。もともと、MacではFinderから<code>⌘-i</code>で詳細を表示して、そこに表示されるアイコンに適用したいアイコンをドロップしたらアイコンを変更できるけど、CandyBarを使うと一括で出来るのが良い感じ。</p>

<p><img src="http://gyazo.com/0db224c12ddfb0594be83ae7767d6421.png" alt="こんな感じ" /></p>

<p>なんだけど、ともかくMavericsにしたとたん使えなくて困ってたのが、なんとか使う方法を見つけたのでメモする。</p>

<!-- more -->


<h2>やりかた</h2>

<p>まず、エディタは何使っても良いけど</p>

<pre><code>$ sudo emacs /System/Library/CoreServices/SystemVersion.plist 
</code></pre>

<p>する。そしたら</p>

<pre><code>&lt;string&gt;10.9.1&lt;/string&gt;
</code></pre>

<p>ってバージョンっぽい数字が書いてあるタグが二つあるから</p>

<p><img src="http://gyazo.com/61481b844b2a8d7ce15cceeda0db3c2a.png" alt="10.9.1を" /></p>

<p>それを</p>

<pre><code>&lt;string&gt;10.8&lt;/string&gt;
</code></pre>

<p>に変える。</p>

<p><img src="http://gyazo.com/f1fdadb835b87c239ed924288de9168e.png" alt="10.8に" /></p>

<p>後は保存して、ファイルを閉じる。readonly属性ついてると思うけど、まぁそれはなんとかする(emacsだったら<code>C-x C-q</code>)。</p>

<p>そしたらもうCandyBarが使えるようになってて、自分の好きなようにアイコンを変えればOK。</p>

<p>なんだけど、ここでアイコンにキャッシュが効いてるようなので、<a href="http://onyx.softonic.jp/mac">Onyx</a>あたりでユーザキャッシュを消す必要がある。</p>

<p>それが終わったら再起動すればアイコンが変わってるはず。変わってることが確認できたらまた</p>

<pre><code>$ sudo emacs /System/Library/CoreServices/SystemVersion.plist
</code></pre>

<p>して、もとあったように<code>10.9.1</code>に戻してあげれば良い。</p>

<h2>むすび</h2>

<p>App Storeで売ってる(¥1300もする！)IconBoxってのも使ってみたんだけど、やっぱりCandyBarが楽で良かった。ディレクトリアイコンっていじれると地味にうれしい場所だからこういうアプリの開発者はあきらめないで欲しい。</p>

<h4>参考</h4>

<ul>
<li><a href="http://idevicedailys.com/os-x/howto-use-candybar-os-x-mavericks/">howto use candybar os x mavericks</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mavericksに入らなくて困ってたdbd-mysqlが入った]]></title>
    <link href="http://blog.digital-bot.com/blog/2014/02/06/can-install-dbd-mysql/"/>
    <updated>2014-02-06T22:54:48+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2014/02/06/can-install-dbd-mysql</id>
    <content type="html"><![CDATA[<p><a href="http://blog.digital-bot.com/blog/2013/11/02/dbd-mysql-on-mavericks/">以前の記事</a>
で入らなくて困ってたDBD::mysqlがインストールできた．</p>

<p>DBD::mysqlのバージョンアップのおかげかmysqlのバージョンアップのおかげか。</p>

<p>過去の記事からとくにこちらではなんもしてないけど、入ってよかった。</p>

<h2>とりあえずログ</h2>

<!-- more -->




<div><script src='https://gist.github.com/8843600.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code>[digitalbot@PC-0111:~]$ cpanm DBD::mysql -v
cpanm (App::cpanminus) 1.7001 on perl 5.018001 built for darwin-thread-multi-2level
Work directory is /Users/digitalbot/.cpanm/work/1391579356.37018
You have make /usr/bin/make
You have LWP 6.05
You have /usr/bin/tar: bsdtar 2.8.3 - libarchive 2.8.3
You have /usr/bin/unzip
Searching DBD::mysql on cpanmetadb ...
--&gt; Working on DBD::mysql
Fetching http://www.cpan.org/authors/id/C/CA/CAPTTOFU/DBD-mysql-4.026.tar.gz ... OK
Unpacking DBD-mysql-4.026.tar.gz
x DBD-mysql-4.026/
x DBD-mysql-4.026/META.yml
x DBD-mysql-4.026/Makefile.PL
x DBD-mysql-4.026/myld
x DBD-mysql-4.026/Makefile.PL.embedded
x DBD-mysql-4.026/t/
x DBD-mysql-4.026/t/65types.t
x DBD-mysql-4.026/t/70takeimp.t
x DBD-mysql-4.026/t/51bind_type_guessing.t
x DBD-mysql-4.026/t/71impdata.t
x DBD-mysql-4.026/t/mysql.dbtest
x DBD-mysql-4.026/t/00base.t
x DBD-mysql-4.026/t/85init_command.t
x DBD-mysql-4.026/t/40listfields.t
x DBD-mysql-4.026/t/rt83494-quotes-comments.t
x DBD-mysql-4.026/t/76multi_statement.t
x DBD-mysql-4.026/t/87async.t
x DBD-mysql-4.026/t/40catalog.t
x DBD-mysql-4.026/t/52comment.t
x DBD-mysql-4.026/t/rt86153-reconnect-fail-memory.t
x DBD-mysql-4.026/t/31insertid.t
x DBD-mysql-4.026/t/60leaks.t
x DBD-mysql-4.026/t/40types.t
x DBD-mysql-4.026/t/75supported_sql.t
x DBD-mysql-4.026/t/65segfault.t
x DBD-mysql-4.026/t/43count_params.t
x DBD-mysql-4.026/t/pod.t
x DBD-mysql-4.026/t/rt85919-fetch-lost-connection.t
x DBD-mysql-4.026/t/53comment.t
x DBD-mysql-4.026/t/41blobs_prepare.t
x DBD-mysql-4.026/t/29warnings.t
x DBD-mysql-4.026/t/81procs.t
x DBD-mysql-4.026/t/35prepare.t
x DBD-mysql-4.026/t/99_bug_server_prepare_blob_null.t
x DBD-mysql-4.026/t/20createdrop.t
x DBD-mysql-4.026/t/40server_prepare.t
x DBD-mysql-4.026/t/40keyinfo.t
x DBD-mysql-4.026/t/rt25389-bin-case.t
x DBD-mysql-4.026/t/rt50304-column_info_parentheses.t
x DBD-mysql-4.026/t/50commit.t
x DBD-mysql-4.026/t/25lockunlock.t
x DBD-mysql-4.026/t/manifest.t
x DBD-mysql-4.026/t/40nulls.t
x DBD-mysql-4.026/t/mysql.mtest
x DBD-mysql-4.026/t/40bindparam2.t
x DBD-mysql-4.026/t/40nulls_prepare.t
x DBD-mysql-4.026/t/15reconnect.t
x DBD-mysql-4.026/t/lib.pl
x DBD-mysql-4.026/t/50chopblanks.t
x DBD-mysql-4.026/t/89async-method-check.t
x DBD-mysql-4.026/t/32insert_error.t
x DBD-mysql-4.026/t/10connect.t
x DBD-mysql-4.026/t/40blobs.t
x DBD-mysql-4.026/t/42bindparam.t
x DBD-mysql-4.026/t/80procs.t
x DBD-mysql-4.026/t/41bindparam.t
x DBD-mysql-4.026/t/rt91715.t
x DBD-mysql-4.026/t/88async-multi-stmts.t
x DBD-mysql-4.026/t/40bindparam.t
x DBD-mysql-4.026/t/90no-async.t
x DBD-mysql-4.026/t/30insertfetch.t
x DBD-mysql-4.026/t/40numrows.t
x DBD-mysql-4.026/t/40server_prepare_error.t
x DBD-mysql-4.026/t/35limit.t
x DBD-mysql-4.026/t/55utf8.t
x DBD-mysql-4.026/t/91errcheck.t
x DBD-mysql-4.026/t/86_bug_36972.t
x DBD-mysql-4.026/eg/
x DBD-mysql-4.026/eg/proc_example2.pl
x DBD-mysql-4.026/eg/bug30033pg.pl
x DBD-mysql-4.026/eg/bigint_quotes.pl
x DBD-mysql-4.026/eg/bug30033.pl
x DBD-mysql-4.026/eg/decimal_test.pl
x DBD-mysql-4.026/eg/proc_example3.pl
x DBD-mysql-4.026/eg/bug14979.pl
x DBD-mysql-4.026/eg/proc_example2b.pl
x DBD-mysql-4.026/eg/proc_example1.pl
x DBD-mysql-4.026/eg/proc_example2a.pl
x DBD-mysql-4.026/eg/bug21028.pl
x DBD-mysql-4.026/eg/issue21946.pl
x DBD-mysql-4.026/eg/proc_example4.pl
x DBD-mysql-4.026/eg/prepare_memory_usage.pl
x DBD-mysql-4.026/MANIFEST
x DBD-mysql-4.026/dbdimp.c
x DBD-mysql-4.026/README.pod
x DBD-mysql-4.026/mysql.xs
x DBD-mysql-4.026/TODO
x DBD-mysql-4.026/constants.h
x DBD-mysql-4.026/ChangeLog
x DBD-mysql-4.026/MANIFEST.SKIP
x DBD-mysql-4.026/lib/
x DBD-mysql-4.026/lib/DBD/
x DBD-mysql-4.026/lib/DBD/mysql/
x DBD-mysql-4.026/lib/DBD/mysql/INSTALL.pod
x DBD-mysql-4.026/lib/DBD/mysql/GetInfo.pm
x DBD-mysql-4.026/lib/DBD/mysql.pm
x DBD-mysql-4.026/lib/Bundle/
x DBD-mysql-4.026/lib/Bundle/DBD/
x DBD-mysql-4.026/lib/Bundle/DBD/mysql.pm
x DBD-mysql-4.026/dbdimp.h
Entering DBD-mysql-4.026
Checking configure dependencies from META.yml
Checking if you have DBI 1.08 ... Yes (1.631)
Running Makefile.PL
Configuring DBD-mysql-4.026 ... 

PLEASE NOTE:

For &#39;make test&#39; to run properly, you must ensure that the
database user &#39;digitalbot&#39; can connect to your MySQL server
and has the proper privileges that these tests require such
as &#39;drop table&#39;, &#39;create table&#39;, &#39;drop procedure&#39;, &#39;create procedure&#39;
as well as others.

mysql&gt; grant all privileges on test.* to &#39;digitalbot&#39;@&#39;localhost&#39; identified by &#39;s3kr1t&#39;;

You can also optionally set the user to run &#39;make test&#39; with:

perl Makefile.PL --testuser=username

I will use the following settings for compiling and testing:

  cflags        (mysql_config) = -I/usr/local/Cellar/mysql/5.6.16/include/mysql  -Os -g -fno-strict-aliasing
  embedded      (mysql_config) = 
  ldflags       (mysql_config) = 
  libs          (mysql_config) = -L/usr/local/Cellar/mysql/5.6.16/lib -lmysqlclient
  mysql_config  (guessed     ) = mysql_config
  nocatchstderr (default     ) = 0
  nofoundrows   (default     ) = 0
  ssl           (guessed     ) = 0
  testdb        (default     ) = test
  testhost      (default     ) = 
  testpassword  (default     ) = 
  testport      (default     ) = 
  testsocket    (default     ) = 
  testuser      (guessed     ) = digitalbot

To change these settings, see &#39;perl Makefile.PL --help&#39; and
&#39;perldoc DBD::mysql::INSTALL&#39;.

Checking if your kit is complete...
Warning: the following files are missing in your kit:
    META.json
Please inform the author.
Using DBI 1.631 (for perl 5.018001 on darwin-thread-multi-2level) installed in /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/site_perl/5.18.1/darwin-thread-multi-2level/auto/DBI/
Generating a Unix-style Makefile
Writing Makefile for DBD::mysql
Writing MYMETA.yml and MYMETA.json
OK
Checking dependencies from MYMETA.json ...
Checking if you have Test::Deep 0 ... Yes (0.112)
Checking if you have Data::Dumper 0 ... Yes (2.145)
Checking if you have DBI 1.08 ... Yes (1.631)
Checking if you have Test::More 0 ... Yes (1.001002)
Building and testing DBD-mysql-4.026 ... cp README.pod blib/lib/DBD/README.pod
cp lib/DBD/mysql.pm blib/lib/DBD/mysql.pm
cp lib/Bundle/DBD/mysql.pm blib/lib/Bundle/DBD/mysql.pm
cp lib/DBD/mysql/INSTALL.pod blib/lib/DBD/mysql/INSTALL.pod
cp lib/DBD/mysql/GetInfo.pm blib/lib/DBD/mysql/GetInfo.pm
Running Mkbootstrap for DBD::mysql ()
chmod 644 mysql.bs
cc -c  -I/Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/site_perl/5.18.1/darwin-thread-multi-2level/auto/DBI -I/usr/local/Cellar/mysql/5.6.16/include/mysql  -Os -g -fno-strict-aliasing -DDBD_MYSQL_INSERT_ID_IS_GOOD -g  -fno-common -DPERL_DARWIN -arch x86_64 -fPIC -DDEBUGGING -fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include -g -pipe -Os   -DVERSION=\&quot;4.026\&quot; -DXS_VERSION=\&quot;4.026\&quot;  &quot;-I/Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/5.18.1/darwin-thread-multi-2level/CORE&quot;   dbdimp.c
dbdimp.c:3676:22: warning: incompatible pointer types assigning to &#39;my_bool *&#39; (aka &#39;char *&#39;) from &#39;bool *&#39;
      [-Wincompatible-pointer-types]
      buffer-&gt;is_null= &amp;(fbh-&gt;is_null);
                     ^ ~~~~~~~~~~~~~~~
1 warning generated.
/Users/digitalbot/.anyenv/envs/plenv/versions/5.18/bin/perl5.18.1 -p -e &quot;s/~DRIVER~/mysql/g&quot; /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/site_perl/5.18.1/darwin-thread-multi-2level/auto/DBI/Driver.xst &gt; mysql.xsi
/Users/digitalbot/.anyenv/envs/plenv/versions/5.18/bin/perl5.18.1 /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/site_perl/5.18.1/ExtUtils/xsubpp  -typemap /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/5.18.1/ExtUtils/typemap  mysql.xs &gt; mysql.xsc &amp;&amp; mv mysql.xsc mysql.c
Warning: duplicate function definition &#39;do&#39; detected in mysql.xs, line 242
Warning: duplicate function definition &#39;rows&#39; detected in mysql.xs, line 754
cc -c  -I/Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/site_perl/5.18.1/darwin-thread-multi-2level/auto/DBI -I/usr/local/Cellar/mysql/5.6.16/include/mysql  -Os -g -fno-strict-aliasing -DDBD_MYSQL_INSERT_ID_IS_GOOD -g  -fno-common -DPERL_DARWIN -arch x86_64 -fPIC -DDEBUGGING -fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include -g -pipe -Os   -DVERSION=\&quot;4.026\&quot; -DXS_VERSION=\&quot;4.026\&quot;  &quot;-I/Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/5.18.1/darwin-thread-multi-2level/CORE&quot;   mysql.c
mysql.xs:933:38: warning: format specifies type &#39;int&#39; but the argument has type &#39;SV *&#39; (aka &#39;struct sv *&#39;) [-Wformat]
                croak(&quot;Unknown SQL Info type: %i&quot;,dbh);
                                              ~~  ^~~
1 warning generated.
rm -f blib/arch/auto/DBD/mysql/mysql.bundle
LD_RUN_PATH=&quot;/usr/local/Cellar/mysql/5.6.16/lib&quot; /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/bin/perl5.18.1 myld env MACOSX_DEPLOYMENT_TARGET=10.3 cc -arch x86_64  -bundle -undefined dynamic_lookup -L/usr/local/lib -fstack-protector dbdimp.o mysql.o  -o blib/arch/auto/DBD/mysql/mysql.bundle    \
       -L/usr/local/Cellar/mysql/5.6.16/lib -lmysqlclient   \
      
chmod 755 blib/arch/auto/DBD/mysql/mysql.bundle
/Users/digitalbot/.anyenv/envs/plenv/versions/5.18/bin/perl5.18.1 -MExtUtils::Command::MM -e &#39;cp_nonempty&#39; -- mysql.bs blib/arch/auto/DBD/mysql/mysql.bs 644
Manifying blib/man3/DBD::README.3
Manifying blib/man3/Bundle::DBD::mysql.3
Manifying blib/man3/DBD::mysql.3
Manifying blib/man3/DBD::mysql::INSTALL.3
Running Mkbootstrap for DBD::mysql ()
chmod 644 mysql.bs
PERL_DL_NONLAZY=1 /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/bin/perl5.18.1 &quot;-MExtUtils::Command::MM&quot; &quot;-MTest::Harness&quot; &quot;-e&quot; &quot;undef *Test::Harness::Switches; test_harness(0, &#39;blib/lib&#39;, &#39;blib/arch&#39;)&quot; t/*.t
t/00base.t ........................... ok   
t/10connect.t ........................ ok   
t/15reconnect.t ...................... ok     
t/20createdrop.t ..................... ok   
t/25lockunlock.t ..................... ok     
t/29warnings.t ....................... ok     
t/30insertfetch.t .................... ok     
t/31insertid.t ....................... ok     
t/32insert_error.t ................... ok   
t/35limit.t .......................... ok       
t/35prepare.t ........................ ok     
t/40bindparam.t ...................... ok     
t/40bindparam2.t ..................... ok     
t/40blobs.t .......................... ok     
t/40catalog.t ........................ ok     
t/40keyinfo.t ........................ ok   
t/40listfields.t ..................... ok     
t/40nulls.t .......................... ok     
t/40nulls_prepare.t .................. ok     
t/40numrows.t ........................ ok     
t/40server_prepare.t ................. ok     
t/40server_prepare_error.t ........... ok   
t/40types.t .......................... ok    
t/41bindparam.t ...................... ok     
t/41blobs_prepare.t .................. ok     
t/42bindparam.t ...................... ok     
t/43count_params.t ................... ok     
t/50chopblanks.t ..................... ok     
t/50commit.t ......................... ok     
t/51bind_type_guessing.t ............. ok     
t/52comment.t ........................ ok     
t/53comment.t ........................ ok     
t/55utf8.t ........................... ok     
t/60leaks.t .......................... skipped: Skip $ENV{EXTENDED_TESTING} is not set
t/65segfault.t ....................... ok   
t/65types.t .......................... ok     
t/70takeimp.t ........................ ok     
t/71impdata.t ........................ ok     
t/75supported_sql.t .................. ok     
t/76multi_statement.t ................ 1/25 # Testing multicall against SQL_DBMS_VER: 5.6.16-log
t/76multi_statement.t ................ ok     
t/80procs.t .......................... ok     
t/81procs.t .......................... ok     
t/85init_command.t ................... ok   
t/86_bug_36972.t ..................... ok     
t/87async.t .......................... ok     
t/88async-multi-stmts.t .............. ok   
t/89async-method-check.t ............. ok       
t/90no-async.t ....................... skipped: Async support was built into this version of DBD::mysql
t/91errcheck.t ....................... ok   
t/99_bug_server_prepare_blob_null.t .. ok     
t/manifest.t ......................... skipped: these tests are for release testing
t/pod.t .............................. skipped: Test::Pod 1.00 required for testing POD
t/rt25389-bin-case.t ................. ok   
t/rt50304-column_info_parentheses.t .. ok   
t/rt83494-quotes-comments.t .......... ok   
t/rt85919-fetch-lost-connection.t .... ok   
t/rt86153-reconnect-fail-memory.t .... skipped: Skip $ENV{EXTENDED_TESTING} is not set
t/rt91715.t .......................... ok   
All tests successful.
Files=58, Tests=1312, 34 wallclock secs ( 0.39 usr  0.14 sys +  4.90 cusr  0.66 csys =  6.09 CPU)
Result: PASS
Files found in blib/arch: installing files in blib/lib into architecture dependent library tree
Installing /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/site_perl/5.18.1/darwin-thread-multi-2level/auto/DBD/mysql/mysql.bundle
Installing /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/site_perl/5.18.1/darwin-thread-multi-2level/Bundle/DBD/mysql.pm
Installing /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/site_perl/5.18.1/darwin-thread-multi-2level/DBD/mysql.pm
Installing /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/site_perl/5.18.1/darwin-thread-multi-2level/DBD/README.pod
Installing /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/site_perl/5.18.1/darwin-thread-multi-2level/DBD/mysql/GetInfo.pm
Installing /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/site_perl/5.18.1/darwin-thread-multi-2level/DBD/mysql/INSTALL.pod
Installing /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/man/man3/Bundle::DBD::mysql.3
Installing /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/man/man3/DBD::mysql.3
Installing /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/man/man3/DBD::mysql::INSTALL.3
Installing /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/man/man3/DBD::README.3
Appending installation info to /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/5.18.1/darwin-thread-multi-2level/perllocal.pod
OK
Successfully installed DBD-mysql-4.026
Installing /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/site_perl/5.18.1/darwin-thread-multi-2level/.meta/DBD-mysql-4.026/install.json
Installing /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/site_perl/5.18.1/darwin-thread-multi-2level/.meta/DBD-mysql-4.026/MYMETA.json
1 distribution installed
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MavericksのEmacs24.3がくっそ重くなる件]]></title>
    <link href="http://blog.digital-bot.com/blog/2014/01/22/emacs-distnoted/"/>
    <updated>2014-01-22T23:27:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2014/01/22/emacs-distnoted</id>
    <content type="html"><![CDATA[<p>表題の件。</p>

<blockquote class="twitter-tweet"><p>mavericksにしてからdistnotedってプロセスが暴れまわるしブラウザはカクカクだしEmacsは落ちるしツライ。昔のSnowLeopard機だったからだと思いたい</p>&mdash; kskexit (@kskexit) <a href="https://twitter.com/kskexit/statuses/400209172551065600">November 12, 2013</a></blockquote>


<script async src="http://blog.digital-bot.com//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>マジでこれ <a href="https://t.co/3PwGiDRTih">https://t.co/3PwGiDRTih</a></p>&mdash; kskexit (@kskexit) <a href="https://twitter.com/kskexit/statuses/401254523584270337">November 15, 2013</a></blockquote>


<script async src="http://blog.digital-bot.com//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>Emacsが落ちた……つらい……&#10;最近コレしか言ってない気がする</p>&mdash; kskexit (@kskexit) <a href="https://twitter.com/kskexit/statuses/402736969123237888">November 19, 2013</a></blockquote>


<script async src="http://blog.digital-bot.com//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>ていうかEmacsが落ちたらdistnotedのCPU使用率やメモリ使用量も減った</p>&mdash; kskexit (@kskexit) <a href="https://twitter.com/kskexit/statuses/402737139034492928">November 19, 2013</a></blockquote>


<script async src="http://blog.digital-bot.com//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>emacsが落ちるの噂のAppNapのせいかと思ってウキウキしてAppNapオフにしようと思ったら、できなかった。というかもともとオフっぽい…？</p>&mdash; kskexit (@kskexit) <a href="https://twitter.com/kskexit/statuses/408166401245868033">December 4, 2013</a></blockquote>


<script async src="http://blog.digital-bot.com//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>Emacsさんがメモリを2Gも使おうとするのは良くないのでほんとそろそろなんとかしたいところ。最近これしか言ってないな</p>&mdash; kskexit (@kskexit) <a href="https://twitter.com/kskexit/statuses/413232659922305024">December 18, 2013</a></blockquote>


<script async src="http://blog.digital-bot.com//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>会社で使ってるMavericksのCocoaEmacs、3時間くらいつかってるとメモリ1GBとか食い始めるし、distnotedとかいうプロセスもメモリ馬鹿食いし始める。それが怖くて自分のMBAをMountain Lionから更新できない</p>&mdash; kskexit (@kskexit) <a href="https://twitter.com/kskexit/statuses/423377591299346432">January 15, 2014</a></blockquote>


<script async src="http://blog.digital-bot.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とMavericksにしてから非常に困ってたんだけど</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/kskexit">@kskexit</a> emacsのメモリーリークみたいです。trunkでは直ってますが23.3はここにあるパッチが必要です。&#10;<a href="http://t.co/XrjAoZ2eQd">http://t.co/XrjAoZ2eQd</a></p>&mdash; さむ (@mogu) <a href="https://twitter.com/mogu/statuses/425865613811007489">January 22, 2014</a></blockquote>


<script async src="http://blog.digital-bot.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とのことで、なんだか解決したっぽい。</p>

<hr />

<p>Emacs24.4では直ってるらしいのではやく24.4がでてほしいとは思う。</p>

<h4>参考</h4>

<p>この記事書いてるときに、同じ悩みを持ってる人のブログも見つけた。</p>

<ul>
<li><a href="http://blog.n-z.jp/blog/2013-12-27-emacs-inline-patch.html">distnotedの暴走が止まるというCocoa Emacsのinline patch修正版を使ってみた</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Audio APIを使ってストリーム入出力してみた]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/12/11/web-audio/"/>
    <updated>2013-12-11T02:17:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/12/11/web-audio</id>
    <content type="html"><![CDATA[<h3>2013/12/10時点での話</h3>

<blockquote><p><a href="http://www.mozilla.jp/blog/entry/10338/">Firefox に Web Audio API が採用され、Web が完全なゲームプラットフォームになりました</a></p>

<p><a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html">Web Audio API W3C Editor&rsquo;s Draft</a></p></blockquote>

<p>ということだったので触ってみた。</p>

<ul>
<li><p>環境</p>

<ul>
<li><p>Mac OS X MountainLion</p></li>
<li><p>FireFox 25.0.1</p></li>
</ul>
</li>
</ul>


<div><script src='https://gist.github.com/7894336.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
    &lt;title&gt;SAMPLE&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;audio id=&quot;audio&quot;&gt;ok?&lt;/audio&gt;
    &lt;script&gt;
     navigator.getUserMedia = navigator.getUserMedia
     || navigator.webkitGetUserMedia
     || navigator.mozGetUserMedia;
     window.AudioContext = window.AudioContext
     || window.webkitAudioContext
     || window.mozAudioContext;

     navigator.getUserMedia({audio:true}, function(stream) {
       var audio = document.getElementById(&#39;audio&#39;);
       var context = new AudioContext();
       var mediaStreamSource = context.createMediaStreamSource(stream);
       var filter = context.createBiquadFilter();
       mediaStreamSource.connect(filter);
       filter.type = 0;
       filter.frequency.value = 1000;
       var delay = context.createDelay(1.0);
       filter.connect(delay);
       delay.connect(context.destination);
     }, function() {
       alert(&#39;error&#39;);
     });
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre></noscript></div>


<h2>注意点</h2>

<ul>
<li><p>ブラウザやバージョンによって本当に挙動が違う</p>

<ul>
<li>fire fox 25でもなんだかたまに不安定(な気がする)</li>
</ul>
</li>
</ul>


<p>マイク入力からWeb Audio APIを使うにはいくつか方法があるんだけど</p>

<p>今回は<code>context.createMediaStreamSouce()</code>に<code>stream</code>を渡したあと、最終的に<code>context.destination</code>をフィルタなりソースに渡せばOK。</p>

<p>マイク入力じゃなくてmp3ファイルとかを読み込んで使うときは<code>source.start()</code>とかするんだけど、ストリーミングのときは<code>context.destination</code>までで大丈夫。</p>

<p>※ちなみにネット上によくあるサンプルなどの<code>souce.noteOn()</code>はduplicatedのもよう。</p>

<h2>まとめ</h2>

<p>本格的な信号処理も可能のようだし、WebRTCをガッツリ触ってP2Pで情報のやりとりとかできればなかなかおもしろいことができそう。</p>

<p>ところで、gistのスタイルが汚いのはあとでなんとかしないとな&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/11/16/test/"/>
    <updated>2013-11-16T00:46:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/11/16/test</id>
    <content type="html"><![CDATA[<h3>TEST</h3>

<div><script src='https://gist.github.com/7332987.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code>#include &lt;stdio.h&gt;

void func_a(int (*ref_array)[10]) {
    printf(&quot;[func called]\n&quot;);
    printf(&quot;sizeof *ref_array: %lu\n&quot;, sizeof *ref_array);
    printf(&quot;sizeof (*ref_array)[0]: %lu\n&quot;, sizeof (*ref_array)[0]);
    printf(&quot;sizeof *ref_array / sizeof (*ref_array)[0]: %lu\n&quot;, sizeof *ref_array / sizeof (*ref_array)[0]);
    for (int i=0; i&lt;sizeof *ref_array / sizeof (*ref_array)[0]; i++) {
        printf(&quot;%d: %d\n&quot;, i, (*ref_array)[i]);
    }
}

void func_b(int *array) {
    printf(&quot;[func called]\n&quot;);
    printf(&quot;sizeof array: %lu\n&quot;, sizeof array);
    printf(&quot;sizeof array[0]: %lu\n&quot;, sizeof array[0]);
    printf(&quot;sizeof array / sizeof array[0]: %lu\n&quot;, sizeof array / sizeof array[0]);
    printf(&quot;%d: %d\n&quot;, 0, array[0]);
    printf(&quot;%d: %d\n&quot;, 1, array[1]);
}

int main(int argc, char *argv[]) {
    int array[10];
    printf(&quot;sizeof array: %lu\n&quot;, sizeof array);
    printf(&quot;sizeof array[0]: %lu\n&quot;, sizeof array[0]);
    printf(&quot;sizeof array / sizeof array[0]: %lu\n&quot;, sizeof array / sizeof array[0]);
    for (int i=0; i&lt;sizeof array / sizeof array[0]; i++) {
        printf(&quot;%d\n&quot;, i);
        array[i] = i + 100;
    }
    func_a(&amp;array);
    func_b(array);
    return 0;
}
</code></pre></noscript></div>


<ul>
<li>layout ok?</li>
</ul>


<p>octopressをアップデートしたからテストしてるだけ。gistにも特に意味は無い。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OctopressにOEmbedプラグインを導入した]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/11/07/oembed/"/>
    <updated>2013-11-07T21:10:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/11/07/oembed</id>
    <content type="html"><![CDATA[<blockquote class="twitter-tweet"><p>Octopress用OEmbedプラグインを作ってみた <a href="http://t.co/VaYufyzL">http://t.co/VaYufyzL</a></p>&mdash; Ichinose Shogo (@shogo82148) <a href="https://twitter.com/shogo82148/statuses/233612741670207488">August 9, 2012</a></blockquote>


<script async src="http://blog.digital-bot.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<ul>
<li><a href="http://shogo82148.github.io/blog/2012/08/09/oembed/">Octopress用OEmbedプラグインを作ってみた</a></li>
</ul>


<p>とのことだったので導入した。前の記事でツイート表示がしたくてどうしようかと思ったら既に先駆者がいて助かった。非情に便利だと思う。今のところ特に問題はない。@shogo82148氏に感謝</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DBD::mysqlがMySQL5.6、OS X Mavericksに入らない]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/11/02/dbd-mysql-on-mavericks/"/>
    <updated>2013-11-02T04:03:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/11/02/dbd-mysql-on-mavericks</id>
    <content type="html"><![CDATA[<hr />

<h4>※2014/02/06</h4>

<p><a href="http://blog.digital-bot.com//blog.digital-bot.com/blog/2014/02/06/can-install-dbd-mysql/">入った</a></p>

<hr />

<blockquote class="twitter-tweet"><p><a href="https://t.co/GpkqFlNH5D">https://t.co/GpkqFlNH5D</a> DBD::mysqlが入らない。homebrewで入れたmysql5.6、perl5.18、OSX Mavericks</p>&mdash; kskexit (@kskexit) <a href="https://twitter.com/kskexit/statuses/396160572351205376">November 1, 2013</a></blockquote>


<script async src="http://blog.digital-bot.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>MacOS 10.9にしたiMacでもPerlとMySQLを使った開発がしたくなったのだが、DBD::mysqlがうまく入らなくてこまってる。あと、MySQL自体をHomebrewから入れるときに少し躓いたからそのこともメモとして残しておく。</p>

<ul>
<li><p>環境</p>

<ul>
<li><p>OS X Mavericks (SnowLeopardからアップデート、過去に一度mysqlのdmgインストール歴有り)</p></li>
<li><p>MySQL5.6 (by Homebrew)</p></li>
<li><p>Perl5.18.1 (by plenv)</p></li>
</ul>
</li>
</ul>


<!-- more -->


<h2>MySQL5.6</h2>

<pre><code>$ brew install mysql
</code></pre>

<p>これでmysql自体は入るのだが、恐らくSnowLeorpardからアップデートした影響があり、<code>/etc/my.cnf</code>がmysql5.6で扱えないオプションを含んでいて起動ができない。具体的には</p>

<pre><code>$ unset TMPDIR
$ mysql_install_db --verbose --user=`whoami` --basedir="$(brew --prefix mysql)" --datadir=/usr/local/var/mysql --tmpdir=/tmp
</code></pre>

<p>これに失敗する。しょうがないからログをみながら<code>/etc/my.cnf</code>の中の怒られているオプションに<code>loose-</code>をつけていく<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。<code>/usr/local/etc/my.cnf</code>に5.6に対応してる<code>my.cnf</code>をちゃんと置いたんだけど、どうやら<code>/etc/my.cnf</code>も見ているようで、そっちの中のエラー箇所を対応する必要があった。</p>

<p>まぁそんなこんなしてると</p>

<pre><code>$ mysql.server start
</code></pre>

<p>ができるようになるので、あとはとりあえずrootのパスワードだとかセキュリティの設定をすればOK<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>。</p>

<h2>DBD::mysql</h2>

<p>普通に</p>

<pre><code>$ cpanm DBI
$ cpanm DBD::mysql
</code></pre>

<p>したわけだけど、DBIはうまく入ったみたいだけどDBD::mysqlのテストでコケる。テストでコケるだけじゃなくてなんか他にも<code>clang</code>がcレベルのエラーを吐いてる。正直コレにはこまってて未だに解決してない。誰か解決策がわかるならおしえてほしい。<code>cpanm --look</code>して環境変数いじったりとかしてみたけど改善されなかった。</p>

<p>エラーログのgistを載せておこうと思う。</p>

<div><script src='https://gist.github.com/7261559.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code>$ cpanm DBD::mysql -v
cpanm (App::cpanminus) 1.7001 on perl 5.018001 built for darwin-thread-multi-2level
Work directory is /Users/digitalbot/.cpanm/work/1383286511.59902
You have make /usr/bin/make
You have LWP 6.05
You have /usr/bin/tar: bsdtar 2.8.3 - libarchive 2.8.3
You have /usr/bin/unzip
Searching DBD::mysql on cpanmetadb ...
--&gt; Working on DBD::mysql
Fetching http://www.cpan.org/authors/id/C/CA/CAPTTOFU/DBD-mysql-4.024.tar.gz ... OK
Unpacking DBD-mysql-4.024.tar.gz
x DBD-mysql-4.024/
x DBD-mysql-4.024/mysql.bs
x DBD-mysql-4.024/pm_to_blib
x DBD-mysql-4.024/MYMETA.yml
x DBD-mysql-4.024/Makefile.PL
x DBD-mysql-4.024/README.OSX
x DBD-mysql-4.024/MANIFEST.SKIP
x DBD-mysql-4.024/mysql.xs
x DBD-mysql-4.024/myld
x DBD-mysql-4.024/t/
x DBD-mysql-4.024/t/40nulls_prepare.t
x DBD-mysql-4.024/t/60leaks.t
x DBD-mysql-4.024/t/55utf8.t
x DBD-mysql-4.024/t/40keyinfo.t
x DBD-mysql-4.024/t/50chopblanks.t
x DBD-mysql-4.024/t/mem_leak.pl
x DBD-mysql-4.024/t/42bindparam.t
x DBD-mysql-4.024/t/32insert_error.t
x DBD-mysql-4.024/t/85init_command.t
x DBD-mysql-4.024/t/87async.t
x DBD-mysql-4.024/t/pod.t
x DBD-mysql-4.024/t/40numrows.t
x DBD-mysql-4.024/t/65types.t
x DBD-mysql-4.024/t/81procs.t
x DBD-mysql-4.024/t/40server_prepare_error.t
x DBD-mysql-4.024/t/40listfields.t
x DBD-mysql-4.024/t/31insertid.t
x DBD-mysql-4.024/t/40catalog.t
x DBD-mysql-4.024/t/50commit.t
x DBD-mysql-4.024/t/70takeimp.t
x DBD-mysql-4.024/t/52comment.t
x DBD-mysql-4.024/t/40bindparam2.t
x DBD-mysql-4.024/t/86_bug_36972.t
x DBD-mysql-4.024/t/10connect.t
x DBD-mysql-4.024/t/76multi_statement.t
x DBD-mysql-4.024/t/mysql.mtest
x DBD-mysql-4.024/t/30insertfetch.t
x DBD-mysql-4.024/t/53comment.t
x DBD-mysql-4.024/t/lib.pl
x DBD-mysql-4.024/t/29warnings.t
x DBD-mysql-4.024/t/80procs.t
x DBD-mysql-4.024/t/20createdrop.t
x DBD-mysql-4.024/t/88async-multi-stmts.t
x DBD-mysql-4.024/t/75supported_sql.t
x DBD-mysql-4.024/t/99_bug_server_prepare_blob_null.t
x DBD-mysql-4.024/t/35prepare.t
x DBD-mysql-4.024/t/25lockunlock.t
x DBD-mysql-4.024/t/90no-async.t
x DBD-mysql-4.024/t/15reconnect.t
x DBD-mysql-4.024/t/43count_params.t
x DBD-mysql-4.024/t/89async-method-check.t
x DBD-mysql-4.024/t/40server_prepare.t
x DBD-mysql-4.024/t/35limit.t
x DBD-mysql-4.024/t/40blobs.t
x DBD-mysql-4.024/t/41bindparam.t
x DBD-mysql-4.024/t/00base.t
x DBD-mysql-4.024/t/40nulls.t
x DBD-mysql-4.024/t/51bind_type_guessing.t
x DBD-mysql-4.024/t/71impdata.t
x DBD-mysql-4.024/t/40types.t
x DBD-mysql-4.024/t/65segfault.t
x DBD-mysql-4.024/t/41blobs_prepare.t
x DBD-mysql-4.024/t/mysql.dbtest
x DBD-mysql-4.024/t/40bindparam.t
x DBD-mysql-4.024/t/91errcheck.t
x DBD-mysql-4.024/dbdimp.o
x DBD-mysql-4.024/constants.h
x DBD-mysql-4.024/pod2htmd.tmp
x DBD-mysql-4.024/mysql.c
x DBD-mysql-4.024/META.yml
x DBD-mysql-4.024/dbdimp.c
x DBD-mysql-4.024/ChangeLog
x DBD-mysql-4.024/Makefile.PL.embedded
x DBD-mysql-4.024/mysql.o
x DBD-mysql-4.024/eg/
x DBD-mysql-4.024/eg/proc_example2.pl
x DBD-mysql-4.024/eg/bug21028.pl
x DBD-mysql-4.024/eg/proc_example2a.pl
x DBD-mysql-4.024/eg/bug14979.pl
x DBD-mysql-4.024/eg/proc_example4.pl
x DBD-mysql-4.024/eg/bug30033pg.pl
x DBD-mysql-4.024/eg/proc_example1.pl
x DBD-mysql-4.024/eg/proc_example2b.pl
x DBD-mysql-4.024/eg/bigint_quotes.pl
x DBD-mysql-4.024/eg/bug30033.pl
x DBD-mysql-4.024/eg/decimal_test.pl
x DBD-mysql-4.024/eg/prepare_memory_usage.pl
x DBD-mysql-4.024/eg/issue21946.pl
x DBD-mysql-4.024/eg/proc_example3.pl
x DBD-mysql-4.024/pod2htmi.tmp
x DBD-mysql-4.024/README
x DBD-mysql-4.024/TODO
x DBD-mysql-4.024/dbdimp.h
x DBD-mysql-4.024/lib/
x DBD-mysql-4.024/lib/DBD/
x DBD-mysql-4.024/lib/DBD/mysql.pm
x DBD-mysql-4.024/lib/DBD/mysql/
x DBD-mysql-4.024/lib/DBD/mysql/GetInfo.pm
x DBD-mysql-4.024/lib/DBD/mysql/INSTALL.pod
x DBD-mysql-4.024/lib/Bundle/
x DBD-mysql-4.024/lib/Bundle/DBD/
x DBD-mysql-4.024/lib/Bundle/DBD/mysql.pm
x DBD-mysql-4.024/INSTALL.html
x DBD-mysql-4.024/MANIFEST
x DBD-mysql-4.024/mysql.xsi
Entering DBD-mysql-4.024
Checking configure dependencies from META.yml
Checking if you have DBI 1.08 ... Yes (1.630)
Running Makefile.PL
Configuring DBD-mysql-4.024 ...

PLEASE NOTE:

For &#39;make test&#39; to run properly, you must ensure that the
database user &#39;digitalbot&#39; can connect to your MySQL server
and has the proper privileges that these tests require such
as &#39;drop table&#39;, &#39;create table&#39;, &#39;drop procedure&#39;, &#39;create procedure&#39;
as well as others.

mysql&gt; grant all privileges on test.* to &#39;digitalbot&#39;@&#39;localhost&#39; identified by &#39;s3kr1t&#39;;

You can also optionally set the user to run &#39;make test&#39; with:

perl Makefile.PL --testuser=username

I will use the following settings for compiling and testing:

  cflags        (mysql_config) = -I/usr/local/Cellar/mysql/5.6.13/include  -Os -g -fno-strict-aliasing
  embedded      (mysql_config) =
  ldflags       (mysql_config) =
  libs          (mysql_config) = -L/usr/local/Cellar/mysql/5.6.13/lib -lmysqlclient
  mysql_config  (guessed     ) = mysql_config
  nocatchstderr (default     ) = 0
  nofoundrows   (default     ) = 0
  ssl           (guessed     ) = 0
  testdb        (default     ) = test
  testhost      (default     ) =
  testpassword  (default     ) =
  testport      (default     ) =
  testsocket    (default     ) =
  testuser      (guessed     ) = digitalbot

To change these settings, see &#39;perl Makefile.PL --help&#39; and
&#39;perldoc INSTALL&#39;.

Checking if your kit is complete...
Warning: the following files are missing in your kit:
    MYMETA.json
Please inform the author.
Using DBI 1.63 (for perl 5.018001 on darwin-thread-multi-2level) installed in /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/site_perl/5.18.1/darwin-thread-multi-2level/auto/DBI/
Writing Makefile for DBD::mysql
Writing MYMETA.yml and MYMETA.json
OK
Checking dependencies from MYMETA.json ...
Checking if you have Test::Deep 0 ... Yes (0.110)
Checking if you have Data::Dumper 0 ... Yes (2.145)
Checking if you have Test::More 0 ... Yes (0.98)
Checking if you have DBI 1.08 ... Yes (1.630)
Building and testing DBD-mysql-4.024 ... cp lib/Bundle/DBD/mysql.pm blib/lib/Bundle/DBD/mysql.pm
cp lib/DBD/mysql/GetInfo.pm blib/lib/DBD/mysql/GetInfo.pm
cp lib/DBD/mysql.pm blib/lib/DBD/mysql.pm
cp lib/DBD/mysql/INSTALL.pod blib/lib/DBD/mysql/INSTALL.pod
cc -c  -I/Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/site_perl/5.18.1/darwin-thread-multi-2level/auto/DBI -I/usr/local/Cellar/mysql/5.6.13/include  -Os -g -fno-strict-aliasing -DDBD_MYSQL_INSERT_ID_IS_GOOD -g  -fno-common -DPERL_DARWIN -arch x86_64 -fPIC -DDEBUGGING -fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include -g -pipe -Os   -DVERSION=\&quot;4.024\&quot; -DXS_VERSION=\&quot;4.024\&quot;  &quot;-I/Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/5.18.1/darwin-thread-multi-2level/CORE&quot;   dbdimp.c
dbdimp.c:3651:22: warning: incompatible pointer types assigning to &#39;my_bool *&#39; (aka &#39;char *&#39;) from &#39;bool *&#39;
      [-Wincompatible-pointer-types]
      buffer-&gt;is_null= &amp;(fbh-&gt;is_null);
                     ^ ~~~~~~~~~~~~~~~
1 warning generated.
/Users/digitalbot/.anyenv/envs/plenv/versions/5.18/bin/perl5.18.1 /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/5.18.1/ExtUtils/xsubpp  -typemap /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/5.18.1/ExtUtils/typemap  mysql.xs &gt; mysql.xsc &amp;&amp; mv mysql.xsc mysql.c
Warning: duplicate function definition &#39;do&#39; detected in mysql.xs, line 244
Warning: duplicate function definition &#39;rows&#39; detected in mysql.xs, line 756
cc -c  -I/Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/site_perl/5.18.1/darwin-thread-multi-2level/auto/DBI -I/usr/local/Cellar/mysql/5.6.13/include  -Os -g -fno-strict-aliasing -DDBD_MYSQL_INSERT_ID_IS_GOOD -g  -fno-common -DPERL_DARWIN -arch x86_64 -fPIC -DDEBUGGING -fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include -g -pipe -Os   -DVERSION=\&quot;4.024\&quot; -DXS_VERSION=\&quot;4.024\&quot;  &quot;-I/Users/digitalbot/.anyenv/envs/plenv/versions/5.18/lib/perl5/5.18.1/darwin-thread-multi-2level/CORE&quot;   mysql.c
mysql.xs:935:38: warning: format specifies type &#39;int&#39; but the argument has type &#39;SV *&#39; (aka &#39;struct sv *&#39;) [-Wformat]
                croak(&quot;Unknown SQL Info type: %i&quot;,dbh);
                                              ~~  ^~~
1 warning generated.
Running Mkbootstrap for DBD::mysql ()
chmod 644 mysql.bs
rm -f blib/arch/auto/DBD/mysql/mysql.bundle
LD_RUN_PATH=&quot;/usr/local/Cellar/mysql/5.6.13/lib&quot; /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/bin/perl5.18.1 myld env MACOSX_DEPLOYMENT_TARGET=10.3 cc -arch x86_64  -bundle -undefined dynamic_lookup -L/usr/local/lib -fstack-protector dbdimp.o mysql.o  -o blib/arch/auto/DBD/mysql/mysql.bundle    \
       -L/usr/local/Cellar/mysql/5.6.13/lib -lmysqlclient   \

chmod 755 blib/arch/auto/DBD/mysql/mysql.bundle
cp mysql.bs blib/arch/auto/DBD/mysql/mysql.bs
chmod 644 blib/arch/auto/DBD/mysql/mysql.bs
Manifying blib/man3/DBD::mysql::INSTALL.3
Manifying blib/man3/DBD::mysql.3
Manifying blib/man3/Bundle::DBD::mysql.3
PERL_DL_NONLAZY=1 /Users/digitalbot/.anyenv/envs/plenv/versions/5.18/bin/perl5.18.1 &quot;-MExtUtils::Command::MM&quot; &quot;-e&quot; &quot;test_harness(0, &#39;blib/lib&#39;, &#39;blib/arch&#39;)&quot; t/*.t
t/00base.t ........................... 1/6 Assertion failed: (PL_valid_types_PVX[SvTYPE(_svcur) &amp; SVt_MASK] || SvTYPE(_svcur) == SVt_REGEXP), function err_hash, file DBI.xs, line 866.
t/00base.t ........................... Failed 1/6 subtests
t/10connect.t ........................ ok
t/15reconnect.t ...................... ok
t/20createdrop.t ..................... ok
t/25lockunlock.t ..................... ok
t/29warnings.t ....................... ok
t/30insertfetch.t .................... ok
t/31insertid.t ....................... ok
t/32insert_error.t ................... ok
t/35limit.t .......................... ok
t/35prepare.t ........................ ok
t/40bindparam.t ...................... ok
t/40bindparam2.t ..................... ok
t/40blobs.t .......................... ok
t/40catalog.t ........................ 1/78 Use of uninitialized value $numTests in concatenation (.) or string at t/lib.pl line 213.
t/40catalog.t ........................ ok
t/40keyinfo.t ........................ ok
t/40listfields.t ..................... ok
t/40nulls.t .......................... ok
t/40nulls_prepare.t .................. ok
t/40numrows.t ........................ ok
t/40server_prepare.t ................. ok
t/40server_prepare_error.t ........... ok
t/40types.t .......................... ok
t/41bindparam.t ...................... ok
t/41blobs_prepare.t .................. ok
t/42bindparam.t ...................... ok
t/43count_params.t ................... ok
t/50chopblanks.t ..................... ok
t/50commit.t ......................... ok
t/51bind_type_guessing.t ............. ok
t/52comment.t ........................ ok
t/53comment.t ........................ ok
t/55utf8.t ........................... ok
t/60leaks.t .......................... skipped: Skip $ENV{SLOW_TESTS} is not set
t/65segfault.t ....................... ok
t/65types.t .......................... ok
t/70takeimp.t ........................ ok
t/71impdata.t ........................ ok
t/75supported_sql.t .................. ok
t/76multi_statement.t ................ 1/25 # Testing multicall against SQL_DBMS_VER: 5.6.13-log
t/76multi_statement.t ................ ok
t/80procs.t .......................... ok
t/81procs.t .......................... ok
t/85init_command.t ................... ok
t/86_bug_36972.t ..................... ok
t/87async.t .......................... ok
t/88async-multi-stmts.t .............. ok
t/89async-method-check.t ............. ok
t/90no-async.t ....................... skipped: Async support was built into this version of DBD::mysql
t/91errcheck.t ....................... ok
t/99_bug_server_prepare_blob_null.t .. ok
t/pod.t .............................. skipped: Test::Pod 1.00 required for testing POD

Test Summary Report
-------------------
t/00base.t                         (Wstat: 6 Tests: 5 Failed: 0)
  Non-zero wait status: 6
  Parse errors: Bad plan.  You planned 6 tests but ran 5.
Files=51, Tests=1265, 27 wallclock secs ( 0.36 usr  0.13 sys +  4.31 cusr  0.64 csys =  5.44 CPU)
Result: FAIL
Failed 1/51 test programs. 0/1265 subtests failed.
make: *** [test_dynamic] Error 255
FAIL
! Installing DBD::mysql failed. See /Users/digitalbot/.cpanm/work/1383286511.59902/build.log for details. Retry with --force to force install it.
</code></pre></noscript></div>


<p>なんすか</p>

<pre><code>t/00base.t ........................... 1/6 Assertion failed: (PL_valid_types_PVX[SvTYPE(_svcur) &amp; SVt_MASK] || SvTYPE(_svcur) == SVt_REGEXP), function err_hash, file DBI.xs, line 866.
</code></pre>

<p>って。<code>DBI.xs</code>でのエラー？ちょっとそういうのやめてもらいたいのですが。</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'><p><a href="http://blog.kamipo.net/entry/2013/02/07/234050">MySQL の unknown option エラーはオプションに loose- プレフィックスをつけると回避できる</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://www.karakaram.com/install-mysql56-homebrew">HomebrewでMySQL 5.6をインストール。開発用my.cnfもさらす</a>
<a href='#fnref:2' rev='footnote'>↩</a></p>
</li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PerlでJSONを出力する。JSONとJSON::Syckの違い]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/11/01/json-cmp/"/>
    <updated>2013-11-01T22:34:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/11/01/json-cmp</id>
    <content type="html"><![CDATA[<p>PerlでJSONを吐き出す方法、いくつかあるんだけど、どうすればよいか毎回忘れるし、プロジェクトによってJSON::XS使ってたりJSON::Syck使ってたりとまちまちだから、自分なりの方法をここにメモしておく。わりとゆるふわっとしてるので間違いあるかも。</p>

<!-- more -->


<h2>JSONとSyckで同じ出力を得る</h2>

<div><script src='https://gist.github.com/7265507.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code>#!/usr/bin/env perl
use strict;
use warnings;
use feature qw/say/;
use Encode qw//;
use Encode::JavaScript::UCS;
use Data::Dumper;
use JSON qw//;
use JSON::Syck;
use Test::More;

sub _json {
    my @data = @_;
    my $json = JSON-&gt;new-&gt;ascii-&gt;utf8(0)-&gt;encode(\@data);
    $json =~ s/([&lt;&gt;\/\+])/sprintf(&quot;\\u%04x&quot;,ord($1))/eg;
    return $json;
}
sub _syck {
    my @data = @_;
    my $json = Encode::encode(&#39;JavaScript-UCS&#39;, JSON::Syck::Dump(\@data));
    $json =~ s/([&lt;&gt;\/\+])/sprintf(&quot;\\u%04x&quot;,ord($1))/eg;
    return $json;
}

my @members = ({
    age =&gt; 41,
    name =&gt; &#39;[倉持]&#39;,
}, {
    age =&gt; 42,
    name =&gt; &#39;&quot;浅沼&quot;/\/&#39;,
}, {
    age =&gt; 49,
    name =&gt; &#39;&quot;\&quot;&lt;恩田&gt;&#39;,
}, {
    age =&gt; 49,
    name =&gt; &#39;;{五十嵐};&#39;,
});

ok(_json eq _syck);
done_testing;

# say _json(@members);
##=&gt; [{&quot;age&quot;:41,&quot;name&quot;:&quot;[\u00e5\u0080\u0089\u00e6\u008c\u0081]&quot;},{&quot;name&quot;:&quot;\&quot;\u00e6\u00b5\u0085\u00e6\u00b2\u00bc\&quot;\u002f\\\u002f&quot;,&quot;age&quot;:42},{&quot;name&quot;:&quot;\&quot;\\\&quot;\u003c\u00e6\u0081\u00a9\u00e7\u0094\u00b0\u003e&quot;,&quot;age&quot;:49},{&quot;age&quot;:49,&quot;name&quot;:&quot;;{\u00e4\u00ba\u0094\u00e5\u008d\u0081\u00e5\u00b5\u0090};&quot;}]

# say _syck(@members);
##=&gt; [{&quot;age&quot;:41,&quot;name&quot;:&quot;[\u00e5\u0080\u0089\u00e6\u008c\u0081]&quot;},{&quot;name&quot;:&quot;\&quot;\u00e6\u00b5\u0085\u00e6\u00b2\u00bc\&quot;\u002f\\\u002f&quot;,&quot;age&quot;:42},{&quot;name&quot;:&quot;\&quot;\\\&quot;\u003c\u00e6\u0081\u00a9\u00e7\u0094\u00b0\u003e&quot;,&quot;age&quot;:49},{&quot;age&quot;:49,&quot;name&quot;:&quot;;{\u00e4\u00ba\u0094\u00e5\u008d\u0081\u00e5\u00b5\u0090};&quot;}]
</code></pre></noscript></div>


<p>念頭にあるのは「安全で文字コードの違いなどを意識せずに扱いたい」ということ。JSONとJSON::Syckでは当然だけどデフォルトの挙動がいくらか違うし、出力されるJSON自体も違う場合がある。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#JSON</span>
</span><span class='line'><span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="o">-&gt;</span><span class="n">ascii</span><span class="o">-&gt;</span><span class="n">utf8</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">encode</span><span class="p">(</span><span class="o">\</span><span class="nv">@data</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unicode文字列を&#8221;%uXXXX&#8221;形式にエンコードしたいから、<strong>JSON</strong>では<code>ascii</code>オプションをつける。<code>utf8(0)</code>はデフォルトの挙動なので無くても良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#JSON::Syck</span>
</span><span class='line'><span class="nn">Encode::</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;JavaScript-UCS&#39;</span><span class="p">,</span> <span class="nn">JSON::Syck::</span><span class="n">Dump</span><span class="p">(</span><span class="o">\</span><span class="nv">@data</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>こちら<strong>JSON::Syck</strong>では<code>Encode::JavaScript::UCS</code>を使うことでそれを実現する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nv">$json</span> <span class="o">=~</span> <span class="sr">s/([&lt;&gt;\/\+])/sprintf(&quot;\\u%04x&quot;,ord($1))/eg</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>それだけじゃ「&lt;、>、+」がそのままなので、置換しておく。それぞれこうすると安全なJSON文字列を得ることができる。これさえ覚えておけばプロジェクトによってどちらが使われていても、同じ結果が得られるAPIが書けるはず。</p>

<h2>渡す文字列</h2>

<p>euc-jpでencodedな文字列でもsjisでencodedな文字列でも(つまりutf8フラグ無し)、decodedな文字列(utf8フラグ有り)でもなんでも渡せる。</p>

<h2>返ってくる文字列</h2>

<p><code>"%uXXXX"</code>形式にエンコードされたutf8文字列が返ってくる。これを普通のutf8文字列(utf8フラグ無し)にしたければ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nn">Encode::</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;JavaScript-UCS&#39;</span><span class="p">,</span> <span class="nv">$str</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>すれば良いし、あとはeuc-jpとかで欲しければ普通に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nn">Encode::</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;euc-jp&#39;</span><span class="p">,</span> <span class="nn">Encode::</span><span class="n">decode_utf8</span><span class="p">(</span><span class="nn">Encode::</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;JavaScript-UCS&#39;</span><span class="p">,</span> <span class="nv">$str</span><span class="p">)));</span>
</span></code></pre></td></tr></table></div></figure>


<p>すれば良いはず。違ったら教えて。</p>

<h3>参考</h3>

<ul>
<li><p><a href="http://d.hatena.ne.jp/hasegawayosuke/20110706/p1">SONのエスケープをどこまでやるか問題</a></p></li>
<li><p><a href="http://d.hatena.ne.jp/minesouta/20071005/p1">JSON::Syck &ndash; あえて言おう、JSONはYAMLであると。</a></p></li>
<li><p><a href="http://kawa.at.webry.info/200801/article_6.html">JSON モジュールの utf8 フラグ周りの仕様 tips 注意点</a></p></li>
<li><p><a href="http://blog.64p.org/entry/20111125/1322185155">Amon2とJSONとセキュリティ</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web::Queryのtestがコケた話]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/10/28/install-web-query/"/>
    <updated>2013-10-28T15:09:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/10/28/install-web-query</id>
    <content type="html"><![CDATA[<p>先日、CentoOSにWeb::Queryを入れようとしたらこけてハマってた。レガシーなシステムでの使用だったので当然<code>Carton</code>なんか使ってないし、モジュールはそれぞれのサーバに入って直接<code>cpanm</code>する形だったが、やはりこういったレガシーな開発手順というのは早めに駆逐されたほうが世の(開発者)のためだと感じた。</p>

<p>開発環境では一発で入ってたし、試しにと手元のMBAに<code>cpanm Web::Query</code>しても問題なく入ったのに、肝心の本番サーバでWeb::Queryが入らない。テストでこけてる。その他perl5.8.8を新規に入れたまっさら状態のサーバを用意して試しても見たけど再現しない。なんなんだ。</p>

<p>ためしに最新版ではない、0.16とかいくつか古いバージョンのWeb::Queryも試したけれど、特に違いはうまれなかったので、最近の変更が原因ではなさそう。</p>

<p>サマリーだけ抜き出すとこんな感じ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Failed Test        Stat Wstat Total Fail  Failed  List of Failed
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>t/07_remove.t         2   512    10    2  20.00%  2-3
</span><span class='line'>t/08_indent.t         1   256     2    1  50.00%  1
</span><span class='line'>t/09_as_html.t        8  2048     8    8 100.00%  1-8
</span><span class='line'>t/add.t               4  1024     8    4  50.00%  1-4
</span><span class='line'>t/add_class.t         2   512     4    2  50.00%  1-2
</span><span class='line'>t/after.t             1   256     2    1  50.00%  1
</span><span class='line'>t/append.t            1   256     2    1  50.00%  1
</span><span class='line'>t/before.t            1   256     2    1  50.00%  1
</span><span class='line'>t/clone.t             1   256     2    1  50.00%  1
</span><span class='line'>t/contents.t          2   512     4    2  50.00%  1-2
</span><span class='line'>t/detach.t            2   512     6    2  33.33%  1-2
</span><span class='line'>t/insert_after.t      1   256     2    1  50.00%  1
</span><span class='line'>t/insert_before.t     1   256     2    1  50.00%  1
</span><span class='line'>t/prepend.t           1   256     2    1  50.00%  1
</span><span class='line'>t/remove_class.t      2   512     6    2  33.33%  2-3
</span><span class='line'>t/replace_with.t      4  1024     8    4  50.00%  1-4
</span><span class='line'>t/store_comments.t    2   512     4    2  50.00%  1-2
</span><span class='line'>Failed 17/28 test scripts, 39.29% okay. 36/135 subtests failed, 73.33% okay.
</span><span class='line'>FAIL</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>HTML::Element</h2>

<p>結論からいうと<strong>HTML::Element</strong>が入ってなかった。</p>

<p>Web::Queryの依存モジュールに入ってないから必ずしもHTML::Elementが必要なわけではないのだろうけど(というか依存モジュール入れる時点で入りそうなもんだけど)、これがないと何故か&#8217;\n&#8217;が<code>wq-&gt;as_html</code>だかの結果に入り込んでテスト結果が誤判定？されてしまっていた。<code>cpanm --look Web::Query</code>してテストを自分で書き換えたりもしてみたら、どうにもやはりこの&#8221;\n&#8221;が問題のようなんだけど、これはなんでだろう。</p>

<p>「これは何かおかしい」と思って、適当に関係しそうっぽいモジュールを入れてから再度<code>cpanm</code>すると、今度は何事もなかったかのようにインストールされた。それが<strong>HTML::Element</strong>だった。他にもHTML::ParserとかXML::LibXMLとか色々入れなおしたけど、やっかいなのはこれな気がする。</p>

<p>何が面倒かって、特にモジュールが足りてない(Can&rsquo;t locate~)とか言われずに、淡々とテストの文字列比較で落ちてるのが面倒だった。</p>

<h2>おわりに</h2>

<p><a href="https://gist.github.com/digitalbot/7200263">一応エラーのログを貼っておこうかと思う</a>。結局技術的に踏み込んで解決策を見出したわけでもないゆるふわな記事だけど、まぁそういう風にハマってた人もいたってことで。</p>

<p>ちなみに、このWeb::Query、とても便利。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X MavericksにSnow Leopardからアップデートした]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/10/23/install-mavericks/"/>
    <updated>2013-10-23T22:44:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/10/23/install-mavericks</id>
    <content type="html"><![CDATA[<p>手元のMacBookAir Mid 2013はまだMountainLionだけど、職場で使ってるSnowLeopard機をMavericksにアップデートしてみた。</p>

<blockquote><p><a href="http://news.livedoor.com/article/detail/8183029/">アップル、「OS X Mavericks」を無料公開！</a></p>

<blockquote><p>アップルは22日（現地時間）、OS Xの最新バージョン「Mavericks」の公開を開始した。互換性があるMacユーザーであれば無料でアップロード可能となっている。</p></blockquote></blockquote>

<p>これまでのOS X(例えばLion)は安いとはいえ無料じゃなかったので、アップデートをするには会社のシステム管理者的な人に申請をして話を通す必要があったのでこれまでアップデートを面倒臭がってしていなかった。が、しかしいい加減MacBookAirと環境が大きく違うのが地味にストレスになっていたのでこの<strong>無料アップデート</strong>に飛びついてみた。</p>

<h2>環境</h2>

<ul>
<li><p>Mac OS X Snow Leopard 多分 2009年くらいの</p></li>
<li><p>500GB HDD</p></li>
<li><p>4GB RAM</p></li>
</ul>


<p>ちょっと今自宅だし詳細なデータはないけど、一応環境はこんなもんだと思う。</p>

<h2>前準備</h2>

<p>会社のだし、とくにタイムマシーンとかでバックアップとかもとってないので、いきなりアップデートするのは怖い。そこで大事なファイルのバックアップをとったり、<strong>homebrew</strong>で入れたもののリストを作ったりした。</p>

<pre><code>$ mkdir -p ~/.brew
$ T=`date +%Y%m%d`
$ brew list &gt; ~/.brew/list$T.txt
$ brew list | xargs brew info &gt; ~/.brew/info$T.txt
</code></pre>

<p>入れたものリスト(<code>brew list</code>)だけではコンパイルオプションとか残らないから、念のためそれぞれの情報(<code>brew info</code>)も残しておいた。</p>

<h2>インストール</h2>

<p>インストール自体はApp Storeからすんなり行く。最初に<strong>残り44分</strong>て出るけど、まぁ実際は一時間くらいかかったかな。特に躓くことはないはず。SnowLeopardでも。今回、SnowLeopard &ndash;> Lion &ndash;> MountainLion &ndash;> Mavericksとか段階を踏まずに一発でMavericksを入れられるのが地味にうれしいところ。</p>

<h2>セットアップ</h2>

<p>インストールが終わると後は普通にログインして使いはじめるだけなんだけど、<strong>TotalFinder</strong>が対応してないので<strong>「互換性のないフォルダ</strong>みたいなところに移動しました」とかでた。これは少し残念だけど、今回のMavericksからデフォルトでFinderにタブが付いたのでとりあえずは問題ないかな。(※最下部追記あり)</p>

<p>あとは<strong>Xcode</strong>を改めて入れたり、<strong>Java</strong>を入れたりで、割と時間がかかってしまった。SnowLeopardからのアップデートだったので色々とシステム環境設定から細かい挙動をいじるのも少し大変だった(スクロールはナチュラルじゃダメ派)。</p>

<p>実際のところ、ターミナルと<strong>Emacs</strong>さえ動けば良いのでそこら辺の挙動しかまだ確かめてないけど、特に問題なく使えてると思う。ただ、<code>brew upgrade</code>したら(<code>brew update</code>はできた。)、一部のhomebrewで入れたツールが<strong>「libc++で入れなおしてくれ」</strong>みたいなこと言うので、次の出社時にはそれの対応をしなきゃいけないっぽい(まだ入れなおしてない)。</p>

<p>libc++といえば、</p>

<ul>
<li><a href="http://beatsync.net/main/log20131021.html">Mac OS X環境でclangを使ってC++11をboostとともに使う環境を構築するの巻</a></li>
</ul>


<p>ちょうど今日この記事を見たので貼っておく。なんか関係有るのかな。</p>

<p>他気になる点としては、アップデートとかで色々入れてた直後だからってのもあるけど、ファンが少し前より気になるくらいに活発にうごいてることと、全体的に動きがもっさりするようになった気がすることか。まぁこれはもう少し使ってみないとわからないかな。</p>

<h2>おわりに</h2>

<p>手元のMacBookAir(MountainLion)はもうちょっと人柱が出て、色々アプリやらなんやらが対応してからアップデートしようと思ってる。</p>

<h4>ちなみに</h4>

<p>アクティビティモニタのDockでメモリ使用量表示するの地味に便利に使ってたんだけど、Mavericksで出来なくなっててちょっとショック。</p>

<p><img src="http://blog.digital-bot.com/images/activitie_monitor.png" alt="ActivitieMonitor" /></p>

<p>↑これね。</p>

<h2>※追記(2013/10/31)</h2>

<p>TotalFinderはアップデートによりMavericksに対応したので今は快適に使ってる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macを購入したら絶対に使いたい！超オススメアプリ10選！決定版]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/10/12/terminal/"/>
    <updated>2013-10-12T02:23:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/10/12/terminal</id>
    <content type="html"><![CDATA[<p>さて本日は、MacBookAirを今年に買いかえてから、数々のフリーソフト・シェアウェアを使い続けてきた私が、MacBookを買ったら「絶対に」導入したい、超厳選アプリをランキング形式でご紹介したいと思います！今回は無料で使えるものばかり集めてみましたので、シェアウェアに関しては後日またご紹介したいと思います（＾＾）</p>

<p>それでは、ご覧ください！</p>

<p>↓↓</p>

<!-- more -->




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第10位</h2>

<p><img src="http://blog.digital-bot.com/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>まずは定番、Terminalですね。知る人ぞ知る端末エミュレータです。なんとMac OS Xには<strong>最初から入っています！</strong>端末エミュレータの記事ではないので詳しい説明は避けますが、Terminalはなんと、<strong>マウスを使わずに操作できるという魔法のような操作方法</strong>により世界中に多くのユーザがいます。カフェでドヤ顔したい方はぜひ導入すべきと言えるアプリでしょう。</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第9位</h2>

<p><img src="http://blog.digital-bot.com/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>Macと言えばApple、AppleといえばiPod、iPodといえば音楽です。 そう、せっかくMacを買ったからには、音楽を楽しまなければいけません。デフォルトでインストールされている「iTunes」でもよいのですが、ここはキーボードから小気味よく選曲などの操作をして音楽を聴きたいところです。そんなあなたにオススメなのが、このTerminalというアプリ！なんと、<code>afplay</code>と入力して<em>ごにょごにょ</em>するだけで音楽を聞くことが出来ます！また、Terminalには、おまけとして<a href="http://gyazo.com/3f227e2e46c8b0fee1199f899b2709dd">黒い画面にSLを走らせる</a>！機能も付いているので、カフェでの仕事が捗りますね。</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第8位</h2>

<p><img src="http://blog.digital-bot.com/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>さて、次におすすめしたいのが、Terminalというアプリです。このアプリはいわゆる「テキストエディタ」とも言えます。<code>vim</code>とか<code>emacs</code>とか、よくわからないですけど、ともかくテキストをエディットできます。よくわからないですけど、どちらも使えるので世界は平和です。</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第7位</h2>

<p><img src="http://blog.digital-bot.com/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>さて、WindowsでもMacでも変わらない現代の必須ソフト、それは「ウェブブラウザ」ですね。WindowsだとInternetExplorer、通称IEが標準でインストールされていますが、IEは「ブラウザをダウンロードするための便利なソフト」と揶揄されていたりします（苦笑）</p>

<p>Macに標準でインストールされているブラウザであるSafariはそれほど酷評されているわけではありませんが、やはり自分の手に馴染むブラウザを選択して使っていきたいですよね。</p>

<p><strong>そこでTerminalというアプリです（＾＾）</strong></p>

<p><code>w3m</code>とかいうやつをなんとかどうにかインストールみたいなことすれば、そう、ウェブブラウザです！</p>

<p>あと、<a href="http://gyazo.com/3f227e2e46c8b0fee1199f899b2709dd">SLを走らせたりもできます</a>！</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第6位</h2>

<p><img src="http://blog.digital-bot.com/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>Macには最初からMail.appがインストールされています。しかし、アカウントだの同期だのと面倒ですよね。何も気にせず気持よくメールを送りたいときもあるじゃないですか！</p>

<p>そんなときはTerminalというアプリです。</p>

<p><code>sendmail</code>とか適当に<em>ごにょごにょ</em>すれば、そう、メーラーです！</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第5位</h2>

<p><img src="http://blog.digital-bot.com/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>みなさん！twitterはやってますか？？？</p>

<p>今回5位にランク・インしたのはTerminalというツイッタークライアントです！<code>tw</code>とかを<em>ごにょごにょ</em>すればなんかうまくやってくれるみたいです！</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第4位</h2>

<p><img src="http://blog.digital-bot.com/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>4位です</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第3位</h2>

<p><img src="http://blog.digital-bot.com/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>いよいよトップスリー！第3位は「Terminal」です！世界にはEmacsとVim、2種類のエディタしかないことは有名ですが、Terminalなら両方使えます！</p>

<p>さて、この第3位のTerminalというアプリなのですが、第4位のTerminalと、どちらを3位にしようか、最後まですっご〜〜〜〜〜く悩みました！（笑）（＾＾；） それくらい、TerminalとTerminal、どちらもすごくいいアプリなんです！</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第2位</h2>

<p><img src="http://blog.digital-bot.com/images/terminal.png" alt="terminal" /></p>

<h3>Terminal</h3>

<p>さて、惜しくも1位を逃すこととなった第2位は、「Terminal」です！</p>

<p>「Terminal」、中には初めて耳にした方も居るかもしれませんね。一般的に、PCを使う場合は、マウスを使わないと操作することが出来ませんが、このTerminalでは<strong>マウスを使わずにPCを操作すること</strong>が可能とされています。ファイル操作や書類の印刷、なんでもできます！それもそのはず！Terminalは端末エミュレータなんです！端末をエミュレートしてるんですから便利なのはあたりまえかな？</p>

<p>世間には多くの端末エミュレータがありますが、私がおすすめしたいのは、やはりTerminalです。最終的に他の端末エミュレータ、例えばiTermなどを使っていくにしても、「マウスを使わずに色々できる」ことを突き詰めることができるTerminalを経験するのはあなたのPCライフにおいて非情に有意義なものとなるでしょう。</p>

<p><strong>ダウンロードはする必要がありません</strong>！</p>

<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  




<br />  


<h2>第1位</h2>

<p>そして栄えある第1位は&hellip;</p>

<br />  




<br />  




<br />  




<br />  




<br />  


<p><img src="http://blog.digital-bot.com/images/terminal.png" alt="terminal" /></p>

<h3>Terminalです！！！！！！</h3>

<br />  




<br />  




<br />  




<br />  


<hr />

<h5>元ネタ</h5>

<ul>
<li><p><a href="http://samuraism.com/2013/10/11/1554">Macを購入したら絶対に導入したい！Windowsを購入しても絶対に導入したい！Linuxをインストールしても絶対に導入したい！超オススメアプリ10選！</a></p></li>
<li><p><a href="http://blog.supermomonga.com/articles/vim/startdash-with-mac.html">Macを購入したら絶対に導入したい！私が3年間で厳選した超オススメアプリ10選！</a></p></li>
<li><p><a href="http://blog.id774.net/post/2013/10/11/408/">Mac を購入したら絶対に導入したい！超オススメアプリ 10 選！</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimを使いやすくする]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/10/12/improve-vim/"/>
    <updated>2013-10-12T01:50:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/10/12/improve-vim</id>
    <content type="html"><![CDATA[<p>Emacs派でEmacsは結構拡張してるけど、vimだってコマンドラインから結構手軽につかってる。なぜならEmacsは起動に時間がかかるし、CocoaEmacsに最適化した設定だからあまりターミナルから起動したくないから。もちろんそこらへんもいろいろ工夫はしてるけど、ほんとにさっくりファイルを弄りたいときなんかは結構vimで弄ったりする。</p>

<p>これまではtabの設定とか最低限の設定をした.vimrcを使ってたんだけど、せっかくだからvimももう少し便利にすることにした。まぁ何かに行き詰まったときにこういう設定をすると仕事してる気になって落ち着くっていう悪い癖なだけな気もする。</p>

<!-- more -->


<h2>.vimrc</h2>

<p><a href="http://blog.digital-bot.com/blog/2013/09/30/macvim-kaoriya/">前回</a>、最新のVim7.4のMacVim-Kaoriyaを入れたお陰<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>でどうやらいくつかのプラグインが強化されてるらしい。まぁ詳しい説明は<a href="http://qiita.com/">Qiita</a>なんかにまかせる。</p>

<p>まぁだらだら書くのもあれなので手っ取り早く<strong>.vim</strong>を晒そう</p>

<h3>リポジトリ</h3>

<ul>
<li><a href="https://github.com/digitalbot/dot-vim">dot-vim</a></li>
</ul>


<p>今回我ながらポイントだと思うのが、READMEのとおりにセットアップすれば大体どの環境(unix系)でも動く汎用的な設定ができたところ。Emacsの設定はとてもじゃないけど、現状自分のMac以外に持ち出せないのでここは少しこだわってみた。</p>

<p>そしてそのセットアップもできる限り簡単に仕上げたつもり。基本的には<code>git clone --recursive</code>して<code>./setup.sh</code>するだけ。簡単。</p>

<pre><code>$ git clone --recursive git://github.com/digitalbot/dot-vim.git
$ cd dot-vim
$ ./setup.sh
$ vim +NeoBundleInstall +q
</code></pre>

<p>READMEからの引用だけど、これで元のvimの挙動をそんなにいじらないけど細かいところで便利なvimができあがる。git cloneの<code>--recursive</code>については<a href="http://blog.digital-bot.com/blog/2013/08/31/git-clone-recursive/">以前書いたとおり</a>。</p>

<p>ともかく、詳しい設定の内容は割愛するけど、<code>NeoBundle</code>、<code>Unite</code>、<code>Lightline</code>、<code>Quickrun</code>とか<code>Neocomplete</code>を導入した。これ以上増やすとEmacsみたいになるので、ここらへんが必要最低限だと思う。ちなみに、<code>if_lua</code>が効かない、つまり古めのvimでもそんときは<code>Neocomplete</code>じゃなく<code>Neocomplcache</code>を使うように条件分岐してるから、ほんとに大体の環境でこの<strong>.vim</strong>は動くはず。</p>

<h2>おわりに</h2>

<p>エディタの拡張は「どこまでやるか」のバランスがとてもむずかしいように思う。<strong>Emacs</strong>ではやりすぎて重たくなってしまってるし(それでもこの記事も<strong>Emacs</strong>で書いてるけど)、できるだけ必要最低限でポータビリティがあるのがカッコイイと最近は思い始めた。あと、全然環境の違う赤の他人が<code>git clone</code>して試せるかどうかを考えてるってもの個人的には渋くてかっこいいと思う。</p>

<p>なお、Lightlineはコマンドラインから<code>mvim</code>してGUIで動かすと変なwarnを出すのでGUIではオフにしている。そこら辺のことはまた別のエントリにしようかと思ってる。</p>

<p>あとvimは引数に<code>+command</code>するとそのコマンドを起動時に実行してくれるらしく、これのお陰で<code>vim +NeoBundleInstall +q</code>といった風にワンライナーでプラグインをインストールできるのが良いと思った。</p>

<p>でもvim scriptはちょっとよくわかんないとも思った。<del>elispのほうが美しい</del></p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'><p><code>if_lua</code>が大事らしい
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacVim Kaoriyaをhomebrewから入れた]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/30/macvim-kaoriya/"/>
    <updated>2013-09-30T19:56:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/30/macvim-kaoriya</id>
    <content type="html"><![CDATA[<p>Emacsを愛用していて、システムデフォルトのではなくhomebrewで自前のEmacsを入れてるわけなんだけど、不公平な気もしたのでVimも自前のを入れることにした。</p>

<h2>MacVim KaoriYa</h2>

<p>やはりvimもGUI版があれば使いたいと思ったので<a href="http://code.google.com/p/macvim-kaoriya/">MacVim KaoriYa</a>を導入することにした。MacVim Kaoriyaのメリットは上記リンクに詳しく書いてあるし、なんだったらいろいろな設定方法も書いてある。</p>

<p>環境としては</p>

<ul>
<li>MacOSX Mountain Lion, Intel Core i7, 8 GB RAM</li>
</ul>


<p>と、後述するSnowLeopardで導入した。</p>

<!-- more -->


<p>ここで、後に入れるプラグインのためにも、<strong>v7.4</strong>, <strong>if_lua</strong> に対応していることが求められる。デフォルトではhomebrewのレシピが無いんだけど、世の中奇特な人はいるもんで、レシピを用意してくれてる人がいる<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<pre><code>$ brew tap supermomonga/homebrew-splhack
$ brew install --HEAD cmigemo-mk
$ brew install --HEAD ctags-objc-ja
$ brew install --HEAD gettext-mk
$ brew install --HEAD macvim-kaoriya
$ brew linkapps
</code></pre>

<p>これだけでなんとかなるはず。<br/>
emacsでも使うから<code>ctags</code>や<code>cmigemo</code>は標準フォーミュラの方でいれちゃったから</p>

<pre><code>$ brew unlink cmigemo &amp;&amp; brew link -f cmigemo-mk
</code></pre>

<p>とかする必要があった。</p>

<h2>SnowLeopardでの問題</h2>

<p>ちなみに、もう一台のデスクトップはSnowLeopardなんだけど、SnowLeopard環境ではgccでのコンパイルにしくじるので<code>brew install --HEAD macvim-kaoriya</code>の前にフォーミュラを少し編集する必要がある。それについては <a href="http://kronus9.sblo.jp/article/71512104.html">MacVim KaoriYaをSnow Leopard + Homebrewでビルドした</a> にて詳しい方法が載っている。<br/>
自分もエラーログ追っててclangを使うのはすぐわかったんだけど、<code>--use-clang</code>してもダメだから参ってた。</p>

<h2>.vimrc</h2>

<p>vimrcもいろいろ弄ったんだけど、まぁそこら辺は違うエントリにまとめるとする。</p>

<h2>ちなみに</h2>

<p>アイコンからGUIのMacVim KaoriYaを起動する分には問題ないけど、そのままじゃターミナルでパスが通ってないのでなんとかする必要がある。そこら辺についても他のエントリにまとめると思う。</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'><p><a href="http://supermomonga.com/2013/06/15/macvim_kaoriya_homebrew/">homebrewを使ってちょっと新しめのMacVim KaoriYaを使おう</a>
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPCに行ってきた]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/25/went-yapc/"/>
    <updated>2013-09-25T00:37:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/25/went-yapc</id>
    <content type="html"><![CDATA[<p>YAPC::ASIAに行ってきた。</p>

<p>結局明日からの音響学会の準備が会ったから一日目しかいれなかったけど、やはり参加してよかったし、来年以降も参加したいと思った。どうやら今回で@lestrratさん、@941さん体制が終わるらしいけど。Perlハッカーコミュニティの文化は本当に素晴らしいと思っていて、なんとか自分も貢献したいと思う。</p>

<p>以下、印象に残った発表</p>

<hr />

<h2>[学術分野におけるperl] by @papixさん</h2>

<blockquote><p>PerCUDA</p></blockquote>

<p>自分も信号処理で高速リアルタイム計算とかがやりたくてGPGPUとか一時期やってたし、とても興味がある話だった。けど、自分はリアルタイムで本当にコンママイクロ秒以下の世界で計算するためにGPGPUやってたから、そこをPerlのバインディングにしてその分GPU側との情報のやりとりとかに時間がかかるようだったら少しもったいないとも思った。</p>

<blockquote><p>その他研究のレガシーとモダンのこと</p></blockquote>

<p>Emacs使いとして尊敬する@syohexさんと同じ研究室と聞いて少しびっくり。研究自体もPerlでコンパイラのバグ検知とかすごい面白そうだと思った。</p>

<h2>[社内開発簡単化と世界で戦う開発を考える技術] by @yappoさん</h2>

<blockquote><p>ミッションステートメント</p>

<blockquote><p>「やることやらないことを最初にまとめておくとあとでぶれない」</p></blockquote></blockquote>

<p>これ、当たり前のことなんだけど、やっぱり当たり前に大事だと思うし、それを具体的にモジュールの例を上げて話してくれて説得力あった。</p>

<blockquote><p>普段コピペとかを嫌うのに、最初の設定ファイルはコピペとかしちゃう</p>

<blockquote><p>そういうのは秘伝のタレ化してしまうし、意味もわからなくつかってしまう</p>

<p>コピペ元の人はコピペされることを意識して書いてない。そしてバグを直してもそれが追従されない</p></blockquote></blockquote>

<p>今回のYAPC::ASIAキーワード「秘伝のタレ」。これも考えてみれば当たり前なんだけど、やっぱりコロンブスの卵的な話だと思う。そしてその現状を打破するために自分でセットアップスクリプト書くってのはまさしくstfuawscを体現しててカッコ良いとおもった。</p>

<h2>最後に</h2>

<p>普段Blogとかで追ってるすごいプログラマ達を間近で見られてとてもよい経験になった。すごくモチベーションが上がった。Perl以外の分野でも活躍するタレント性のあるハッカー達をみると、Open&amp;ShareであったりブログやOSS活動を通じての体外活動が大事なのがよく分かる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPCに行こう]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/20/go-yapc/"/>
    <updated>2013-09-20T00:05:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/20/go-yapc</id>
    <content type="html"><![CDATA[<p><a href="http://yapcasia.org/2013/">YAPC::ASIA</a>が始まった。</p>

<ul>
<li><p>慶応義塾大学日吉キャンパス(日吉駅そば)</p></li>
<li><p>9/19 ~ 9/21</p></li>
</ul>


<p>20日は一日いる予定で、21はもしかした午前中しかいられないかも。けど楽しみ。学生チケットは¥0ってものうれしい。会場でよろしく。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emacsとvimの使い分け]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/17/emacs-and-vim/"/>
    <updated>2013-09-17T20:19:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/17/emacs-and-vim</id>
    <content type="html"><![CDATA[<h3>ひとりごと</h3>

<p><strong>Emacs</strong>はMacBookAirローカルでCocoaEmacsを動かして、<code>tramp</code>でサーバ上のファイルいじったりするから徹底的にいじってるけど、<strong>Vim</strong>は逆に<code>ssh</code>したサーバ上で動かすことが多いから出来るだけシンプル且つデフォルトの挙動とそこまで違う挙動をしないような設定をしてる。</p>

<p>そういう意味では<code>C-h</code>が<code>delete-backward-char</code>にすらなってないような他人のEmacsは正直使うことが苦痛にすらなるレベル。ネット上のリポジトリの設定ファイルを手軽に読む方法とかないのかな。<code>git clone</code>とかせず、urlをしていするだけ、みたいな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[複数PCでsshキーを共有する]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/16/ssh-add/"/>
    <updated>2013-09-16T03:28:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/16/ssh-add</id>
    <content type="html"><![CDATA[<p>色んなPCでsshの鍵を共有している場合、単に鍵をコピーするだけでなく<code>ssh-add</code>が必要。</p>

<p>PC Aでssh-keygenしたキーをPC Bにコピーして使ってたんだけど、毎回</p>

<pre><code>enter passphrase for key
</code></pre>

<p>って聞いてきて鍵登録してる意味ないやん、って思いながらパスをポチポチ打ってた。</p>

<p>けどどう考えても鍵コピーした手間に見合った効果得られてないしなんだか損してるって気付いたので重い腰を上げて設定してみた。<br/>
調べたところ、PC Aではssh-keygenしたからssh-agentに登録されてるけど、PC Bでは鍵がssh-agentに登録されてないのが原因ぽいことがわかった。<br/>
そこで</p>

<pre><code>$ eval `ssh-agent`
$ ssh-add [keyのパス（デフォルトは~/.ssh/id_rsaだと思う）]
</code></pre>

<p>することで鍵を登録した。<br/>
これでいろいろ捗るようになった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多段sshの方法]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/15/how-ssh/"/>
    <updated>2013-09-15T19:37:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/15/how-ssh</id>
    <content type="html"><![CDATA[<p>多段sshをするのは知ってれば結構簡単で</p>

<pre><code>[digitalbot@local]$ ssh -t FOO ssh BAR
</code></pre>

<p>と<code>-t</code>オプションを使うことでssh先で後続のコマンドを実行してくれるので<code>local --&gt; FOO --&gt; BAR</code>と多段sshしてくれる。</p>

<!-- more -->


<h2>途中でsudoをはさむ</h2>

<p>途中でsudoを挟んで三段sshするときなんかは少しやっかい。</p>

<pre><code>local --&gt; FOO --&gt; BAR --&gt; BAZ
</code></pre>

<p>でFOOからBARにsshする際に<code>sudo ssh BAR</code>しなきゃいけないとき。
つまりワンライナーじゃなく順番にログインしていくと下記みたいになるやつ。</p>

<pre><code>[digitalbot@local]$ ssh FOO
[digitalbot@FOO]$ sudo ssh BAR
[root@BAR]$ ssh BAZ
</code></pre>

<p>これは</p>

<pre><code>[digitalbot@local]$ ssh -t FOO /usr/bin/sudo ssh -t BAR ssh BAZ
</code></pre>

<p>で一足飛びに途中でsudoを挟んで多段sshできる。sudoじゃなくても、途中で文字コード変換を挟んだりする場合も同じ要領でできるはず。</p>

<p>これはどの環境でもそうなのかよくわからないけど、<code>sudo</code>をフルパスで書かないと<code>ssh -t</code>で仮想ログインしたシェルでパスが通ってなくてエラーがでてしまったので注意が必要。</p>

<h2>.ssh/configでの設定</h2>

<p>当然.ssh/config内で設定しといたほうが楽なので設定したいところなんだけど、途中でsudoを挟む場合の書き方がイマイチよくわかってない。<br/>
途中でsudoがなければ</p>

<pre><code>Host FOO
    Hostname foo.com
    User digitalbot

Host BAR
    Hostname bar.com
    User digitalbot
    ProxyCommand ssh FOO -W %h:%p
</code></pre>

<p>みたいにそれぞれに単純に書くだけで良いのだけど&hellip;<br/>
だれかわかるようだったらsudoを挟む書き方を教えて。<br/>
Emacsのtrampだったら途中でsudoを挟む多段sshもできるから、できないことないと思うんだけど<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<h2>ちなみに</h2>

<p>ProxyCommand内の-Wを使った書き方はOpenSSHのver.5.4以前では使えないのでその場合は<code>nc</code>を使えば良い。</p>

<h4>参考</h4>

<p><a href="http://blog.glidenote.com/blog/2012/02/19/ssh-proxycommand/">多段sshで4段先のサーバに一発ログイン</a></p>

<div class="footnotes">
    <ol>
        <li id='fn:1'><p><a href="http://blog.digital-bot.com/blog/2013/09/05/emacs-tramp/">Emacs trampを使った多段リモートファイル操作</a>
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[percolが便利だけど、入れるにはpython2系のほうが良さそう]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/11/about-percol/"/>
    <updated>2013-09-11T01:03:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/11/about-percol</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/mooz/percol">percol</a>というコマンドラインを大変便利にしてくれるソフトウェアがあるのだけれど、これをインストールするときに少しハマった。percolはpython製のツールで、インストール方法は素直に<code>git clone</code>してきて<code>setup.py</code>を手で叩くか、<code>pip install percol</code>するなどあるんだけど、なんだか毎回どうしようか迷う。というのも、あんまりpython製のアプリとして意識したくないから<code>/usr/local/bin</code>とかに入って欲しいんだけど、管理の簡単さなどから<code>pip</code>も捨てがたいよなぁってなるから。</p>

<p>んで、先日もMBAを新調したのでpercolを入れてたんだけど、どうにもインストールが出来ない。pythonに明るくないのでなんて言えばいいかわからないし先日のことなので詳しくは忘れたけど、ヘッダというかモジュールのパスが解決出来てないっぽくてmakeが出来ない状況になってた。</p>

<p>どうしようかなぁと思ってたんだけど、これ、結論からいうと<strong>pythonのバージョンが間違ってた</strong>。</p>

<p>python使いの人にとっては常識なのかもしれないけど、python3系の環境ではダメで、python2系の環境にする必要があっただけみたい。自分は<strong>python3.3.2</strong>を<code>anyenv</code>で管理して入れてたので</p>

<pre><code>$ pyenv install 2.7.5
$ pyenv rehash
$ pyenv global 2.7.5
$ pyenv versions
#=&gt;   system
#=&gt; * 2.7.5 (set by /Users/kosuke/.anyenv/envs/pyenv/version)
#=&gt;   3.3.2
</code></pre>

<p>してもともと<strong>2.7.5</strong>を入れなおしてglobalに設定すれば良かった。そんで結局pipを使うことにしたので</p>

<pre><code>$ pip install percol
</code></pre>

<p>した。これでターミナル上でanythingライクな操作が可能になり、平和にまた一歩近づいた。めでたし。ついでに設定ファイルも載せておこう。</p>

<div><script src='https://gist.github.com/6511590.js'></script>
<script type="text/javascript">$("td.line-numbers").remove();</script>
<noscript><pre><code></code></pre></noscript></div>


<h4>参考</h4>

<ul>
<li><p><a href="http://d.hatena.ne.jp/kbkbkbkb1/20120429/1335835500">anything 的な絞りこみコマンド percol の紹介</a></p></li>
<li><p><a href="http://tomykaira.hatenablog.com/entry/2013/05/12/115152">git + percol(anything on terminal) が便利</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[homebrew-caskが良さそうなので導入してみた]]></title>
    <link href="http://blog.digital-bot.com/blog/2013/09/08/homebrew-cask/"/>
    <updated>2013-09-08T03:11:00+09:00</updated>
    <id>http://blog.digital-bot.com/blog/2013/09/08/homebrew-cask</id>
    <content type="html"><![CDATA[<p>どうやらMacのGUIアプリケーションまでも<code>homebrew</code>で管理をしようとしている人がいるらしい。確かに考えなくもなかったけど、本当に作った人がいるとは思わなかったし、うまいことhomebrewを拡張した感じで作ってると感じた。マックのアプリのパッケージ管理がこれで楽になればよいなぁと思う。バージョンの管理も。</p>

<!-- more -->


<h2>Git repo</h2>

<ul>
<li><a href="https://github.com/phinze/homebrew-cask">https://github.com/phinze/homebrew-cask</a></li>
</ul>


<h2>導入方法</h2>

<pre><code>$ brew tap phinze/homebrew-cask
$ brew install brew-cask
</code></pre>

<p>READMEを読む感じ、これだけ。そしておもむろに</p>

<pre><code>$ brew cask install google-chrome
</code></pre>

<p>とかすると<code>~/Applications/"Google Chrome.app"</code>が生まれるという寸法らしい。すごいお手軽。一々ダウンロードリンクを探すこともなければ、ドラッグアンドドロップも必要ない。しかも、<code>brew cask install</code>に複数のアプリ名を渡せば一括でインストールが可能。これは便利だと思う。良い。ここでちょっと関心したのが<code>brew cask list</code>でちゃんとhomebrew-caskで入れたアプリが一覧できること。これをなんかに書き出しとけば他の環境でもパイプで渡して再現が簡単。</p>

<h2>雑感</h2>

<p>homebrew本体とは微妙に違ってるところがあって、homebrewでは<code>/usr/local/Cellar</code>以下に実体をインストールしていくのに対し、homebrew-caskでインストールされたアプリケーションは、<code>Caskroom</code>というところに入る。これはデフォルトだと<code>/opt/homebrew-cask/Caskroom</code>で、最初のアプリをインストール時に<em>「ここにCaskroom作りたいんだけどパーミッションの関係で作れないからsudoパスワードを入力してくれ」</em>的なことを言われた。そして、このCaskroomから<code>~/Applications</code>にシンボリックリンクが貼られるみたい。もちろんこれもデフォルトの話で、</p>

<pre><code>$ export HOMEBREW_CASK_OPTS="--appdir=/Applications"
</code></pre>

<p>とか環境変数で変えられるみたい。<strong>update</strong>もどうやら<code>brew upgrade</code>で出来るみたいでココらへんは空気のような振る舞いをしてくれる。</p>

<h5>気になる点としては</h5>

<ul>
<li><p><code>~/Applications</code>に入るのはシンボリックリンクなので、ランチャー(少なくとも<code>QuickSilver</code>)で認識できない</p></li>
<li><p><code>brew cask uninstall</code>時には<code>*.plst</code>なども一緒に掃除してくれるのか(多分してくれない)</p>

<ul>
<li>そして確かにアンインストールはされるけど、<code>/opt/homebrew-cask/Caskroom</code>以下に空のそのアプリのディレクトリが残る</li>
</ul>
</li>
</ul>


<p>くらいかなぁ。今もともと入れてるアプリを置き換えるかどうかは少し迷うかな。ちょっといろいろ試してみようかと思う。いずれにせよ、これをうまく使いこなせばマックブックを買い換えた時なんかに絶大な威力を発揮する気がする。</p>
]]></content>
  </entry>
  
</feed>
